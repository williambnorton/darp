{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0","program":"/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","memchr","/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"use_std\"","-C","metadata=df06084003a35b9d","-C","extra-filename=-df06084003a35b9d","--out-dir","/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/client/target/rls/debug/deps","-L","dependency=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/client/target/rls/debug/deps","--cap-lints","allow","--cfg","memchr_runtime_simd","--cfg","memchr_runtime_sse2","--cfg","memchr_runtime_sse42","--cfg","memchr_runtime_avx","--error-format=json","--sysroot","/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/client/target/rls/debug/deps/libmemchr-df06084003a35b9d.rmeta"},"prelude":{"crate_id":{"name":"memchr","disambiguator":[7249061973836506538,10739123639085947397]},"crate_root":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src","external_crates":[{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16125995874279485955,8748768413821387129]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16348493018826829365,4805211970644213659]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8279628881989909837,14733107812838978533]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17646096667663791084,12272231044852301253]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4565760717972533866,4473905522437311200]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7551666766599439458,2782226154556471377]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11632633256475535999,13776501019579249840]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4897607742433192731,640426136460610934]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15534826887064733014,5612939005974764181]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1175232612468424282,18163295741730709113]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[15721596154046543409,2249662874474360977]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[7768511099061914688,4128344505014859734]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15048206832849992118,3387758009953732431]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[13751153714556823430,9887373550715096268]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[13432701172845674020,17161827416142858739]}}],"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":0,"byte_end":11953,"line_start":1,"line_end":395,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":47},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":1675,"byte_end":1681,"line_start":45,"line_end":45,"column_start":16,"column_end":22},"alias_span":null,"name":"Memchr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":63},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":1683,"byte_end":1690,"line_start":45,"line_end":45,"column_start":24,"column_end":31},"alias_span":null,"name":"Memchr2","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":80},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":1692,"byte_end":1699,"line_start":45,"line_end":45,"column_start":33,"column_end":40},"alias_span":null,"name":"Memchr3","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":0,"byte_end":11953,"line_start":1,"line_end":395,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":37},{"krate":0,"index":98},{"krate":0,"index":111},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":189},{"krate":0,"index":191}],"decl_id":null,"docs":"The `memchr` crate provides heavily optimized routines for searching bytes.","sig":null,"attributes":[{"value":"*\nThe `memchr` crate provides heavily optimized routines for searching bytes.\n\nThe `memchr` function is traditionally provided by libc, however, the\nperformance of `memchr` can vary significantly depending on the specific\nimplementation of libc that is used. They can range from manually tuned\nAssembly implementations (like that found in GNU's libc) all the way to\nnon-vectorized C implementations (like that found in MUSL).\n\nTo smooth out the differences between implementations of libc, at least\non `x86_64` for Rust 1.27+, this crate provides its own implementation of\n`memchr` that should perform competitively with the one found in GNU's libc.\nThe implementation is in pure Rust and has no dependency on a C compiler or an\nAssembler.\n\nAdditionally, GNU libc also provides an extension, `memrchr`. This crate\nprovides its own implementation of `memrchr` as well, on top of `memchr2`,\n`memchr3`, `memrchr2` and `memrchr3`. The difference between `memchr` and\n`memchr2` is that that `memchr2` permits finding all occurrences of two bytes\ninstead of one. Similarly for `memchr3`.\n*/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":0,"byte_end":1086,"line_start":1,"line_end":21,"column_start":1,"column_end":3}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":1131,"byte_end":1153,"line_start":24,"line_end":24,"column_start":1,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":47},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24265,"byte_end":24271,"line_start":34,"line_end":34,"column_start":12,"column_end":18},"name":"Memchr","qualname":"::iter::Memchr","value":"Memchr {  }","parent":null,"children":[{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" An iterator for `memchr`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24224,"byte_end":24253,"line_start":33,"line_end":33,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24522,"byte_end":24525,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr>::new","value":"pub fn new(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24421,"byte_end":24496,"line_start":43,"line_end":43,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24501,"byte_end":24510,"line_start":44,"line_end":44,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":63},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25170,"byte_end":25177,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"Memchr2","qualname":"::iter::Memchr2","value":"Memchr2 {  }","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68}],"decl_id":null,"docs":" An iterator for `memchr2`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr2`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25128,"byte_end":25158,"line_start":71,"line_end":71,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25447,"byte_end":25450,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr2>::new","value":"pub fn new(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" Creates a new iterator that yields all positions of needle in haystack.\n","sig":null,"attributes":[{"value":"/ Creates a new iterator that yields all positions of needle in haystack.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25346,"byte_end":25421,"line_start":82,"line_end":82,"column_start":5,"column_end":80}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25426,"byte_end":25435,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":80},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26256,"byte_end":26263,"line_start":119,"line_end":119,"column_start":12,"column_end":19},"name":"Memchr3","qualname":"::iter::Memchr3","value":"Memchr3 {  }","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86}],"decl_id":null,"docs":" An iterator for `memchr3`.\n","sig":null,"attributes":[{"value":"/ An iterator for `memchr3`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26214,"byte_end":26244,"line_start":118,"line_end":118,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26544,"byte_end":26547,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<Memchr3>::new","value":"pub fn new(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Memchr3` that's initialized to zero with a haystack\n","sig":null,"attributes":[{"value":"/ Create a new `Memchr3` that's initialized to zero with a haystack","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26449,"byte_end":26518,"line_start":130,"line_end":130,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26523,"byte_end":26532,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":175},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2027,"byte_end":2038,"line_start":61,"line_end":61,"column_start":8,"column_end":19},"name":"memchr_iter","qualname":"::memchr_iter","value":"pub fn memchr_iter(u8, &[u8]) -> Memchr","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":1944,"byte_end":2009,"line_start":59,"line_end":59,"column_start":1,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2010,"byte_end":2019,"line_start":60,"line_end":60,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2201,"byte_end":2213,"line_start":67,"line_end":67,"column_start":8,"column_end":20},"name":"memchr2_iter","qualname":"::memchr2_iter","value":"pub fn memchr2_iter(u8, u8, &[u8]) -> Memchr2","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2117,"byte_end":2183,"line_start":65,"line_end":65,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2184,"byte_end":2193,"line_start":66,"line_end":66,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":177},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2402,"byte_end":2414,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"memchr3_iter","qualname":"::memchr3_iter","value":"pub fn memchr3_iter(u8, u8, u8, &[u8]) -> Memchr3","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2318,"byte_end":2384,"line_start":71,"line_end":71,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2385,"byte_end":2394,"line_start":72,"line_end":72,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":178},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2655,"byte_end":2667,"line_start":84,"line_end":84,"column_start":8,"column_end":20},"name":"memrchr_iter","qualname":"::memrchr_iter","value":"pub fn memrchr_iter(u8, &[u8]) -> Rev<Memchr>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needle in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needle in a haystack, in reverse.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2560,"byte_end":2637,"line_start":82,"line_end":82,"column_start":1,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2638,"byte_end":2647,"line_start":83,"line_end":83,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":179},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2853,"byte_end":2866,"line_start":90,"line_end":90,"column_start":8,"column_end":21},"name":"memrchr2_iter","qualname":"::memrchr2_iter","value":"pub fn memrchr2_iter(u8, u8, &[u8]) -> Rev<Memchr2>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2757,"byte_end":2835,"line_start":88,"line_end":88,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2836,"byte_end":2845,"line_start":89,"line_end":89,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":180},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3093,"byte_end":3106,"line_start":100,"line_end":100,"column_start":8,"column_end":21},"name":"memrchr3_iter","qualname":"::memrchr3_iter","value":"pub fn memrchr3_iter(u8, u8, u8, &[u8]) -> Rev<Memchr3>","parent":null,"children":[],"decl_id":null,"docs":" An iterator over all occurrences of the needles in a haystack, in reverse.\n","sig":null,"attributes":[{"value":"/ An iterator over all occurrences of the needles in a haystack, in reverse.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":2997,"byte_end":3075,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3076,"byte_end":3085,"line_start":99,"line_end":99,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":181},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3933,"byte_end":3939,"line_start":130,"line_end":130,"column_start":8,"column_end":14},"name":"memchr","qualname":"::memchr","value":"pub fn memchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the first occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the first occurrence of a byte in a slice.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3263,"byte_end":3320,"line_start":109,"line_end":109,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3321,"byte_end":3324,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle` in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3325,"byte_end":3404,"line_start":111,"line_end":111,"column_start":1,"column_end":80}},{"value":"/ `haystack`, or `None` if one is not found.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3405,"byte_end":3451,"line_start":112,"line_end":112,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3452,"byte_end":3455,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3456,"byte_end":3514,"line_start":114,"line_end":114,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle)`, `memchr` will use a highly","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3515,"byte_end":3591,"line_start":115,"line_end":115,"column_start":1,"column_end":77}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3592,"byte_end":3668,"line_start":116,"line_end":116,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3669,"byte_end":3679,"line_start":117,"line_end":117,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3680,"byte_end":3683,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3684,"byte_end":3697,"line_start":119,"line_end":119,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3698,"byte_end":3701,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of a byte in a byte string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3702,"byte_end":3775,"line_start":121,"line_end":121,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3776,"byte_end":3779,"line_start":122,"line_end":122,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3780,"byte_end":3787,"line_start":123,"line_end":123,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3788,"byte_end":3811,"line_start":124,"line_end":124,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3812,"byte_end":3815,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3816,"byte_end":3858,"line_start":126,"line_end":126,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr(b'k', haystack), Some(8));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3859,"byte_end":3907,"line_start":127,"line_end":127,"column_start":1,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3908,"byte_end":3915,"line_start":128,"line_end":128,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":3916,"byte_end":3925,"line_start":129,"line_end":129,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":183},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5522,"byte_end":5529,"line_start":185,"line_end":185,"column_start":8,"column_end":15},"name":"memchr2","qualname":"::memchr2","value":"pub fn memchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":4717,"byte_end":4793,"line_start":162,"line_end":162,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":4794,"byte_end":4797,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":4798,"byte_end":4875,"line_start":164,"line_end":164,"column_start":1,"column_end":78}},{"value":"/ or the first occurrence of `needle2` in `haystack` (whichever occurs","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":4876,"byte_end":4948,"line_start":165,"line_end":165,"column_start":1,"column_end":73}},{"value":"/ earlier), or `None` if neither one is found.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":4949,"byte_end":4997,"line_start":166,"line_end":166,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":4998,"byte_end":5001,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5002,"byte_end":5060,"line_start":168,"line_end":168,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2)`, `memchr2`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5061,"byte_end":5137,"line_start":169,"line_end":169,"column_start":1,"column_end":77}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5138,"byte_end":5217,"line_start":170,"line_end":170,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5218,"byte_end":5243,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5244,"byte_end":5247,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5248,"byte_end":5261,"line_start":173,"line_end":173,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5262,"byte_end":5265,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of either of two bytes in a byte","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5266,"byte_end":5344,"line_start":175,"line_end":175,"column_start":1,"column_end":79}},{"value":"/ string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5345,"byte_end":5356,"line_start":176,"line_end":176,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5357,"byte_end":5360,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5361,"byte_end":5368,"line_start":178,"line_end":178,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr2;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5369,"byte_end":5393,"line_start":179,"line_end":179,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5394,"byte_end":5397,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5398,"byte_end":5440,"line_start":181,"line_end":181,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr2(b'k', b'q', haystack), Some(4));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5441,"byte_end":5496,"line_start":182,"line_end":182,"column_start":1,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5497,"byte_end":5504,"line_start":183,"line_end":183,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":5505,"byte_end":5514,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":185},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6945,"byte_end":6952,"line_start":228,"line_end":228,"column_start":8,"column_end":15},"name":"memchr3","qualname":"::memchr3","value":"pub fn memchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6090,"byte_end":6165,"line_start":205,"line_end":205,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6166,"byte_end":6169,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the first occurrence of `needle1`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6170,"byte_end":6248,"line_start":207,"line_end":207,"column_start":1,"column_end":79}},{"value":"/ the first occurrence of `needle2`, or the first occurence of `needle3` in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6249,"byte_end":6326,"line_start":208,"line_end":208,"column_start":1,"column_end":78}},{"value":"/ `haystack` (whichever occurs earliest), or `None` if none are found.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6327,"byte_end":6399,"line_start":209,"line_end":209,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6400,"byte_end":6403,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6404,"byte_end":6462,"line_start":211,"line_end":211,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().position(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6463,"byte_end":6529,"line_start":212,"line_end":212,"column_start":1,"column_end":67}},{"value":"/ b == needle3)`, `memchr3` will use a highly optimized routine that can be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6530,"byte_end":6607,"line_start":213,"line_end":213,"column_start":1,"column_end":78}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6608,"byte_end":6661,"line_start":214,"line_end":214,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6662,"byte_end":6665,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6666,"byte_end":6679,"line_start":216,"line_end":216,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6680,"byte_end":6683,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the first position of any of three bytes in a byte","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6684,"byte_end":6761,"line_start":218,"line_end":218,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6762,"byte_end":6773,"line_start":219,"line_end":219,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6774,"byte_end":6777,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6778,"byte_end":6785,"line_start":221,"line_end":221,"column_start":1,"column_end":8}},{"value":"/ use memchr::memchr3;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6786,"byte_end":6810,"line_start":222,"line_end":222,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6811,"byte_end":6814,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6815,"byte_end":6857,"line_start":224,"line_end":224,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memchr3(b'k', b'q', b'e', haystack), Some(2));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6858,"byte_end":6919,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6920,"byte_end":6927,"line_start":226,"line_end":226,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":6928,"byte_end":6937,"line_start":227,"line_end":227,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8250,"byte_end":8257,"line_start":274,"line_end":274,"column_start":8,"column_end":15},"name":"memrchr","qualname":"::memrchr","value":"pub fn memrchr(u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Search for the last occurrence of a byte in a slice.","sig":null,"attributes":[{"value":"/ Search for the last occurrence of a byte in a slice.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7578,"byte_end":7634,"line_start":253,"line_end":253,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7635,"byte_end":7638,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle` in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7639,"byte_end":7717,"line_start":255,"line_end":255,"column_start":1,"column_end":79}},{"value":"/ `haystack`, or `None` if one is not found.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7718,"byte_end":7764,"line_start":256,"line_end":256,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7765,"byte_end":7768,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7769,"byte_end":7827,"line_start":258,"line_end":258,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle)`, `memrchr` will use a highly","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7828,"byte_end":7906,"line_start":259,"line_end":259,"column_start":1,"column_end":79}},{"value":"/ optimized routine that can be up to an order of magnitude faster in some","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7907,"byte_end":7983,"line_start":260,"line_end":260,"column_start":1,"column_end":77}},{"value":"/ cases.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7984,"byte_end":7994,"line_start":261,"line_end":261,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7995,"byte_end":7998,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":7999,"byte_end":8012,"line_start":263,"line_end":263,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8013,"byte_end":8016,"line_start":264,"line_end":264,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of a byte in a byte string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8017,"byte_end":8089,"line_start":265,"line_end":265,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8090,"byte_end":8093,"line_start":266,"line_end":266,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8094,"byte_end":8101,"line_start":267,"line_end":267,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8102,"byte_end":8126,"line_start":268,"line_end":268,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8127,"byte_end":8130,"line_start":269,"line_end":269,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8131,"byte_end":8173,"line_start":270,"line_end":270,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr(b'o', haystack), Some(17));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8174,"byte_end":8224,"line_start":271,"line_end":271,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8225,"byte_end":8232,"line_start":272,"line_end":272,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":8233,"byte_end":8242,"line_start":273,"line_end":273,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9895,"byte_end":9903,"line_start":329,"line_end":329,"column_start":8,"column_end":16},"name":"memrchr2","qualname":"::memrchr2","value":"pub fn memrchr2(u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for either of two bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for either of two bytes instead of just one.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9090,"byte_end":9167,"line_start":306,"line_end":306,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9168,"byte_end":9171,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9172,"byte_end":9248,"line_start":308,"line_end":308,"column_start":1,"column_end":77}},{"value":"/ or the last occurrence of `needle2` in `haystack` (whichever occurs later),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9249,"byte_end":9328,"line_start":309,"line_end":309,"column_start":1,"column_end":80}},{"value":"/ or `None` if neither one is found.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9329,"byte_end":9367,"line_start":310,"line_end":310,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9368,"byte_end":9371,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9372,"byte_end":9430,"line_start":312,"line_end":312,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2)`, `memrchr2`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9431,"byte_end":9509,"line_start":313,"line_end":313,"column_start":1,"column_end":79}},{"value":"/ will use a highly optimized routine that can be up to an order of magnitude","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9510,"byte_end":9589,"line_start":314,"line_end":314,"column_start":1,"column_end":80}},{"value":"/ faster in some cases.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9590,"byte_end":9615,"line_start":315,"line_end":315,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9616,"byte_end":9619,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9620,"byte_end":9633,"line_start":317,"line_end":317,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9634,"byte_end":9637,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of either of two bytes in a byte","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9638,"byte_end":9715,"line_start":319,"line_end":319,"column_start":1,"column_end":78}},{"value":"/ string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9716,"byte_end":9727,"line_start":320,"line_end":320,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9728,"byte_end":9731,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9732,"byte_end":9739,"line_start":322,"line_end":322,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr2;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9740,"byte_end":9765,"line_start":323,"line_end":323,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9766,"byte_end":9769,"line_start":324,"line_end":324,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9770,"byte_end":9812,"line_start":325,"line_end":325,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr2(b'k', b'q', haystack), Some(8));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9813,"byte_end":9869,"line_start":326,"line_end":326,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9870,"byte_end":9877,"line_start":327,"line_end":327,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":9878,"byte_end":9887,"line_start":328,"line_end":328,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11319,"byte_end":11327,"line_start":372,"line_end":372,"column_start":8,"column_end":16},"name":"memrchr3","qualname":"::memrchr3","value":"pub fn memrchr3(u8, u8, u8, &[u8]) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Like `memrchr`, but searches for any of three bytes instead of just one.","sig":null,"attributes":[{"value":"/ Like `memrchr`, but searches for any of three bytes instead of just one.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10466,"byte_end":10542,"line_start":349,"line_end":349,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10543,"byte_end":10546,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ This returns the index corresponding to the last occurrence of `needle1`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10547,"byte_end":10624,"line_start":351,"line_end":351,"column_start":1,"column_end":78}},{"value":"/ the last occurrence of `needle2`, or the last occurence of `needle3` in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10625,"byte_end":10700,"line_start":352,"line_end":352,"column_start":1,"column_end":76}},{"value":"/ `haystack` (whichever occurs later), or `None` if none are found.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10701,"byte_end":10770,"line_start":353,"line_end":353,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10771,"byte_end":10774,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ While this is operationally the same as something like","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10775,"byte_end":10833,"line_start":355,"line_end":355,"column_start":1,"column_end":59}},{"value":"/ `haystack.iter().rposition(|&b| b == needle1 || b == needle2 ||","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10834,"byte_end":10901,"line_start":356,"line_end":356,"column_start":1,"column_end":68}},{"value":"/ b == needle3)`, `memrchr3` will use a highly optimized routine that can be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10902,"byte_end":10980,"line_start":357,"line_end":357,"column_start":1,"column_end":79}},{"value":"/ up to an order of magnitude faster in some cases.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":10981,"byte_end":11034,"line_start":358,"line_end":358,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11035,"byte_end":11038,"line_start":359,"line_end":359,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11039,"byte_end":11052,"line_start":360,"line_end":360,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11053,"byte_end":11056,"line_start":361,"line_end":361,"column_start":1,"column_end":4}},{"value":"/ This shows how to find the last position of any of three bytes in a byte","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11057,"byte_end":11133,"line_start":362,"line_end":362,"column_start":1,"column_end":77}},{"value":"/ string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11134,"byte_end":11145,"line_start":363,"line_end":363,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11146,"byte_end":11149,"line_start":364,"line_end":364,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11150,"byte_end":11157,"line_start":365,"line_end":365,"column_start":1,"column_end":8}},{"value":"/ use memchr::memrchr3;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11158,"byte_end":11183,"line_start":366,"line_end":366,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11184,"byte_end":11187,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ let haystack = b\"the quick brown fox\";","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11188,"byte_end":11230,"line_start":368,"line_end":368,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(memrchr3(b'k', b'q', b'e', haystack), Some(8));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11231,"byte_end":11293,"line_start":369,"line_end":369,"column_start":1,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11294,"byte_end":11301,"line_start":370,"line_end":370,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/lib.rs","byte_start":11302,"byte_end":11311,"line_start":371,"line_end":371,"column_start":1,"column_end":10}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24404,"byte_end":24410,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24665,"byte_end":24671,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24973,"byte_end":24979,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25328,"byte_end":25335,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25683,"byte_end":25690,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26008,"byte_end":26015,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26431,"byte_end":26438,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26862,"byte_end":26869,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":27235,"byte_end":27242,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24404,"byte_end":24410,"line_start":42,"line_end":42,"column_start":10,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":47},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24665,"byte_end":24671,"line_start":50,"line_end":50,"column_start":23,"column_end":29},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":47},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":24973,"byte_end":24979,"line_start":64,"line_end":64,"column_start":34,"column_end":40},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":47},"to":{"krate":2,"index":5552}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25328,"byte_end":25335,"line_start":81,"line_end":81,"column_start":10,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":63},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":25683,"byte_end":25690,"line_start":94,"line_end":94,"column_start":23,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26008,"byte_end":26015,"line_start":108,"line_end":108,"column_start":34,"column_end":41},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":63},"to":{"krate":2,"index":5552}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26431,"byte_end":26438,"line_start":129,"line_end":129,"column_start":10,"column_end":17},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":80},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":26862,"byte_end":26869,"line_start":148,"line_end":148,"column_start":23,"column_end":30},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/memchr-2.3.0/src/iter.rs","byte_start":27235,"byte_end":27242,"line_start":165,"line_end":165,"column_start":34,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":80},"to":{"krate":2,"index":5552}}]}