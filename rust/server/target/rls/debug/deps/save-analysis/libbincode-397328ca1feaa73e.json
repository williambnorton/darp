{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1","program":"/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bincode","/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=397328ca1feaa73e","-C","extra-filename=-397328ca1feaa73e","--out-dir","/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps","-L","dependency=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps","--extern","byteorder=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libbyteorder-10f3869ba51f40b3.rmeta","--extern","serde=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libserde-50c3ddbb3e8418eb.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libbincode-397328ca1feaa73e.rmeta"},"prelude":{"crate_id":{"name":"bincode","disambiguator":[5613978736066578913,9157005590772465718]},"crate_root":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src","external_crates":[{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16125995874279485955,8748768413821387129]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16348493018826829365,4805211970644213659]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8279628881989909837,14733107812838978533]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17646096667663791084,12272231044852301253]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4565760717972533866,4473905522437311200]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7551666766599439458,2782226154556471377]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11632633256475535999,13776501019579249840]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4897607742433192731,640426136460610934]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15534826887064733014,5612939005974764181]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1175232612468424282,18163295741730709113]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[15721596154046543409,2249662874474360977]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[7768511099061914688,4128344505014859734]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15048206832849992118,3387758009953732431]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[13751153714556823430,9887373550715096268]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[13432701172845674020,17161827416142858739]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":16,"id":{"name":"byteorder","disambiguator":[4712814851856515508,952023563538226261]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":17,"id":{"name":"serde","disambiguator":[3998884951096239396,8368982205685970456]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","num":18,"id":{"name":"serde_derive","disambiguator":[6960324764935044775,15997903051797463997]}}],"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":0,"byte_end":5137,"line_start":1,"line_end":173,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":754},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1122,"byte_end":1128,"line_start":41,"line_end":41,"column_start":17,"column_end":23},"alias_span":null,"name":"Config","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":150},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1149,"byte_end":1160,"line_start":42,"line_end":42,"column_start":20,"column_end":31},"alias_span":null,"name":"BincodeRead","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":160},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1162,"byte_end":1170,"line_start":42,"line_end":42,"column_start":33,"column_end":41},"alias_span":null,"name":"IoReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":157},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1172,"byte_end":1183,"line_start":42,"line_end":42,"column_start":43,"column_end":54},"alias_span":null,"name":"SliceReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":339},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1202,"byte_end":1207,"line_start":43,"line_end":43,"column_start":17,"column_end":22},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":780},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1209,"byte_end":1218,"line_start":43,"line_end":43,"column_start":24,"column_end":33},"alias_span":null,"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":337},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1220,"byte_end":1226,"line_start":43,"line_end":43,"column_start":35,"column_end":41},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":0,"byte_end":5137,"line_start":1,"line_end":173,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":131},{"krate":0,"index":329},{"krate":0,"index":353},{"krate":0,"index":422},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":690},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":702},{"krate":0,"index":706},{"krate":0,"index":707},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":715},{"krate":0,"index":719},{"krate":0,"index":723},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":732}],"decl_id":null,"docs":" Bincode is a crate for encoding and decoding using a tiny binary\n serialization strategy.  Using it, you can easily go from having\n an object in memory, quickly serialize it to bytes, and then\n deserialize it back just as fast!","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23}},{"value":"/ Bincode is a crate for encoding and decoding using a tiny binary","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":24,"byte_end":92,"line_start":3,"line_end":3,"column_start":1,"column_end":69}},{"value":"/ serialization strategy.  Using it, you can easily go from having","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":93,"byte_end":161,"line_start":4,"line_end":4,"column_start":1,"column_end":69}},{"value":"/ an object in memory, quickly serialize it to bytes, and then","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":162,"byte_end":226,"line_start":5,"line_end":5,"column_start":1,"column_end":65}},{"value":"/ deserialize it back just as fast!","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":227,"byte_end":264,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":265,"byte_end":268,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ### Using Basic Functions","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":269,"byte_end":298,"line_start":8,"line_end":8,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":299,"byte_end":302,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ```edition2018","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":303,"byte_end":321,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/ fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":322,"byte_end":337,"line_start":11,"line_end":11,"column_start":1,"column_end":16}},{"value":"/     // The object that we will serialize.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":338,"byte_end":383,"line_start":12,"line_end":12,"column_start":1,"column_end":46}},{"value":"/     let target: Option<String>  = Some(\"hello world\".to_string());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":384,"byte_end":454,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":455,"byte_end":458,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/     let encoded: Vec<u8> = bincode::serialize(&target).unwrap();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":459,"byte_end":527,"line_start":15,"line_end":15,"column_start":1,"column_end":69}},{"value":"/     let decoded: Option<String> = bincode::deserialize(&encoded[..]).unwrap();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":528,"byte_end":610,"line_start":16,"line_end":16,"column_start":1,"column_end":83}},{"value":"/     assert_eq!(target, decoded);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":611,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":648,"byte_end":653,"line_start":18,"line_end":18,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":654,"byte_end":661,"line_start":19,"line_end":19,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":662,"byte_end":665,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ ### 128bit numbers","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":666,"byte_end":688,"line_start":21,"line_end":21,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":689,"byte_end":692,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Support for `i128` and `u128` is automatically enabled on Rust toolchains","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":693,"byte_end":770,"line_start":23,"line_end":23,"column_start":1,"column_end":78}},{"value":"/ greater than or equal to `1.26.0` and disabled for targets which do not support it","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":771,"byte_end":857,"line_start":24,"line_end":24,"column_start":1,"column_end":87}},{"value":"crate_name = \"bincode\"","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":916,"byte_end":942,"line_start":27,"line_end":27,"column_start":1,"column_end":27}},{"value":"crate_type = \"rlib\"","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":943,"byte_end":966,"line_start":28,"line_end":28,"column_start":1,"column_end":24}},{"value":"crate_type = \"dylib\"","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":967,"byte_end":991,"line_start":29,"line_end":29,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":31},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":5547,"byte_end":5552,"line_start":16,"line_end":16,"column_start":10,"column_end":15},"name":"Limit","qualname":"::config::Options::Limit","value":"type Limit: SizeLimit + 'static;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":32},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":5584,"byte_end":5590,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Endian","qualname":"::config::Options::Endian","value":"type Endian: ByteOrder + 'static;","parent":{"krate":0,"index":30},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":754},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7774,"byte_end":7780,"line_start":99,"line_end":99,"column_start":12,"column_end":18},"name":"Config","qualname":"::config::Config","value":"Config {  }","parent":null,"children":[{"krate":0,"index":755},{"krate":0,"index":756}],"decl_id":null,"docs":" A configuration builder whose options Bincode will use\n while serializing and deserializing.","sig":null,"attributes":[{"value":"/ A configuration builder whose options Bincode will use","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":6975,"byte_end":7033,"line_start":85,"line_end":85,"column_start":1,"column_end":59}},{"value":"/ while serializing and deserializing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7034,"byte_end":7074,"line_start":86,"line_end":86,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7075,"byte_end":7078,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ ### Options","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7079,"byte_end":7094,"line_start":88,"line_end":88,"column_start":1,"column_end":16}},{"value":"/ Endianness: The endianness with which multi-byte integers will be read/written.  *default: little endian*","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7095,"byte_end":7204,"line_start":89,"line_end":89,"column_start":1,"column_end":110}},{"value":"/ Limit: The maximum number of bytes that will be read/written in a bincode serialize/deserialize. *default: unlimited*","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7205,"byte_end":7326,"line_start":90,"line_end":90,"column_start":1,"column_end":122}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7327,"byte_end":7330,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ ### Byte Limit Details","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7331,"byte_end":7357,"line_start":92,"line_end":92,"column_start":1,"column_end":27}},{"value":"/ The purpose of byte-limiting is to prevent Denial-Of-Service attacks whereby malicious attackers get bincode","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7358,"byte_end":7470,"line_start":93,"line_end":93,"column_start":1,"column_end":113}},{"value":"/ deserialization to crash your process by allocating too much memory or keeping a connection open for too long.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7471,"byte_end":7585,"line_start":94,"line_end":94,"column_start":1,"column_end":115}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7586,"byte_end":7589,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ When a byte limit is set, bincode will return `Err` on any deserialization that goes over the limit, or any","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7590,"byte_end":7701,"line_start":96,"line_end":96,"column_start":1,"column_end":112}},{"value":"/ serialization that goes over the limit.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":7702,"byte_end":7745,"line_start":97,"line_end":97,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10371,"byte_end":10379,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"no_limit","qualname":"<Config>::no_limit","value":"pub fn no_limit(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the byte limit to be unlimited.\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to be unlimited.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10268,"byte_end":10308,"line_start":194,"line_end":194,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10313,"byte_end":10337,"line_start":195,"line_end":195,"column_start":5,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10342,"byte_end":10359,"line_start":196,"line_end":196,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10544,"byte_end":10549,"line_start":204,"line_end":204,"column_start":12,"column_end":17},"name":"limit","qualname":"<Config>::limit","value":"pub fn limit(&mut Self, u64) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the byte limit to `limit`.\n","sig":null,"attributes":[{"value":"/ Sets the byte limit to `limit`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10475,"byte_end":10510,"line_start":202,"line_end":202,"column_start":5,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10515,"byte_end":10532,"line_start":203,"line_end":203,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10765,"byte_end":10778,"line_start":212,"line_end":212,"column_start":12,"column_end":25},"name":"little_endian","qualname":"<Config>::little_endian","value":"pub fn little_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to little-endian\n This is the default.\n","sig":null,"attributes":[{"value":"/ Sets the endianness to little-endian","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10662,"byte_end":10702,"line_start":209,"line_end":209,"column_start":5,"column_end":45}},{"value":"/ This is the default.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10707,"byte_end":10731,"line_start":210,"line_end":210,"column_start":5,"column_end":29}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10736,"byte_end":10753,"line_start":211,"line_end":211,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10944,"byte_end":10954,"line_start":219,"line_end":219,"column_start":12,"column_end":22},"name":"big_endian","qualname":"<Config>::big_endian","value":"pub fn big_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to big-endian\n","sig":null,"attributes":[{"value":"/ Sets the endianness to big-endian","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10873,"byte_end":10910,"line_start":217,"line_end":217,"column_start":5,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10915,"byte_end":10932,"line_start":218,"line_end":218,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11140,"byte_end":11153,"line_start":226,"line_end":226,"column_start":12,"column_end":25},"name":"native_endian","qualname":"<Config>::native_endian","value":"pub fn native_endian(&mut Self) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Sets the endianness to the the machine-native endianness\n","sig":null,"attributes":[{"value":"/ Sets the endianness to the the machine-native endianness","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11046,"byte_end":11106,"line_start":224,"line_end":224,"column_start":5,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11111,"byte_end":11128,"line_start":225,"line_end":225,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11365,"byte_end":11374,"line_start":233,"line_end":233,"column_start":12,"column_end":21},"name":"serialize","qualname":"<Config>::serialize","value":"pub fn serialize<T: ?Sized + serde::Serialize>(&Self, &T) -> Result<Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes using this configuration\n","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes using this configuration","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11248,"byte_end":11331,"line_start":231,"line_end":231,"column_start":5,"column_end":88}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11336,"byte_end":11353,"line_start":232,"line_end":232,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11647,"byte_end":11662,"line_start":239,"line_end":239,"column_start":12,"column_end":27},"name":"serialized_size","qualname":"<Config>::serialized_size","value":"pub fn serialized_size<T: ?Sized + serde::Serialize>(&Self, &T) -> Result<u64>","parent":null,"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using Bincode with this configuration\n","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using Bincode with this configuration","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11517,"byte_end":11613,"line_start":237,"line_end":237,"column_start":5,"column_end":101}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11618,"byte_end":11635,"line_start":238,"line_end":238,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12084,"byte_end":12098,"line_start":248,"line_end":248,"column_start":12,"column_end":26},"name":"serialize_into","qualname":"<Config>::serialize_into","value":"pub fn serialize_into<W: Write, T: ?Sized + serde::Serialize>(&Self, W, &T)\n-> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer` using this configuration","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer` using this configuration","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11807,"byte_end":11881,"line_start":243,"line_end":243,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11886,"byte_end":11889,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ If the serialization would take more bytes than allowed by the size limit, an error","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11894,"byte_end":11981,"line_start":245,"line_end":245,"column_start":5,"column_end":92}},{"value":"/ is returned and *no bytes* will be written into the `Writer`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":11986,"byte_end":12050,"line_start":246,"line_end":246,"column_start":5,"column_end":69}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12055,"byte_end":12072,"line_start":247,"line_end":247,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12407,"byte_end":12418,"line_start":258,"line_end":258,"column_start":12,"column_end":23},"name":"deserialize","qualname":"<Config>::deserialize","value":"pub fn deserialize<'a, T: serde::Deserialize>(&Self, &'a [u8]) -> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an instance of `T` using this configuration\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an instance of `T` using this configuration","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12291,"byte_end":12373,"line_start":256,"line_end":256,"column_start":5,"column_end":87}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12378,"byte_end":12395,"line_start":257,"line_end":257,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12643,"byte_end":12663,"line_start":265,"line_end":265,"column_start":12,"column_end":32},"name":"deserialize_in_place","qualname":"<Config>::deserialize_in_place","value":"pub fn deserialize_in_place<'a, R, T>(&Self, R, &mut T) -> Result<()> where\nR: BincodeRead, T: serde::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" TODO: document\n","sig":null,"attributes":[{"value":"/ TODO: document","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12572,"byte_end":12590,"line_start":262,"line_end":262,"column_start":5,"column_end":23}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12614,"byte_end":12631,"line_start":264,"line_end":264,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13015,"byte_end":13031,"line_start":275,"line_end":275,"column_start":12,"column_end":28},"name":"deserialize_seed","qualname":"<Config>::deserialize_seed","value":"pub fn deserialize_seed<'a, T: serde::de::DeserializeSeed>(&Self, T, &'a [u8])\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes with state `seed` using this configuration.\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes with state `seed` using this configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12904,"byte_end":12981,"line_start":273,"line_end":273,"column_start":5,"column_end":82}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":12986,"byte_end":13003,"line_start":274,"line_end":274,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13442,"byte_end":13458,"line_start":287,"line_end":287,"column_start":12,"column_end":28},"name":"deserialize_from","qualname":"<Config>::deserialize_from","value":"pub fn deserialize_from<R: Read, T: serde::de::DeserializeOwned>(&Self, R)\n-> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er using this configuration","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13251,"byte_end":13327,"line_start":283,"line_end":283,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13332,"byte_end":13335,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13340,"byte_end":13408,"line_start":285,"line_end":285,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13413,"byte_end":13430,"line_start":286,"line_end":286,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13854,"byte_end":13875,"line_start":298,"line_end":298,"column_start":12,"column_end":33},"name":"deserialize_from_seed","qualname":"<Config>::deserialize_from_seed","value":"pub fn deserialize_from_seed<'a, R: Read,\n                             T: serde::de::DeserializeSeed>(&Self, T, R)\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er with state `seed` using this configuration","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er with state `seed` using this configuration","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13645,"byte_end":13739,"line_start":294,"line_end":294,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13744,"byte_end":13747,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13752,"byte_end":13820,"line_start":296,"line_end":296,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":13825,"byte_end":13842,"line_start":297,"line_end":297,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14443,"byte_end":14466,"line_start":312,"line_end":312,"column_start":12,"column_end":35},"name":"deserialize_from_custom","qualname":"<Config>::deserialize_from_custom","value":"pub fn deserialize_from_custom<'a, R: BincodeRead,\n                               T: serde::de::DeserializeOwned>(&Self, R)\n-> Result<T>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er using the default configuration.\n It is highly recommended to use `deserialize_from` unless you need to implement\n `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er using the default configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14104,"byte_end":14193,"line_start":306,"line_end":306,"column_start":5,"column_end":94}},{"value":"/ It is highly recommended to use `deserialize_from` unless you need to implement","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14198,"byte_end":14281,"line_start":307,"line_end":307,"column_start":5,"column_end":88}},{"value":"/ `BincodeRead` for performance reasons.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14286,"byte_end":14328,"line_start":308,"line_end":308,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14333,"byte_end":14336,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14341,"byte_end":14409,"line_start":310,"line_end":310,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14414,"byte_end":14431,"line_start":311,"line_end":311,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15032,"byte_end":15060,"line_start":325,"line_end":325,"column_start":12,"column_end":40},"name":"deserialize_from_custom_seed","qualname":"<Config>::deserialize_from_custom_seed","value":"pub fn deserialize_from_custom_seed<'a, R: BincodeRead,\n                                    T: serde::de::DeserializeSeed>(&Self, T,\n                                                                   R)\n-> Result<T::Value>","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er with state `seed` using the default\n configuration. It is highly recommended to use `deserialize_from` unless you need to\n implement `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er with state `seed` using the default","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14675,"byte_end":14767,"line_start":319,"line_end":319,"column_start":5,"column_end":97}},{"value":"/ configuration. It is highly recommended to use `deserialize_from` unless you need to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14772,"byte_end":14860,"line_start":320,"line_end":320,"column_start":5,"column_end":93}},{"value":"/ implement `BincodeRead` for performance reasons.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14865,"byte_end":14917,"line_start":321,"line_end":321,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14922,"byte_end":14925,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":14930,"byte_end":14998,"line_start":323,"line_end":323,"column_start":5,"column_end":73}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15003,"byte_end":15020,"line_start":324,"line_end":324,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15475,"byte_end":15492,"line_start":340,"line_end":340,"column_start":12,"column_end":29},"name":"with_deserializer","qualname":"<Config>::with_deserializer","value":"pub fn with_deserializer<'a, A, R>(&Self, R, A) -> A::Output where\nA: DeserializerAcceptor, R: BincodeRead","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Deserializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Deserializer instance.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15338,"byte_end":15400,"line_start":337,"line_end":337,"column_start":5,"column_end":67}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15405,"byte_end":15444,"line_start":338,"line_end":338,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15942,"byte_end":15957,"line_start":354,"line_end":354,"column_start":12,"column_end":27},"name":"with_serializer","qualname":"<Config>::with_serializer","value":"pub fn with_serializer<A, W>(&Self, W, A) -> A::Output where\nA: SerializerAcceptor, W: Write","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Serializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Serializer instance.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15807,"byte_end":15867,"line_start":351,"line_end":351,"column_start":5,"column_end":65}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":15872,"byte_end":15911,"line_start":352,"line_end":352,"column_start":5,"column_end":44}}]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30199,"byte_end":30210,"line_start":9,"line_end":9,"column_start":11,"column_end":22},"name":"BincodeRead","qualname":"::de::read::BincodeRead","value":"BincodeRead<'storage>: io::Read","parent":null,"children":[{"krate":0,"index":152},{"krate":0,"index":154},{"krate":0,"index":155}],"decl_id":null,"docs":" An optional Read trait for advanced Bincode usage.","sig":null,"attributes":[{"value":"/ An optional Read trait for advanced Bincode usage.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30011,"byte_end":30065,"line_start":5,"line_end":5,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30066,"byte_end":30069,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ It is highly recommended to use bincode with `io::Read` or `&[u8]` before","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30070,"byte_end":30147,"line_start":7,"line_end":7,"column_start":1,"column_end":78}},{"value":"/ implementing a custom `BincodeRead`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30148,"byte_end":30188,"line_start":8,"line_end":8,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30316,"byte_end":30332,"line_start":11,"line_end":11,"column_start":8,"column_end":24},"name":"forward_read_str","qualname":"::de::read::BincodeRead::forward_read_str","value":"pub fn forward_read_str<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" Forwards reading `length` bytes of a string on to the serde reader.\n","sig":null,"attributes":[{"value":"/ Forwards reading `length` bytes of a string on to the serde reader.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30237,"byte_end":30308,"line_start":10,"line_end":10,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30522,"byte_end":30537,"line_start":16,"line_end":16,"column_start":8,"column_end":23},"name":"get_byte_buffer","qualname":"::de::read::BincodeRead::get_byte_buffer","value":"pub fn get_byte_buffer(&mut Self, usize) -> Result<Vec<u8>>","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" Return the first `length` bytes of the internal byte buffer.\n","sig":null,"attributes":[{"value":"/ Return the first `length` bytes of the internal byte buffer.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30450,"byte_end":30514,"line_start":15,"line_end":15,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30656,"byte_end":30674,"line_start":19,"line_end":19,"column_start":8,"column_end":26},"name":"forward_read_bytes","qualname":"::de::read::BincodeRead::forward_read_bytes","value":"pub fn forward_read_bytes<V>(&mut Self, usize, V) -> Result<V::Value> where\nV: serde::de::Visitor","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" Forwards reading `length` bytes on to the serde reader.\n","sig":null,"attributes":[{"value":"/ Forwards reading `length` bytes on to the serde reader.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30589,"byte_end":30648,"line_start":18,"line_end":18,"column_start":5,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":157},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30905,"byte_end":30916,"line_start":27,"line_end":27,"column_start":12,"column_end":23},"name":"SliceReader","qualname":"::de::read::SliceReader","value":"SliceReader {  }","parent":null,"children":[{"krate":0,"index":159}],"decl_id":null,"docs":" A BincodeRead implementation for byte slices\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for byte slices","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30790,"byte_end":30838,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30839,"byte_end":30878,"line_start":25,"line_end":25,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31074,"byte_end":31082,"line_start":34,"line_end":34,"column_start":12,"column_end":20},"name":"IoReader","qualname":"::de::read::IoReader","value":"IoReader {  }","parent":null,"children":[{"krate":0,"index":162},{"krate":0,"index":163}],"decl_id":null,"docs":" A BincodeRead implementation for io::Readers\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ A BincodeRead implementation for io::Readers","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30959,"byte_end":31007,"line_start":31,"line_end":31,"column_start":1,"column_end":49}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31008,"byte_end":31047,"line_start":32,"line_end":32,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31216,"byte_end":31219,"line_start":41,"line_end":41,"column_start":12,"column_end":15},"name":"new","qualname":"<SliceReader>::new","value":"pub fn new(&'storage [u8]) -> SliceReader","parent":null,"children":[],"decl_id":null,"docs":" Constructs a slice reader\n","sig":null,"attributes":[{"value":"/ Constructs a slice reader","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31175,"byte_end":31204,"line_start":40,"line_end":40,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31384,"byte_end":31387,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<IoReader<R>>::new","value":"pub fn new(R) -> IoReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an IoReadReader\n","sig":null,"attributes":[{"value":"/ Constructs an IoReadReader","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31342,"byte_end":31372,"line_start":47,"line_end":47,"column_start":5,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":337},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36098,"byte_end":36104,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"::std::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" The result of a serialization or deserialization operation.\n","sig":null,"attributes":[{"value":"/ The result of a serialization or deserialization operation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36025,"byte_end":36088,"line_start":8,"line_end":8,"column_start":1,"column_end":64}}]},{"kind":"Type","id":{"krate":0,"index":339},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36211,"byte_end":36216,"line_start":12,"line_end":12,"column_start":10,"column_end":15},"name":"Error","qualname":"::error::Error","value":"Box<ErrorKind>","parent":null,"children":[],"decl_id":null,"docs":" An error that can be produced during (de)serializing.\n","sig":null,"attributes":[{"value":"/ An error that can be produced during (de)serializing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36144,"byte_end":36201,"line_start":11,"line_end":11,"column_start":1,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":781},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36512,"byte_end":36514,"line_start":19,"line_end":19,"column_start":5,"column_end":7},"name":"Io","qualname":"::error::ErrorKind::Io","value":"ErrorKind::Io(io::Error)","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" If the error stems from the reader/writer that is being used\n during (de)serialization, that error will be stored and returned here.\n","sig":null,"attributes":[{"value":"/ If the error stems from the reader/writer that is being used","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36364,"byte_end":36428,"line_start":17,"line_end":17,"column_start":5,"column_end":69}},{"value":"/ during (de)serialization, that error will be stored and returned here.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36433,"byte_end":36507,"line_start":18,"line_end":18,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":784},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36624,"byte_end":36643,"line_start":21,"line_end":21,"column_start":5,"column_end":24},"name":"InvalidUtf8Encoding","qualname":"::error::ErrorKind::InvalidUtf8Encoding","value":"ErrorKind::InvalidUtf8Encoding(Utf8Error)","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a string that is not valid utf8\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a string that is not valid utf8","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36531,"byte_end":36619,"line_start":20,"line_end":20,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":787},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36778,"byte_end":36797,"line_start":24,"line_end":24,"column_start":5,"column_end":24},"name":"InvalidBoolEncoding","qualname":"::error::ErrorKind::InvalidBoolEncoding","value":"ErrorKind::InvalidBoolEncoding(u8)","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a bool that was\n not encoded as either a 1 or a 0\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a bool that was","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36660,"byte_end":36732,"line_start":22,"line_end":22,"column_start":5,"column_end":77}},{"value":"/ not encoded as either a 1 or a 0","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36737,"byte_end":36773,"line_start":23,"line_end":23,"column_start":5,"column_end":41}}]},{"kind":"TupleVariant","id":{"krate":0,"index":790},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36910,"byte_end":36929,"line_start":26,"line_end":26,"column_start":5,"column_end":24},"name":"InvalidCharEncoding","qualname":"::error::ErrorKind::InvalidCharEncoding","value":"ErrorKind::InvalidCharEncoding","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize a char that is not in the correct format.\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize a char that is not in the correct format.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36807,"byte_end":36905,"line_start":25,"line_end":25,"column_start":5,"column_end":103}}]},{"kind":"TupleVariant","id":{"krate":0,"index":792},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37058,"byte_end":37076,"line_start":29,"line_end":29,"column_start":5,"column_end":23},"name":"InvalidTagEncoding","qualname":"::error::ErrorKind::InvalidTagEncoding","value":"ErrorKind::InvalidTagEncoding(usize)","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Returned if the deserializer attempts to deserialize the tag of an enum that is\n not in the expected ranges\n","sig":null,"attributes":[{"value":"/ Returned if the deserializer attempts to deserialize the tag of an enum that is","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36935,"byte_end":37018,"line_start":27,"line_end":27,"column_start":5,"column_end":88}},{"value":"/ not in the expected ranges","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37023,"byte_end":37053,"line_start":28,"line_end":28,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":795},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37218,"byte_end":37244,"line_start":32,"line_end":32,"column_start":5,"column_end":31},"name":"DeserializeAnyNotSupported","qualname":"::error::ErrorKind::DeserializeAnyNotSupported","value":"ErrorKind::DeserializeAnyNotSupported","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Serde has a deserialize_any method that lets the format hint to the\n object which route to take in deserializing.\n","sig":null,"attributes":[{"value":"/ Serde has a deserialize_any method that lets the format hint to the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37089,"byte_end":37160,"line_start":30,"line_end":30,"column_start":5,"column_end":76}},{"value":"/ object which route to take in deserializing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37165,"byte_end":37213,"line_start":31,"line_end":31,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":797},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37360,"byte_end":37369,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"name":"SizeLimit","qualname":"::error::ErrorKind::SizeLimit","value":"ErrorKind::SizeLimit","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" If (de)serializing a message takes more than the provided size limit, this\n error is returned.\n","sig":null,"attributes":[{"value":"/ If (de)serializing a message takes more than the provided size limit, this","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37250,"byte_end":37328,"line_start":33,"line_end":33,"column_start":5,"column_end":83}},{"value":"/ error is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37333,"byte_end":37355,"line_start":34,"line_end":34,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":799},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37452,"byte_end":37474,"line_start":37,"line_end":37,"column_start":5,"column_end":27},"name":"SequenceMustHaveLength","qualname":"::error::ErrorKind::SequenceMustHaveLength","value":"ErrorKind::SequenceMustHaveLength","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" Bincode can not encode sequences of unknown length (like iterators).\n","sig":null,"attributes":[{"value":"/ Bincode can not encode sequences of unknown length (like iterators).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37375,"byte_end":37447,"line_start":36,"line_end":36,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":801},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37523,"byte_end":37529,"line_start":39,"line_end":39,"column_start":5,"column_end":11},"name":"Custom","qualname":"::error::ErrorKind::Custom","value":"ErrorKind::Custom(String)","parent":{"krate":0,"index":780},"children":[],"decl_id":null,"docs":" A custom error message from Serde.\n","sig":null,"attributes":[{"value":"/ A custom error message from Serde.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37480,"byte_end":37518,"line_start":38,"line_end":38,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":780},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36348,"byte_end":36357,"line_start":16,"line_end":16,"column_start":10,"column_end":19},"name":"ErrorKind","qualname":"::error::ErrorKind","value":"pub enum ErrorKind {\n\n    /// If the error stems from the reader/writer that is being used\n    /// during (de)serialization, that error will be stored and returned here.\n    Io(io::Error),\n\n    /// Returned if the deserializer attempts to deserialize a string that is not valid utf8\n    InvalidUtf8Encoding(Utf8Error),\n\n    /// Returned if the deserializer attempts to deserialize a bool that was\n    /// not encoded as either a 1 or a 0\n    InvalidBoolEncoding(u8),\n\n    /// Returned if the deserializer attempts to deserialize a char that is not in the correct format.\n    InvalidCharEncoding,\n\n    /// Returned if the deserializer attempts to deserialize the tag of an enum that is\n    /// not in the expected ranges\n    InvalidTagEncoding(usize),\n\n    /// Serde has a deserialize_any method that lets the format hint to the\n    /// object which route to take in deserializing.\n    DeserializeAnyNotSupported,\n\n    /// If (de)serializing a message takes more than the provided size limit, this\n    /// error is returned.\n    SizeLimit,\n\n    /// Bincode can not encode sequences of unknown length (like iterators).\n    SequenceMustHaveLength,\n\n    /// A custom error message from Serde.\n    Custom(String),\n}","parent":null,"children":[{"krate":0,"index":781},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":790},{"krate":0,"index":792},{"krate":0,"index":795},{"krate":0,"index":797},{"krate":0,"index":799},{"krate":0,"index":801}],"decl_id":null,"docs":" The kind of error that can be produced during a serialization or deserialization.\n","sig":null,"attributes":[{"value":"/ The kind of error that can be produced during a serialization or deserialization.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":36236,"byte_end":36321,"line_start":14,"line_end":14,"column_start":1,"column_end":86}}]},{"kind":"Trait","id":{"krate":0,"index":697},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1445,"byte_end":1465,"line_start":50,"line_end":50,"column_start":11,"column_end":31},"name":"DeserializerAcceptor","qualname":"::DeserializerAcceptor","value":"DeserializerAcceptor<'a>","parent":null,"children":[{"krate":0,"index":699},{"krate":0,"index":700}],"decl_id":null,"docs":" An object that implements this trait can be passed a\n serde::Deserializer without knowing its concrete type.","sig":null,"attributes":[{"value":"/ An object that implements this trait can be passed a","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1230,"byte_end":1286,"line_start":45,"line_end":45,"column_start":1,"column_end":57}},{"value":"/ serde::Deserializer without knowing its concrete type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1287,"byte_end":1345,"line_start":46,"line_end":46,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1346,"byte_end":1349,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ This trait should be used only for `with_deserializer` functions.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1350,"byte_end":1419,"line_start":48,"line_end":48,"column_start":1,"column_end":70}}]},{"kind":"Type","id":{"krate":0,"index":699},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1527,"byte_end":1533,"line_start":52,"line_end":52,"column_start":10,"column_end":16},"name":"Output","qualname":"::DeserializerAcceptor::Output","value":"type Output;","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":" The return type for the accept method\n","sig":null,"attributes":[{"value":"/ The return type for the accept method","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1476,"byte_end":1517,"line_start":51,"line_end":51,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1613,"byte_end":1619,"line_start":54,"line_end":54,"column_start":8,"column_end":14},"name":"accept","qualname":"::DeserializerAcceptor::accept","value":"pub fn accept<T: serde::Deserializer>(Self, T) -> Self::Output","parent":{"krate":0,"index":697},"children":[],"decl_id":null,"docs":" Accept a serde::Deserializer and do whatever you want with it.\n","sig":null,"attributes":[{"value":"/ Accept a serde::Deserializer and do whatever you want with it.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1539,"byte_end":1605,"line_start":53,"line_end":53,"column_start":5,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":702},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1888,"byte_end":1906,"line_start":62,"line_end":62,"column_start":11,"column_end":29},"name":"SerializerAcceptor","qualname":"::SerializerAcceptor","value":"SerializerAcceptor","parent":null,"children":[{"krate":0,"index":703},{"krate":0,"index":704}],"decl_id":null,"docs":" An object that implements this trait can be passed a\n serde::Serializer without knowing its concrete type.","sig":null,"attributes":[{"value":"/ An object that implements this trait can be passed a","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1677,"byte_end":1733,"line_start":57,"line_end":57,"column_start":1,"column_end":57}},{"value":"/ serde::Serializer without knowing its concrete type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1734,"byte_end":1790,"line_start":58,"line_end":58,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1791,"byte_end":1794,"line_start":59,"line_end":59,"column_start":1,"column_end":4}},{"value":"/ This trait should be used only for `with_serializer` functions.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1795,"byte_end":1862,"line_start":60,"line_end":60,"column_start":1,"column_end":68}}]},{"kind":"Type","id":{"krate":0,"index":703},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1964,"byte_end":1970,"line_start":64,"line_end":64,"column_start":10,"column_end":16},"name":"Output","qualname":"::SerializerAcceptor::Output","value":"type Output;","parent":{"krate":0,"index":702},"children":[],"decl_id":null,"docs":" The return type for the accept method\n","sig":null,"attributes":[{"value":"/ The return type for the accept method","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1913,"byte_end":1954,"line_start":63,"line_end":63,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2048,"byte_end":2054,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"accept","qualname":"::SerializerAcceptor::accept","value":"pub fn accept<T: serde::Serializer>(Self, T) -> Self::Output","parent":{"krate":0,"index":702},"children":[],"decl_id":null,"docs":" Accept a serde::Serializer and do whatever you want with it.\n","sig":null,"attributes":[{"value":"/ Accept a serde::Serializer and do whatever you want with it.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":1976,"byte_end":2040,"line_start":65,"line_end":65,"column_start":5,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":706},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2306,"byte_end":2312,"line_start":77,"line_end":77,"column_start":8,"column_end":14},"name":"config","qualname":"::config","value":"pub fn config() -> Config","parent":null,"children":[],"decl_id":null,"docs":" Get a default configuration object.","sig":null,"attributes":[{"value":"/ Get a default configuration object.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2106,"byte_end":2145,"line_start":69,"line_end":69,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2146,"byte_end":2149,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ ### Default Configuration:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2150,"byte_end":2180,"line_start":71,"line_end":71,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2181,"byte_end":2184,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ | Byte limit | Endianness |","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2185,"byte_end":2216,"line_start":73,"line_end":73,"column_start":1,"column_end":32}},{"value":"/ |------------|------------|","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2217,"byte_end":2248,"line_start":74,"line_end":74,"column_start":1,"column_end":32}},{"value":"/ | Unlimited  | Little     |","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2249,"byte_end":2280,"line_start":75,"line_end":75,"column_start":1,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2281,"byte_end":2298,"line_start":76,"line_end":76,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":707},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2596,"byte_end":2610,"line_start":85,"line_end":85,"column_start":8,"column_end":22},"name":"serialize_into","qualname":"::serialize_into","value":"pub fn serialize_into<W, T: ?Sized>(W, &T) -> Result<()> where\nW: std::io::Write, T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serializes an object directly into a `Writer` using the default configuration.","sig":null,"attributes":[{"value":"/ Serializes an object directly into a `Writer` using the default configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2348,"byte_end":2430,"line_start":81,"line_end":81,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2431,"byte_end":2434,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ If the serialization would take more bytes than allowed by the size limit, an error","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2435,"byte_end":2522,"line_start":83,"line_end":83,"column_start":1,"column_end":88}},{"value":"/ is returned and *no bytes* will be written into the `Writer`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2523,"byte_end":2588,"line_start":84,"line_end":84,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":710},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2862,"byte_end":2871,"line_start":94,"line_end":94,"column_start":8,"column_end":17},"name":"serialize","qualname":"::serialize","value":"pub fn serialize<T: ?Sized>(&T) -> Result<Vec<u8>> where T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Serializes a serializable object into a `Vec` of bytes using the default configuration.\n","sig":null,"attributes":[{"value":"/ Serializes a serializable object into a `Vec` of bytes using the default configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2763,"byte_end":2854,"line_start":93,"line_end":93,"column_start":1,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":712},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3144,"byte_end":3160,"line_start":104,"line_end":104,"column_start":8,"column_end":24},"name":"deserialize_from","qualname":"::deserialize_from","value":"pub fn deserialize_from<R, T>(R) -> Result<T> where R: std::io::Read,\nT: serde::de::DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object directly from a `Read`er using the default configuration.","sig":null,"attributes":[{"value":"/ Deserializes an object directly from a `Read`er using the default configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":2979,"byte_end":3063,"line_start":101,"line_end":101,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3064,"byte_end":3067,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3068,"byte_end":3136,"line_start":103,"line_end":103,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":715},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3595,"byte_end":3618,"line_start":117,"line_end":117,"column_start":8,"column_end":31},"name":"deserialize_from_custom","qualname":"::deserialize_from_custom","value":"pub fn deserialize_from_custom<'a, R, T>(R) -> Result<T> where\nR: de::read::BincodeRead, T: serde::de::DeserializeOwned","parent":null,"children":[],"decl_id":null,"docs":" Deserializes an object from a custom `BincodeRead`er using the default configuration.\n It is highly recommended to use `deserialize_from` unless you need to implement\n `BincodeRead` for performance reasons.","sig":null,"attributes":[{"value":"/ Deserializes an object from a custom `BincodeRead`er using the default configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3298,"byte_end":3387,"line_start":112,"line_end":112,"column_start":1,"column_end":90}},{"value":"/ It is highly recommended to use `deserialize_from` unless you need to implement","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3388,"byte_end":3471,"line_start":113,"line_end":113,"column_start":1,"column_end":84}},{"value":"/ `BincodeRead` for performance reasons.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3472,"byte_end":3514,"line_start":114,"line_end":114,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3515,"byte_end":3518,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/ If this returns an `Error`, `reader` may be in an invalid state.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3519,"byte_end":3587,"line_start":116,"line_end":116,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":719},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3890,"byte_end":3910,"line_start":129,"line_end":129,"column_start":8,"column_end":28},"name":"deserialize_in_place","qualname":"::deserialize_in_place","value":"pub fn deserialize_in_place<'a, R, T>(R, &mut T) -> Result<()> where\nT: serde::de::Deserialize, R: BincodeRead","parent":null,"children":[],"decl_id":null,"docs":" Only use this if you know what you're doing.","sig":null,"attributes":[{"value":"/ Only use this if you know what you're doing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3779,"byte_end":3827,"line_start":125,"line_end":125,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3828,"byte_end":3831,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ This is part of the public API.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":3832,"byte_end":3867,"line_start":127,"line_end":127,"column_start":1,"column_end":36}}]},{"kind":"Function","id":{"krate":0,"index":723},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4178,"byte_end":4189,"line_start":138,"line_end":138,"column_start":8,"column_end":19},"name":"deserialize","qualname":"::deserialize","value":"pub fn deserialize<'a, T>(&'a [u8]) -> Result<T> where\nT: serde::de::Deserialize","parent":null,"children":[],"decl_id":null,"docs":" Deserializes a slice of bytes into an instance of `T` using the default configuration.\n","sig":null,"attributes":[{"value":"/ Deserializes a slice of bytes into an instance of `T` using the default configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4080,"byte_end":4170,"line_start":137,"line_end":137,"column_start":1,"column_end":91}}]},{"kind":"Function","id":{"krate":0,"index":726},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4417,"byte_end":4432,"line_start":146,"line_end":146,"column_start":8,"column_end":23},"name":"serialized_size","qualname":"::serialized_size","value":"pub fn serialized_size<T: ?Sized>(&T) -> Result<u64> where T: serde::Serialize","parent":null,"children":[],"decl_id":null,"docs":" Returns the size that an object would be if serialized using Bincode with the default configuration.\n","sig":null,"attributes":[{"value":"/ Returns the size that an object would be if serialized using Bincode with the default configuration.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4305,"byte_end":4409,"line_start":145,"line_end":145,"column_start":1,"column_end":105}}]},{"kind":"Function","id":{"krate":0,"index":728},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4667,"byte_end":4684,"line_start":156,"line_end":156,"column_start":8,"column_end":25},"name":"with_deserializer","qualname":"::with_deserializer","value":"pub fn with_deserializer<'a, A, R>(R, A) -> A::Output where\nA: DeserializerAcceptor, R: BincodeRead","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Deserializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Deserializer instance.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4542,"byte_end":4604,"line_start":153,"line_end":153,"column_start":1,"column_end":63}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4605,"byte_end":4644,"line_start":154,"line_end":154,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":732},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4972,"byte_end":4987,"line_start":167,"line_end":167,"column_start":8,"column_end":23},"name":"with_serializer","qualname":"::with_serializer","value":"pub fn with_serializer<A, W>(W, A) -> A::Output where A: SerializerAcceptor,\nW: std::io::Write","parent":null,"children":[],"decl_id":null,"docs":" Executes the acceptor with a serde::Serializer instance.\n NOT A PART OF THE STABLE PUBLIC API\n","sig":null,"attributes":[{"value":"/ Executes the acceptor with a serde::Serializer instance.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4849,"byte_end":4909,"line_start":164,"line_end":164,"column_start":1,"column_end":61}},{"value":"/ NOT A PART OF THE STABLE PUBLIC API","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/lib.rs","byte_start":4910,"byte_end":4949,"line_start":165,"line_end":165,"column_start":1,"column_end":40}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":6527,"byte_end":6528,"line_start":54,"line_end":54,"column_start":33,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":6538,"byte_end":6552,"line_start":56,"line_end":56,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":6647,"byte_end":6661,"line_start":62,"line_end":62,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8087,"byte_end":8101,"line_start":114,"line_end":114,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":67}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8338,"byte_end":8353,"line_start":124,"line_end":124,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8607,"byte_end":8622,"line_start":134,"line_end":134,"column_start":54,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8836,"byte_end":8850,"line_start":144,"line_end":144,"column_start":54,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10078,"byte_end":10084,"line_start":185,"line_end":185,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":99},{"krate":0,"index":102},{"krate":0,"index":106},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":120},{"krate":0,"index":124},{"krate":0,"index":128}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31147,"byte_end":31158,"line_start":39,"line_end":39,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31324,"byte_end":31332,"line_start":46,"line_end":46,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31533,"byte_end":31544,"line_start":56,"line_end":56,"column_start":29,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31852,"byte_end":31860,"line_start":67,"line_end":67,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":32133,"byte_end":32144,"line_start":78,"line_end":78,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":32402,"byte_end":32413,"line_start":88,"line_end":88,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":183},{"krate":0,"index":186},{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":33737,"byte_end":33745,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":35028,"byte_end":35036,"line_start":169,"line_end":169,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/mod.rs","byte_start":17075,"byte_end":17087,"line_start":32,"line_end":32,"column_start":44,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":214},{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/mod.rs","byte_start":23497,"byte_end":23503,"line_start":246,"line_end":246,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/mod.rs","byte_start":25321,"byte_end":25327,"line_start":308,"line_end":308,"column_start":17,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37560,"byte_end":37569,"line_start":42,"line_end":42,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":39029,"byte_end":39034,"line_start":76,"line_end":76,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":344}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":39141,"byte_end":39150,"line_start":82,"line_end":82,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":40228,"byte_end":40233,"line_start":105,"line_end":105,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":348}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":40374,"byte_end":40379,"line_start":111,"line_end":111,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":351}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/internal.rs","byte_start":41627,"byte_end":41636,"line_start":45,"line_end":45,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":375},{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/internal.rs","byte_start":44942,"byte_end":44949,"line_start":164,"line_end":164,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":417},{"krate":0,"index":418}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/internal.rs","byte_start":45279,"byte_end":45287,"line_start":181,"line_end":181,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":46001,"byte_end":46011,"line_start":24,"line_end":24,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":51669,"byte_end":51680,"line_start":226,"line_end":226,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":56848,"byte_end":56856,"line_start":429,"line_end":429,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":554}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":57248,"byte_end":57256,"line_start":451,"line_end":451,"column_start":47,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":559},{"krate":0,"index":560},{"krate":0,"index":561},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":57654,"byte_end":57662,"line_start":473,"line_end":473,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":570},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":58059,"byte_end":58067,"line_start":495,"line_end":495,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578},{"krate":0,"index":579},{"krate":0,"index":581}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":58455,"byte_end":58463,"line_start":517,"line_end":517,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":59033,"byte_end":59041,"line_start":547,"line_end":547,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":59459,"byte_end":59467,"line_start":569,"line_end":569,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":607},{"krate":0,"index":608},{"krate":0,"index":610}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":59971,"byte_end":59983,"line_start":595,"line_end":595,"column_start":51,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":60342,"byte_end":60354,"line_start":613,"line_end":613,"column_start":53,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":626},{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":60719,"byte_end":60731,"line_start":631,"line_end":631,"column_start":59,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":638}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":61095,"byte_end":61107,"line_start":649,"line_end":649,"column_start":60,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":646}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":61467,"byte_end":61479,"line_start":667,"line_end":667,"column_start":56,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":651},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":62016,"byte_end":62028,"line_start":693,"line_end":693,"column_start":54,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":660},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":62413,"byte_end":62425,"line_start":711,"line_end":711,"column_start":61,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":63852,"byte_end":63862,"line_start":766,"line_end":766,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":687}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":5691,"byte_end":5698,"line_start":22,"line_end":22,"column_start":30,"column_end":37},"kind":"SuperTrait","from":{"krate":0,"index":30},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":5701,"byte_end":5706,"line_start":22,"line_end":22,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":6527,"byte_end":6528,"line_start":54,"line_end":54,"column_start":33,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":47},"to":{"krate":0,"index":34}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":6538,"byte_end":6552,"line_start":56,"line_end":56,"column_start":6,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":27},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":6647,"byte_end":6661,"line_start":62,"line_end":62,"column_start":18,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":27},"to":{"krate":0,"index":30}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8087,"byte_end":8101,"line_start":114,"line_end":114,"column_start":32,"column_end":46},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":54},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8338,"byte_end":8353,"line_start":124,"line_end":124,"column_start":32,"column_end":47},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":59},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8607,"byte_end":8622,"line_start":134,"line_end":134,"column_start":54,"column_end":69},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":59},"to":{"krate":0,"index":30}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":8836,"byte_end":8850,"line_start":144,"line_end":144,"column_start":54,"column_end":68},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":54},"to":{"krate":0,"index":30}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/config.rs","byte_start":10078,"byte_end":10084,"line_start":185,"line_end":185,"column_start":6,"column_end":12},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":754},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":30226,"byte_end":30230,"line_start":9,"line_end":9,"column_start":38,"column_end":42},"kind":"SuperTrait","from":{"krate":1,"index":3190},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31147,"byte_end":31158,"line_start":39,"line_end":39,"column_start":16,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31324,"byte_end":31332,"line_start":46,"line_end":46,"column_start":9,"column_end":17},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31533,"byte_end":31544,"line_start":56,"line_end":56,"column_start":29,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":157},"to":{"krate":1,"index":3190}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":31852,"byte_end":31860,"line_start":67,"line_end":67,"column_start":32,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":160},"to":{"krate":1,"index":3190}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":32133,"byte_end":32144,"line_start":78,"line_end":78,"column_start":16,"column_end":27},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":157},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":32402,"byte_end":32413,"line_start":88,"line_end":88,"column_start":42,"column_end":53},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":157},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":33737,"byte_end":33745,"line_start":134,"line_end":134,"column_start":9,"column_end":17},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/read.rs","byte_start":35028,"byte_end":35036,"line_start":169,"line_end":169,"column_start":33,"column_end":41},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":160},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/mod.rs","byte_start":17075,"byte_end":17087,"line_start":32,"line_end":32,"column_start":44,"column_end":56},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":200},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/mod.rs","byte_start":23497,"byte_end":23503,"line_start":246,"line_end":246,"column_start":17,"column_end":23},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":260},"to":{"krate":17,"index":1331}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/de/mod.rs","byte_start":25321,"byte_end":25327,"line_start":308,"line_end":308,"column_start":17,"column_end":23},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":282},"to":{"krate":17,"index":1349}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":37560,"byte_end":37569,"line_start":42,"line_end":42,"column_start":19,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":780},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":39029,"byte_end":39034,"line_start":76,"line_end":76,"column_start":26,"column_end":31},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":339},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":39141,"byte_end":39150,"line_start":82,"line_end":82,"column_start":23,"column_end":32},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":780},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":40228,"byte_end":40233,"line_start":105,"line_end":105,"column_start":27,"column_end":32},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":339},"to":{"krate":17,"index":8045}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/error.rs","byte_start":40374,"byte_end":40379,"line_start":111,"line_end":111,"column_start":28,"column_end":33},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":339},"to":{"krate":17,"index":8643}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/internal.rs","byte_start":41627,"byte_end":41636,"line_start":45,"line_end":45,"column_start":34,"column_end":43},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":806},"to":{"krate":0,"index":413}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/internal.rs","byte_start":44328,"byte_end":44333,"line_start":146,"line_end":146,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1770},"to":{"krate":0,"index":413}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/internal.rs","byte_start":44942,"byte_end":44949,"line_start":164,"line_end":164,"column_start":20,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":813},"to":{"krate":0,"index":413}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/internal.rs","byte_start":45279,"byte_end":45287,"line_start":181,"line_end":181,"column_start":20,"column_end":28},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":819},"to":{"krate":0,"index":413}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":46001,"byte_end":46011,"line_start":24,"line_end":24,"column_start":28,"column_end":38},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":433},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":51669,"byte_end":51680,"line_start":226,"line_end":226,"column_start":18,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":487},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":56848,"byte_end":56856,"line_start":429,"line_end":429,"column_start":45,"column_end":53},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":541},"to":{"krate":17,"index":1690}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":57248,"byte_end":57256,"line_start":451,"line_end":451,"column_start":47,"column_end":55},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":541},"to":{"krate":17,"index":1696}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":57654,"byte_end":57662,"line_start":473,"line_end":473,"column_start":53,"column_end":61},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":541},"to":{"krate":17,"index":1702}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":58059,"byte_end":58067,"line_start":495,"line_end":495,"column_start":54,"column_end":62},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":541},"to":{"krate":17,"index":1708}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":58455,"byte_end":58463,"line_start":517,"line_end":517,"column_start":45,"column_end":53},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":541},"to":{"krate":17,"index":1714}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":59033,"byte_end":59041,"line_start":547,"line_end":547,"column_start":48,"column_end":56},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":541},"to":{"krate":17,"index":1725}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":59459,"byte_end":59467,"line_start":569,"line_end":569,"column_start":55,"column_end":63},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":541},"to":{"krate":17,"index":1732}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":59971,"byte_end":59983,"line_start":595,"line_end":595,"column_start":51,"column_end":63},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":611},"to":{"krate":17,"index":1690}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":60342,"byte_end":60354,"line_start":613,"line_end":613,"column_start":53,"column_end":65},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":611},"to":{"krate":17,"index":1696}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":60719,"byte_end":60731,"line_start":631,"line_end":631,"column_start":59,"column_end":71},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":611},"to":{"krate":17,"index":1702}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":61095,"byte_end":61107,"line_start":649,"line_end":649,"column_start":60,"column_end":72},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":611},"to":{"krate":17,"index":1708}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":61467,"byte_end":61479,"line_start":667,"line_end":667,"column_start":56,"column_end":68},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":611},"to":{"krate":17,"index":1714}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":62016,"byte_end":62028,"line_start":693,"line_end":693,"column_start":54,"column_end":66},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":611},"to":{"krate":17,"index":1725}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":62413,"byte_end":62425,"line_start":711,"line_end":711,"column_start":61,"column_end":73},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":611},"to":{"krate":17,"index":1732}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/bincode-1.2.1/src/ser/mod.rs","byte_start":63852,"byte_end":63862,"line_start":766,"line_end":766,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":682},"to":{"krate":4294967295,"index":4294967295}}]}