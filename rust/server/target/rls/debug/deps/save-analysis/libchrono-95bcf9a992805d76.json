{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10","program":"/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","chrono","/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"clock\"","--cfg","feature=\"default\"","--cfg","feature=\"std\"","--cfg","feature=\"time\"","-C","metadata=95bcf9a992805d76","-C","extra-filename=-95bcf9a992805d76","--out-dir","/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps","-L","dependency=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps","--extern","num_integer=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libnum_integer-39ae1bf5ca166490.rmeta","--extern","num_traits=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libnum_traits-12190786947b55b4.rmeta","--extern","time=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libtime-2c26273aeb454c05.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libchrono-95bcf9a992805d76.rmeta"},"prelude":{"crate_id":{"name":"chrono","disambiguator":[8331385122624457557,9750701866486877356]},"crate_root":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src","external_crates":[{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[16125995874279485955,8748768413821387129]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[16348493018826829365,4805211970644213659]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[8279628881989909837,14733107812838978533]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[17646096667663791084,12272231044852301253]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4565760717972533866,4473905522437311200]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7551666766599439458,2782226154556471377]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[11632633256475535999,13776501019579249840]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[4897607742433192731,640426136460610934]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[15534826887064733014,5612939005974764181]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[1175232612468424282,18163295741730709113]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[15721596154046543409,2249662874474360977]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[7768511099061914688,4128344505014859734]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[15048206832849992118,3387758009953732431]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[13751153714556823430,9887373550715096268]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":15,"id":{"name":"panic_unwind","disambiguator":[13432701172845674020,17161827416142858739]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":16,"id":{"name":"time","disambiguator":[12643979131414601275,10360356535262368284]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":17,"id":{"name":"libc","disambiguator":[10754055159853522136,17918599292692527551]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":18,"id":{"name":"num_integer","disambiguator":[14387729540608297570,7679112247707605371]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","num":19,"id":{"name":"num_traits","disambiguator":[5635461309796912735,8626325855074278394]}}],"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":76,"byte_end":39922,"line_start":4,"line_end":1065,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":16,"index":292},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19430,"byte_end":19438,"line_start":438,"line_end":438,"column_start":18,"column_end":26},"alias_span":null,"name":"Duration","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1414},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19499,"byte_end":19504,"line_start":441,"line_end":441,"column_start":35,"column_end":40},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1415},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19499,"byte_end":19504,"line_start":441,"line_end":441,"column_start":35,"column_end":40},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":95},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19541,"byte_end":19549,"line_start":442,"line_end":442,"column_start":36,"column_end":44},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19551,"byte_end":19557,"line_start":442,"line_end":442,"column_start":46,"column_end":52},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1365},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19559,"byte_end":19570,"line_start":442,"line_end":442,"column_start":54,"column_end":65},"alias_span":null,"name":"LocalResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1421},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19572,"byte_end":19575,"line_start":442,"line_end":442,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1422},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19572,"byte_end":19575,"line_start":442,"line_end":442,"column_start":67,"column_end":70},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":1399},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19577,"byte_end":19588,"line_start":442,"line_end":442,"column_start":72,"column_end":83},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1477},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19625,"byte_end":19634,"line_start":443,"line_end":443,"column_start":35,"column_end":44},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1500},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19636,"byte_end":19643,"line_start":443,"line_end":443,"column_start":46,"column_end":53},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19645,"byte_end":19654,"line_start":443,"line_end":443,"column_start":55,"column_end":64},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1545},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19656,"byte_end":19669,"line_start":443,"line_end":443,"column_start":66,"column_end":79},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1570},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19687,"byte_end":19691,"line_start":444,"line_end":444,"column_start":16,"column_end":20},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":704},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19693,"byte_end":19701,"line_start":444,"line_end":444,"column_start":22,"column_end":30},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":705},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19703,"byte_end":19711,"line_start":444,"line_end":444,"column_start":32,"column_end":40},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1601},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19733,"byte_end":19741,"line_start":445,"line_end":445,"column_start":20,"column_end":28},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1577},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19743,"byte_end":19756,"line_start":445,"line_end":445,"column_start":30,"column_end":43},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1811},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19858,"byte_end":19868,"line_start":448,"line_end":448,"column_start":18,"column_end":28},"alias_span":null,"name":"ParseError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1051},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19870,"byte_end":19881,"line_start":448,"line_end":448,"column_start":30,"column_end":41},"alias_span":null,"name":"ParseResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1312},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19899,"byte_end":19910,"line_start":449,"line_end":449,"column_start":16,"column_end":27},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1335},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20045,"byte_end":20053,"line_start":453,"line_end":453,"column_start":32,"column_end":40},"alias_span":null,"name":"Datelike","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1354},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20055,"byte_end":20063,"line_start":453,"line_end":453,"column_start":42,"column_end":50},"alias_span":null,"name":"Timelike","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1911},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20065,"byte_end":20072,"line_start":453,"line_end":453,"column_start":52,"column_end":59},"alias_span":null,"name":"Weekday","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":95},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20106,"byte_end":20114,"line_start":454,"line_end":454,"column_start":32,"column_end":40},"alias_span":null,"name":"TimeZone","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":93},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20116,"byte_end":20122,"line_start":454,"line_end":454,"column_start":42,"column_end":48},"alias_span":null,"name":"Offset","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1414},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20183,"byte_end":20188,"line_start":456,"line_end":456,"column_start":31,"column_end":36},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1415},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20183,"byte_end":20188,"line_start":456,"line_end":456,"column_start":31,"column_end":36},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":40}},{"kind":"Use","ref_id":{"krate":0,"index":1421},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20221,"byte_end":20224,"line_start":457,"line_end":457,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1422},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20221,"byte_end":20224,"line_start":457,"line_end":457,"column_start":32,"column_end":35},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":42}},{"kind":"Use","ref_id":{"krate":0,"index":1399},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20226,"byte_end":20237,"line_start":457,"line_end":457,"column_start":37,"column_end":48},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1477},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20271,"byte_end":20280,"line_start":458,"line_end":458,"column_start":32,"column_end":41},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20282,"byte_end":20291,"line_start":458,"line_end":458,"column_start":43,"column_end":52},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1545},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20293,"byte_end":20306,"line_start":458,"line_end":458,"column_start":54,"column_end":67},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1570},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20339,"byte_end":20343,"line_start":459,"line_end":459,"column_start":31,"column_end":35},"alias_span":null,"name":"Date","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1601},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20376,"byte_end":20384,"line_start":460,"line_end":460,"column_start":32,"column_end":40},"alias_span":null,"name":"DateTime","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1577},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20386,"byte_end":20399,"line_start":460,"line_end":460,"column_start":42,"column_end":55},"alias_span":null,"name":"SecondsFormat","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1312},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20432,"byte_end":20443,"line_start":461,"line_end":461,"column_start":31,"column_end":42},"alias_span":null,"name":"SubsecRound","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":1399},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59729,"byte_end":59740,"line_start":469,"line_end":469,"column_start":22,"column_end":33},"alias_span":null,"name":"FixedOffset","value":"","parent":{"krate":0,"index":60}},{"kind":"Use","ref_id":{"krate":0,"index":1414},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59789,"byte_end":59794,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":60}},{"kind":"Use","ref_id":{"krate":0,"index":1415},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59789,"byte_end":59794,"line_start":471,"line_end":471,"column_start":22,"column_end":27},"alias_span":null,"name":"Local","value":"","parent":{"krate":0,"index":246}},{"kind":"Use","ref_id":{"krate":0,"index":1421},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59815,"byte_end":59818,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":60}},{"kind":"Use","ref_id":{"krate":0,"index":1422},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59815,"byte_end":59818,"line_start":472,"line_end":472,"column_start":20,"column_end":23},"alias_span":null,"name":"Utc","value":"","parent":{"krate":0,"index":247}},{"kind":"Use","ref_id":{"krate":0,"index":1477},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21018,"byte_end":21027,"line_start":486,"line_end":486,"column_start":26,"column_end":35},"alias_span":null,"name":"NaiveDate","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":369},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21029,"byte_end":21037,"line_start":486,"line_end":486,"column_start":37,"column_end":45},"alias_span":null,"name":"MIN_DATE","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":370},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21039,"byte_end":21047,"line_start":486,"line_end":486,"column_start":47,"column_end":55},"alias_span":null,"name":"MAX_DATE","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1500},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21077,"byte_end":21084,"line_start":487,"line_end":487,"column_start":28,"column_end":35},"alias_span":null,"name":"IsoWeek","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1520},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21110,"byte_end":21119,"line_start":488,"line_end":488,"column_start":25,"column_end":34},"alias_span":null,"name":"NaiveTime","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1545},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21149,"byte_end":21162,"line_start":489,"line_end":489,"column_start":29,"column_end":42},"alias_span":null,"name":"NaiveDateTime","value":"","parent":{"krate":0,"index":248}},{"kind":"Use","ref_id":{"krate":0,"index":1883},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467154,"byte_end":467167,"line_start":40,"line_end":40,"column_start":25,"column_end":38},"alias_span":null,"name":"StrftimeItems","value":"","parent":{"krate":0,"index":1012}},{"kind":"Use","ref_id":{"krate":0,"index":1852},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467191,"byte_end":467197,"line_start":41,"line_end":41,"column_start":23,"column_end":29},"alias_span":null,"name":"Parsed","value":"","parent":{"krate":0,"index":1012}},{"kind":"Use","ref_id":{"krate":0,"index":1259},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467220,"byte_end":467225,"line_start":42,"line_end":42,"column_start":22,"column_end":27},"alias_span":null,"name":"parse","value":"","parent":{"krate":0,"index":1012}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":76,"byte_end":39922,"line_start":4,"line_end":1065,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":1957},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":1965},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":54},{"krate":0,"index":60},{"krate":0,"index":248},{"krate":0,"index":678},{"krate":0,"index":813},{"krate":0,"index":1012},{"krate":0,"index":1306},{"krate":0,"index":1911},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1940},{"krate":0,"index":1938},{"krate":0,"index":1936},{"krate":0,"index":1933},{"krate":0,"index":1320},{"krate":0,"index":1327},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1947},{"krate":0,"index":1953},{"krate":0,"index":1949},{"krate":0,"index":1950},{"krate":0,"index":1333},{"krate":0,"index":1335},{"krate":0,"index":1354}],"decl_id":null,"docs":" # Chrono: Date and Time for Rust","sig":null,"attributes":[{"value":"/ # Chrono: Date and Time for Rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":76,"byte_end":112,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":113,"byte_end":116,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It aims to be a feature-complete superset of","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":117,"byte_end":165,"line_start":6,"line_end":6,"column_start":1,"column_end":49}},{"value":"/ the [time](https://github.com/rust-lang-deprecated/time) library.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":166,"byte_end":235,"line_start":7,"line_end":7,"column_start":1,"column_end":70}},{"value":"/ In particular,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":236,"byte_end":254,"line_start":8,"line_end":8,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":255,"byte_end":258,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ * Chrono strictly adheres to ISO 8601.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":259,"byte_end":301,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/ * Chrono is timezone-aware by default, with separate timezone-naive types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":302,"byte_end":380,"line_start":11,"line_end":11,"column_start":1,"column_end":79}},{"value":"/ * Chrono is space-optimal and (while not being the primary goal) reasonably efficient.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":381,"byte_end":471,"line_start":12,"line_end":12,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":472,"byte_end":475,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ There were several previous attempts to bring a good date and time library to Rust,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":476,"byte_end":563,"line_start":14,"line_end":14,"column_start":1,"column_end":88}},{"value":"/ which Chrono builds upon and should acknowledge:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":564,"byte_end":616,"line_start":15,"line_end":15,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":617,"byte_end":620,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ * [Initial research on","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":621,"byte_end":647,"line_start":17,"line_end":17,"column_start":1,"column_end":27}},{"value":"/    the wiki](https://github.com/rust-lang/rust-wiki-backup/blob/master/Lib-datetime.md)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":648,"byte_end":739,"line_start":18,"line_end":18,"column_start":1,"column_end":92}},{"value":"/ * Dietrich Epp's [datetime-rs](https://github.com/depp/datetime-rs)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":740,"byte_end":811,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ * Luis de Bethencourt's [rust-datetime](https://github.com/luisbg/rust-datetime)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":812,"byte_end":896,"line_start":20,"line_end":20,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":897,"byte_end":900,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ Any significant changes to Chrono are documented in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":901,"byte_end":956,"line_start":22,"line_end":22,"column_start":1,"column_end":56}},{"value":"/ the [`CHANGELOG.md`](https://github.com/chronotope/chrono/blob/master/CHANGELOG.md) file.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":957,"byte_end":1050,"line_start":23,"line_end":23,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1051,"byte_end":1054,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ ## Usage","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1055,"byte_end":1067,"line_start":25,"line_end":25,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1068,"byte_end":1071,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ Put this in your `Cargo.toml`:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1072,"byte_end":1106,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1107,"byte_end":1110,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1111,"byte_end":1122,"line_start":29,"line_end":29,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1123,"byte_end":1141,"line_start":30,"line_end":30,"column_start":1,"column_end":19}},{"value":"/ chrono = \"0.4\"","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1142,"byte_end":1160,"line_start":31,"line_end":31,"column_start":1,"column_end":19}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1161,"byte_end":1168,"line_start":32,"line_end":32,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1169,"byte_end":1172,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ Or, if you want [Serde](https://github.com/serde-rs/serde) include the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1173,"byte_end":1247,"line_start":34,"line_end":34,"column_start":1,"column_end":75}},{"value":"/ feature like this:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1248,"byte_end":1270,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1271,"byte_end":1274,"line_start":36,"line_end":36,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1275,"byte_end":1286,"line_start":37,"line_end":37,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1287,"byte_end":1305,"line_start":38,"line_end":38,"column_start":1,"column_end":19}},{"value":"/ chrono = { version = \"0.4\", features = [\"serde\"] }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1306,"byte_end":1360,"line_start":39,"line_end":39,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1361,"byte_end":1368,"line_start":40,"line_end":40,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1369,"byte_end":1372,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ Then put this in your crate root:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1373,"byte_end":1410,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1411,"byte_end":1414,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1415,"byte_end":1426,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"/ extern crate chrono;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1427,"byte_end":1451,"line_start":45,"line_end":45,"column_start":1,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1452,"byte_end":1459,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1460,"byte_end":1463,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Avoid using `use chrono::*;` as Chrono exports several modules other than types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1464,"byte_end":1548,"line_start":48,"line_end":48,"column_start":1,"column_end":85}},{"value":"/ If you prefer the glob imports, use the following instead:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1549,"byte_end":1611,"line_start":49,"line_end":49,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1612,"byte_end":1615,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1616,"byte_end":1627,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1628,"byte_end":1655,"line_start":52,"line_end":52,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1656,"byte_end":1663,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1664,"byte_end":1667,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## Overview","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1668,"byte_end":1683,"line_start":55,"line_end":55,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1684,"byte_end":1687,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ ### Duration","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1688,"byte_end":1704,"line_start":57,"line_end":57,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1705,"byte_end":1708,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ Chrono currently uses","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1709,"byte_end":1734,"line_start":59,"line_end":59,"column_start":1,"column_end":26}},{"value":"/ the [`time::Duration`](https://docs.rs/time/0.1.40/time/struct.Duration.html) type","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1735,"byte_end":1821,"line_start":60,"line_end":60,"column_start":1,"column_end":87}},{"value":"/ from the `time` crate to represent the magnitude of a time span.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1822,"byte_end":1890,"line_start":61,"line_end":61,"column_start":1,"column_end":69}},{"value":"/ Since this has the same name to the newer, standard type for duration,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1891,"byte_end":1965,"line_start":62,"line_end":62,"column_start":1,"column_end":75}},{"value":"/ the reference will refer this type as `OldDuration`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":1966,"byte_end":2022,"line_start":63,"line_end":63,"column_start":1,"column_end":57}},{"value":"/ Note that this is an \"accurate\" duration represented as seconds and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2023,"byte_end":2094,"line_start":64,"line_end":64,"column_start":1,"column_end":72}},{"value":"/ nanoseconds and does not represent \"nominal\" components such as days or","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2095,"byte_end":2170,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ months.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2171,"byte_end":2182,"line_start":66,"line_end":66,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2183,"byte_end":2186,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Chrono does not yet natively support","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2187,"byte_end":2227,"line_start":68,"line_end":68,"column_start":1,"column_end":41}},{"value":"/ the standard [`Duration`](https://doc.rust-lang.org/std/time/struct.Duration.html) type,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2228,"byte_end":2320,"line_start":69,"line_end":69,"column_start":1,"column_end":93}},{"value":"/ but it will be supported in the future.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2321,"byte_end":2364,"line_start":70,"line_end":70,"column_start":1,"column_end":44}},{"value":"/ Meanwhile you can convert between two types with","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2365,"byte_end":2417,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"/ [`Duration::from_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.from_std)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2418,"byte_end":2515,"line_start":72,"line_end":72,"column_start":1,"column_end":98}},{"value":"/ and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2516,"byte_end":2523,"line_start":73,"line_end":73,"column_start":1,"column_end":8}},{"value":"/ [`Duration::to_std`](https://docs.rs/time/0.1.40/time/struct.Duration.html#method.to_std)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2524,"byte_end":2617,"line_start":74,"line_end":74,"column_start":1,"column_end":94}},{"value":"/ methods.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2618,"byte_end":2630,"line_start":75,"line_end":75,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2631,"byte_end":2634,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ### Date and Time","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2635,"byte_end":2656,"line_start":77,"line_end":77,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2657,"byte_end":2660,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ Chrono provides a","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2661,"byte_end":2682,"line_start":79,"line_end":79,"column_start":1,"column_end":22}},{"value":"/ [**`DateTime`**](./struct.DateTime.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2683,"byte_end":2727,"line_start":80,"line_end":80,"column_start":1,"column_end":45}},{"value":"/ type to represent a date and a time in a timezone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2728,"byte_end":2782,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2783,"byte_end":2786,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ For more abstract moment-in-time tracking such as internal timekeeping","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2787,"byte_end":2861,"line_start":83,"line_end":83,"column_start":1,"column_end":75}},{"value":"/ that is unconcerned with timezones, consider","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2862,"byte_end":2910,"line_start":84,"line_end":84,"column_start":1,"column_end":49}},{"value":"/ [`time::SystemTime`](https://doc.rust-lang.org/std/time/struct.SystemTime.html),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2911,"byte_end":2995,"line_start":85,"line_end":85,"column_start":1,"column_end":85}},{"value":"/ which tracks your system clock, or","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":2996,"byte_end":3034,"line_start":86,"line_end":86,"column_start":1,"column_end":39}},{"value":"/ [`time::Instant`](https://doc.rust-lang.org/std/time/struct.Instant.html), which","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3035,"byte_end":3119,"line_start":87,"line_end":87,"column_start":1,"column_end":85}},{"value":"/ is an opaque but monotonically-increasing representation of a moment in time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3120,"byte_end":3201,"line_start":88,"line_end":88,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3202,"byte_end":3205,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ `DateTime` is timezone-aware and must be constructed from","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3206,"byte_end":3267,"line_start":90,"line_end":90,"column_start":1,"column_end":62}},{"value":"/ the [**`TimeZone`**](./offset/trait.TimeZone.html) object,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3268,"byte_end":3330,"line_start":91,"line_end":91,"column_start":1,"column_end":63}},{"value":"/ which defines how the local date is converted to and back from the UTC date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3331,"byte_end":3411,"line_start":92,"line_end":92,"column_start":1,"column_end":81}},{"value":"/ There are three well-known `TimeZone` implementations:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3412,"byte_end":3470,"line_start":93,"line_end":93,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3471,"byte_end":3474,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ * [**`Utc`**](./offset/struct.Utc.html) specifies the UTC time zone. It is most efficient.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3475,"byte_end":3569,"line_start":95,"line_end":95,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3570,"byte_end":3573,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ * [**`Local`**](./offset/struct.Local.html) specifies the system local time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3574,"byte_end":3659,"line_start":97,"line_end":97,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3660,"byte_end":3663,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ * [**`FixedOffset`**](./offset/struct.FixedOffset.html) specifies","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3664,"byte_end":3733,"line_start":99,"line_end":99,"column_start":1,"column_end":70}},{"value":"/   an arbitrary, fixed time zone such as UTC+09:00 or UTC-10:30.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3734,"byte_end":3801,"line_start":100,"line_end":100,"column_start":1,"column_end":68}},{"value":"/   This often results from the parsed textual date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3802,"byte_end":3865,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"/   Since it stores the most information and does not depend on the system environment,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3866,"byte_end":3955,"line_start":102,"line_end":102,"column_start":1,"column_end":90}},{"value":"/   you would want to normalize other `TimeZone`s into this type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":3956,"byte_end":4023,"line_start":103,"line_end":103,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4024,"byte_end":4027,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ `DateTime`s with different `TimeZone` types are distinct and do not mix,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4028,"byte_end":4104,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"/ but can be converted to each other using","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4105,"byte_end":4149,"line_start":106,"line_end":106,"column_start":1,"column_end":45}},{"value":"/ the [`DateTime::with_timezone`](./struct.DateTime.html#method.with_timezone) method.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4150,"byte_end":4238,"line_start":107,"line_end":107,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4239,"byte_end":4242,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ You can get the current date and time in the UTC time zone","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4243,"byte_end":4305,"line_start":109,"line_end":109,"column_start":1,"column_end":63}},{"value":"/ ([`Utc::now()`](./offset/struct.Utc.html#method.now))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4306,"byte_end":4363,"line_start":110,"line_end":110,"column_start":1,"column_end":58}},{"value":"/ or in the local time zone","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4364,"byte_end":4393,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"/ ([`Local::now()`](./offset/struct.Local.html#method.now)).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4394,"byte_end":4456,"line_start":112,"line_end":112,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4457,"byte_end":4460,"line_start":113,"line_end":113,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4461,"byte_end":4472,"line_start":114,"line_end":114,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4473,"byte_end":4500,"line_start":115,"line_end":115,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4501,"byte_end":4504,"line_start":116,"line_end":116,"column_start":1,"column_end":4}},{"value":"/ let utc: DateTime<Utc> = Utc::now();       // e.g. `2014-11-28T12:45:59.324310806Z`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4505,"byte_end":4592,"line_start":117,"line_end":117,"column_start":1,"column_end":88}},{"value":"/ let local: DateTime<Local> = Local::now(); // e.g. `2014-11-28T21:45:59.324310806+09:00`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4593,"byte_end":4685,"line_start":118,"line_end":118,"column_start":1,"column_end":93}},{"value":"/ # let _ = utc; let _ = local;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4686,"byte_end":4719,"line_start":119,"line_end":119,"column_start":1,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4720,"byte_end":4727,"line_start":120,"line_end":120,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4728,"byte_end":4731,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ Alternatively, you can create your own date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4732,"byte_end":4789,"line_start":122,"line_end":122,"column_start":1,"column_end":58}},{"value":"/ This is a bit verbose due to Rust's lack of function and method overloading,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4790,"byte_end":4870,"line_start":123,"line_end":123,"column_start":1,"column_end":81}},{"value":"/ but in turn we get a rich combination of initialization methods.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4871,"byte_end":4939,"line_start":124,"line_end":124,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4940,"byte_end":4943,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4944,"byte_end":4955,"line_start":126,"line_end":126,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4956,"byte_end":4983,"line_start":127,"line_end":127,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":4984,"byte_end":5020,"line_start":128,"line_end":128,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5021,"byte_end":5024,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms(9, 10, 11); // `2014-07-08T09:10:11Z`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5025,"byte_end":5103,"line_start":130,"line_end":130,"column_start":1,"column_end":79}},{"value":"/ // July 8 is 188th day of the year 2014 (`o` for \"ordinal\")","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5104,"byte_end":5167,"line_start":131,"line_end":131,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(dt, Utc.yo(2014, 189).and_hms(9, 10, 11));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5168,"byte_end":5225,"line_start":132,"line_end":132,"column_start":1,"column_end":58}},{"value":"/ // July 8 is Tuesday in ISO week 28 of the year 2014.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5226,"byte_end":5283,"line_start":133,"line_end":133,"column_start":1,"column_end":58}},{"value":"/ assert_eq!(dt, Utc.isoywd(2014, 28, Weekday::Tue).and_hms(9, 10, 11));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5284,"byte_end":5358,"line_start":134,"line_end":134,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5359,"byte_end":5362,"line_start":135,"line_end":135,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12); // `2014-07-08T09:10:11.012Z`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5363,"byte_end":5455,"line_start":136,"line_end":136,"column_start":1,"column_end":93}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_micro(9, 10, 11, 12_000));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5456,"byte_end":5529,"line_start":137,"line_end":137,"column_start":1,"column_end":74}},{"value":"/ assert_eq!(dt, Utc.ymd(2014, 7, 8).and_hms_nano(9, 10, 11, 12_000_000));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5530,"byte_end":5606,"line_start":138,"line_end":138,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5607,"byte_end":5610,"line_start":139,"line_end":139,"column_start":1,"column_end":4}},{"value":"/ // dynamic verification","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5611,"byte_end":5638,"line_start":140,"line_end":140,"column_start":1,"column_end":28}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(21, 15, 33),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5639,"byte_end":5702,"line_start":141,"line_end":141,"column_start":1,"column_end":64}},{"value":"/            LocalResult::Single(Utc.ymd(2014, 7, 8).and_hms(21, 15, 33)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5703,"byte_end":5780,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 8).and_hms_opt(80, 15, 33), LocalResult::None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5781,"byte_end":5864,"line_start":143,"line_end":143,"column_start":1,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 7, 38).and_hms_opt(21, 15, 33), LocalResult::None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5865,"byte_end":5949,"line_start":144,"line_end":144,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5950,"byte_end":5953,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ // other time zone objects can be used to construct a local datetime.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":5954,"byte_end":6027,"line_start":146,"line_end":146,"column_start":1,"column_end":74}},{"value":"/ // obviously, `local_dt` is normally different from `dt`, but `fixed_dt` should be identical.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6028,"byte_end":6125,"line_start":147,"line_end":147,"column_start":1,"column_end":98}},{"value":"/ let local_dt = Local.ymd(2014, 7, 8).and_hms_milli(9, 10, 11, 12);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6126,"byte_end":6196,"line_start":148,"line_end":148,"column_start":1,"column_end":71}},{"value":"/ let fixed_dt = FixedOffset::east(9 * 3600).ymd(2014, 7, 8).and_hms_milli(18, 10, 11, 12);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6197,"byte_end":6290,"line_start":149,"line_end":149,"column_start":1,"column_end":94}},{"value":"/ assert_eq!(dt, fixed_dt);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6291,"byte_end":6320,"line_start":150,"line_end":150,"column_start":1,"column_end":30}},{"value":"/ # let _ = local_dt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6321,"byte_end":6344,"line_start":151,"line_end":151,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6345,"byte_end":6352,"line_start":152,"line_end":152,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6353,"byte_end":6356,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ Various properties are available to the date and time, and can be altered individually.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6357,"byte_end":6448,"line_start":154,"line_end":154,"column_start":1,"column_end":92}},{"value":"/ Most of them are defined in the traits [`Datelike`](./trait.Datelike.html) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6449,"byte_end":6531,"line_start":155,"line_end":155,"column_start":1,"column_end":83}},{"value":"/ [`Timelike`](./trait.Timelike.html) which you should `use` before.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6532,"byte_end":6602,"line_start":156,"line_end":156,"column_start":1,"column_end":71}},{"value":"/ Addition and subtraction is also supported.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6603,"byte_end":6650,"line_start":157,"line_end":157,"column_start":1,"column_end":48}},{"value":"/ The following illustrates most supported operations to the date and time:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6651,"byte_end":6728,"line_start":158,"line_end":158,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6729,"byte_end":6732,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6733,"byte_end":6744,"line_start":160,"line_end":160,"column_start":1,"column_end":12}},{"value":"/ # extern crate chrono;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6745,"byte_end":6771,"line_start":161,"line_end":161,"column_start":1,"column_end":27}},{"value":"/ extern crate time;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6772,"byte_end":6794,"line_start":162,"line_end":162,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6795,"byte_end":6798,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ # fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6799,"byte_end":6816,"line_start":164,"line_end":164,"column_start":1,"column_end":18}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6817,"byte_end":6844,"line_start":165,"line_end":165,"column_start":1,"column_end":28}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6845,"byte_end":6868,"line_start":166,"line_end":166,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6869,"byte_end":6872,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ // assume this returned `2014-11-28T21:45:59.324310806+09:00`:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6873,"byte_end":6939,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"/ let dt = FixedOffset::east(9*3600).ymd(2014, 11, 28).and_hms_nano(21, 45, 59, 324310806);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":6940,"byte_end":7033,"line_start":169,"line_end":169,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7034,"byte_end":7037,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ // property accessors","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7038,"byte_end":7063,"line_start":171,"line_end":171,"column_start":1,"column_end":26}},{"value":"/ assert_eq!((dt.year(), dt.month(), dt.day()), (2014, 11, 28));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7064,"byte_end":7130,"line_start":172,"line_end":172,"column_start":1,"column_end":67}},{"value":"/ assert_eq!((dt.month0(), dt.day0()), (10, 27)); // for unfortunate souls","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7131,"byte_end":7207,"line_start":173,"line_end":173,"column_start":1,"column_end":77}},{"value":"/ assert_eq!((dt.hour(), dt.minute(), dt.second()), (21, 45, 59));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7208,"byte_end":7276,"line_start":174,"line_end":174,"column_start":1,"column_end":69}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7277,"byte_end":7320,"line_start":175,"line_end":175,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.weekday().number_from_monday(), 5); // Mon=1, ..., Sun=7","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7321,"byte_end":7395,"line_start":176,"line_end":176,"column_start":1,"column_end":75}},{"value":"/ assert_eq!(dt.ordinal(), 332); // the day of year","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7396,"byte_end":7449,"line_start":177,"line_end":177,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.num_days_from_ce(), 735565); // the number of days from and including Jan 1, 1","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7450,"byte_end":7546,"line_start":178,"line_end":178,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7547,"byte_end":7550,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ // time zone accessor and manipulation","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7551,"byte_end":7593,"line_start":180,"line_end":180,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(dt.offset().fix().local_minus_utc(), 9 * 3600);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7594,"byte_end":7656,"line_start":181,"line_end":181,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(dt.timezone(), FixedOffset::east(9 * 3600));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7657,"byte_end":7716,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"/ assert_eq!(dt.with_timezone(&Utc), Utc.ymd(2014, 11, 28).and_hms_nano(12, 45, 59, 324310806));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7717,"byte_end":7815,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7816,"byte_end":7819,"line_start":184,"line_end":184,"column_start":1,"column_end":4}},{"value":"/ // a sample of property manipulations (validates dynamically)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7820,"byte_end":7885,"line_start":185,"line_end":185,"column_start":1,"column_end":66}},{"value":"/ assert_eq!(dt.with_day(29).unwrap().weekday(), Weekday::Sat); // 2014-11-29 is Saturday","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7886,"byte_end":7977,"line_start":186,"line_end":186,"column_start":1,"column_end":92}},{"value":"/ assert_eq!(dt.with_day(32), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":7978,"byte_end":8016,"line_start":187,"line_end":187,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(dt.with_year(-300).unwrap().num_days_from_ce(), -109606); // November 29, 301 BCE","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8017,"byte_end":8113,"line_start":188,"line_end":188,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8114,"byte_end":8117,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ // arithmetic operations","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8118,"byte_end":8146,"line_start":190,"line_end":190,"column_start":1,"column_end":29}},{"value":"/ let dt1 = Utc.ymd(2014, 11, 14).and_hms(8, 9, 10);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8147,"byte_end":8201,"line_start":191,"line_end":191,"column_start":1,"column_end":55}},{"value":"/ let dt2 = Utc.ymd(2014, 11, 14).and_hms(10, 9, 8);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8202,"byte_end":8256,"line_start":192,"line_end":192,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(dt1.signed_duration_since(dt2), Duration::seconds(-2 * 3600 + 2));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8257,"byte_end":8338,"line_start":193,"line_end":193,"column_start":1,"column_end":82}},{"value":"/ assert_eq!(dt2.signed_duration_since(dt1), Duration::seconds(2 * 3600 - 2));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8339,"byte_end":8419,"line_start":194,"line_end":194,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) + Duration::seconds(1_000_000_000),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8420,"byte_end":8507,"line_start":195,"line_end":195,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8508,"byte_end":8563,"line_start":196,"line_end":196,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 0, 0) - Duration::seconds(1_000_000_000),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8564,"byte_end":8651,"line_start":197,"line_end":197,"column_start":1,"column_end":88}},{"value":"/            Utc.ymd(1938, 4, 24).and_hms(22, 13, 20));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8652,"byte_end":8709,"line_start":198,"line_end":198,"column_start":1,"column_end":58}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8710,"byte_end":8717,"line_start":199,"line_end":199,"column_start":1,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8718,"byte_end":8725,"line_start":200,"line_end":200,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8726,"byte_end":8729,"line_start":201,"line_end":201,"column_start":1,"column_end":4}},{"value":"/ ### Formatting and Parsing","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8730,"byte_end":8760,"line_start":202,"line_end":202,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8761,"byte_end":8764,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/ Formatting is done via the [`format`](./struct.DateTime.html#method.format) method,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8765,"byte_end":8852,"line_start":204,"line_end":204,"column_start":1,"column_end":88}},{"value":"/ which format is equivalent to the familiar `strftime` format.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8853,"byte_end":8918,"line_start":205,"line_end":205,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8919,"byte_end":8922,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8923,"byte_end":8992,"line_start":207,"line_end":207,"column_start":1,"column_end":70}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":8993,"byte_end":9050,"line_start":208,"line_end":208,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9051,"byte_end":9054,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ The default `to_string` method and `{:?}` specifier also give a reasonable representation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9055,"byte_end":9149,"line_start":210,"line_end":210,"column_start":1,"column_end":95}},{"value":"/ Chrono also provides [`to_rfc2822`](./struct.DateTime.html#method.to_rfc2822) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9150,"byte_end":9235,"line_start":211,"line_end":211,"column_start":1,"column_end":86}},{"value":"/ [`to_rfc3339`](./struct.DateTime.html#method.to_rfc3339) methods","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9236,"byte_end":9304,"line_start":212,"line_end":212,"column_start":1,"column_end":69}},{"value":"/ for well-known formats.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9305,"byte_end":9332,"line_start":213,"line_end":213,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9333,"byte_end":9336,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9337,"byte_end":9348,"line_start":215,"line_end":215,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9349,"byte_end":9376,"line_start":216,"line_end":216,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9377,"byte_end":9380,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9381,"byte_end":9434,"line_start":218,"line_end":218,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2014-11-28 12:00:09\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9435,"byte_end":9517,"line_start":219,"line_end":219,"column_start":1,"column_end":83}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), \"Fri Nov 28 12:00:09 2014\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9518,"byte_end":9602,"line_start":220,"line_end":220,"column_start":1,"column_end":85}},{"value":"/ assert_eq!(dt.format(\"%a %b %e %T %Y\").to_string(), dt.format(\"%c\").to_string());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9603,"byte_end":9688,"line_start":221,"line_end":221,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9689,"byte_end":9692,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.to_string(), \"2014-11-28 12:00:09 UTC\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9693,"byte_end":9751,"line_start":223,"line_end":223,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 28 Nov 2014 12:00:09 +0000\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9752,"byte_end":9819,"line_start":224,"line_end":224,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(dt.to_rfc3339(), \"2014-11-28T12:00:09+00:00\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9820,"byte_end":9881,"line_start":225,"line_end":225,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2014-11-28T12:00:09Z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9882,"byte_end":9942,"line_start":226,"line_end":226,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9943,"byte_end":9946,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ // Note that milli/nanoseconds are only printed if they are non-zero","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":9947,"byte_end":10019,"line_start":228,"line_end":228,"column_start":1,"column_end":73}},{"value":"/ let dt_nano = Utc.ymd(2014, 11, 28).and_hms_nano(12, 0, 9, 1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10020,"byte_end":10086,"line_start":229,"line_end":229,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt_nano), \"2014-11-28T12:00:09.000000001Z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10087,"byte_end":10162,"line_start":230,"line_end":230,"column_start":1,"column_end":76}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10163,"byte_end":10170,"line_start":231,"line_end":231,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10171,"byte_end":10174,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ Parsing can be done with three methods:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10175,"byte_end":10218,"line_start":233,"line_end":233,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10219,"byte_end":10222,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ 1. The standard [`FromStr`](https://doc.rust-lang.org/std/str/trait.FromStr.html) trait","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10223,"byte_end":10314,"line_start":235,"line_end":235,"column_start":1,"column_end":92}},{"value":"/    (and [`parse`](https://doc.rust-lang.org/std/primitive.str.html#method.parse) method","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10315,"byte_end":10406,"line_start":236,"line_end":236,"column_start":1,"column_end":92}},{"value":"/    on a string) can be used for parsing `DateTime<FixedOffset>`, `DateTime<Utc>` and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10407,"byte_end":10495,"line_start":237,"line_end":237,"column_start":1,"column_end":89}},{"value":"/    `DateTime<Local>` values. This parses what the `{:?}`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10496,"byte_end":10556,"line_start":238,"line_end":238,"column_start":1,"column_end":61}},{"value":"/    ([`std::fmt::Debug`](https://doc.rust-lang.org/std/fmt/trait.Debug.html))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10557,"byte_end":10637,"line_start":239,"line_end":239,"column_start":1,"column_end":81}},{"value":"/    format specifier prints, and requires the offset to be present.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10638,"byte_end":10708,"line_start":240,"line_end":240,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10709,"byte_end":10712,"line_start":241,"line_end":241,"column_start":1,"column_end":4}},{"value":"/ 2. [`DateTime::parse_from_str`](./struct.DateTime.html#method.parse_from_str) parses","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10713,"byte_end":10801,"line_start":242,"line_end":242,"column_start":1,"column_end":89}},{"value":"/    a date and time with offsets and returns `DateTime<FixedOffset>`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10802,"byte_end":10874,"line_start":243,"line_end":243,"column_start":1,"column_end":73}},{"value":"/    This should be used when the offset is a part of input and the caller cannot guess that.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10875,"byte_end":10970,"line_start":244,"line_end":244,"column_start":1,"column_end":96}},{"value":"/    It *cannot* be used when the offset can be missing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":10971,"byte_end":11029,"line_start":245,"line_end":245,"column_start":1,"column_end":59}},{"value":"/    [`DateTime::parse_from_rfc2822`](./struct.DateTime.html#method.parse_from_rfc2822)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11030,"byte_end":11119,"line_start":246,"line_end":246,"column_start":1,"column_end":90}},{"value":"/    and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11120,"byte_end":11130,"line_start":247,"line_end":247,"column_start":1,"column_end":11}},{"value":"/    [`DateTime::parse_from_rfc3339`](./struct.DateTime.html#method.parse_from_rfc3339)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11131,"byte_end":11220,"line_start":248,"line_end":248,"column_start":1,"column_end":90}},{"value":"/    are similar but for well-known formats.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11221,"byte_end":11267,"line_start":249,"line_end":249,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11268,"byte_end":11271,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ 3. [`Offset::datetime_from_str`](./offset/trait.TimeZone.html#method.datetime_from_str) is","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11272,"byte_end":11366,"line_start":251,"line_end":251,"column_start":1,"column_end":95}},{"value":"/    similar but returns `DateTime` of given offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11367,"byte_end":11421,"line_start":252,"line_end":252,"column_start":1,"column_end":55}},{"value":"/    When the explicit offset is missing from the input, it simply uses given offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11422,"byte_end":11509,"line_start":253,"line_end":253,"column_start":1,"column_end":88}},{"value":"/    It issues an error when the input contains an explicit offset different","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11510,"byte_end":11588,"line_start":254,"line_end":254,"column_start":1,"column_end":79}},{"value":"/    from the current offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11589,"byte_end":11620,"line_start":255,"line_end":255,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11621,"byte_end":11624,"line_start":256,"line_end":256,"column_start":1,"column_end":4}},{"value":"/ More detailed control over the parsing process is available via","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11625,"byte_end":11692,"line_start":257,"line_end":257,"column_start":1,"column_end":68}},{"value":"/ [`format`](./format/index.html) module.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11693,"byte_end":11736,"line_start":258,"line_end":258,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11737,"byte_end":11740,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11741,"byte_end":11752,"line_start":260,"line_end":260,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11753,"byte_end":11780,"line_start":261,"line_end":261,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11781,"byte_end":11784,"line_start":262,"line_end":262,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2014, 11, 28).and_hms(12, 0, 9);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11785,"byte_end":11838,"line_start":263,"line_end":263,"column_start":1,"column_end":54}},{"value":"/ let fixed_dt = dt.with_timezone(&FixedOffset::east(9*3600));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11839,"byte_end":11903,"line_start":264,"line_end":264,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11904,"byte_end":11907,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ // method 1","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11908,"byte_end":11923,"line_start":266,"line_end":266,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(\"2014-11-28T12:00:09Z\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":11924,"byte_end":12004,"line_start":267,"line_end":267,"column_start":1,"column_end":81}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<Utc>>(), Ok(dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12005,"byte_end":12090,"line_start":268,"line_end":268,"column_start":1,"column_end":86}},{"value":"/ assert_eq!(\"2014-11-28T21:00:09+09:00\".parse::<DateTime<FixedOffset>>(), Ok(fixed_dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12091,"byte_end":12190,"line_start":269,"line_end":269,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12191,"byte_end":12194,"line_start":270,"line_end":270,"column_start":1,"column_end":4}},{"value":"/ // method 2","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12195,"byte_end":12210,"line_start":271,"line_end":271,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(DateTime::parse_from_str(\"2014-11-28 21:00:09 +09:00\", \"%Y-%m-%d %H:%M:%S %z\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12211,"byte_end":12305,"line_start":272,"line_end":272,"column_start":1,"column_end":95}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12306,"byte_end":12343,"line_start":273,"line_end":273,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc2822(\"Fri, 28 Nov 2014 21:00:09 +0900\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12344,"byte_end":12423,"line_start":274,"line_end":274,"column_start":1,"column_end":80}},{"value":"/            Ok(fixed_dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12424,"byte_end":12461,"line_start":275,"line_end":275,"column_start":1,"column_end":38}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2014-11-28T21:00:09+09:00\"), Ok(fixed_dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12462,"byte_end":12558,"line_start":276,"line_end":276,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12559,"byte_end":12562,"line_start":277,"line_end":277,"column_start":1,"column_end":4}},{"value":"/ // method 3","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12563,"byte_end":12578,"line_start":278,"line_end":278,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"2014-11-28 12:00:09\", \"%Y-%m-%d %H:%M:%S\"), Ok(dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12579,"byte_end":12677,"line_start":279,"line_end":279,"column_start":1,"column_end":99}},{"value":"/ assert_eq!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\"), Ok(dt.clone()));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12678,"byte_end":12778,"line_start":280,"line_end":280,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12779,"byte_end":12782,"line_start":281,"line_end":281,"column_start":1,"column_end":4}},{"value":"/ // oops, the year is missing!","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12783,"byte_end":12816,"line_start":282,"line_end":282,"column_start":1,"column_end":34}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12817,"byte_end":12902,"line_start":283,"line_end":283,"column_start":1,"column_end":86}},{"value":"/ // oops, the format string does not include the year at all!","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12903,"byte_end":12967,"line_start":284,"line_end":284,"column_start":1,"column_end":65}},{"value":"/ assert!(Utc.datetime_from_str(\"Fri Nov 28 12:00:09\", \"%a %b %e %T\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":12968,"byte_end":13050,"line_start":285,"line_end":285,"column_start":1,"column_end":83}},{"value":"/ // oops, the weekday is incorrect!","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13051,"byte_end":13089,"line_start":286,"line_end":286,"column_start":1,"column_end":39}},{"value":"/ assert!(Utc.datetime_from_str(\"Sat Nov 28 12:00:09 2014\", \"%a %b %e %T %Y\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13090,"byte_end":13180,"line_start":287,"line_end":287,"column_start":1,"column_end":91}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13181,"byte_end":13188,"line_start":288,"line_end":288,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13189,"byte_end":13192,"line_start":289,"line_end":289,"column_start":1,"column_end":4}},{"value":"/ Again : See [`format::strftime`](./format/strftime/index.html#specifiers)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13193,"byte_end":13270,"line_start":290,"line_end":290,"column_start":1,"column_end":78}},{"value":"/ documentation for full syntax and list of specifiers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13271,"byte_end":13328,"line_start":291,"line_end":291,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13329,"byte_end":13332,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ### Conversion from and to EPOCH timestamps","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13333,"byte_end":13380,"line_start":293,"line_end":293,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13381,"byte_end":13384,"line_start":294,"line_end":294,"column_start":1,"column_end":4}},{"value":"/ Use [`Utc.timestamp(seconds, nanoseconds)`](./offset/trait.TimeZone.html#method.timestamp)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13385,"byte_end":13479,"line_start":295,"line_end":295,"column_start":1,"column_end":95}},{"value":"/ to construct a [`DateTime<Utc>`](./struct.DateTime.html) from a UNIX timestamp","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13480,"byte_end":13562,"line_start":296,"line_end":296,"column_start":1,"column_end":83}},{"value":"/ (seconds, nanoseconds that passed since January 1st 1970).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13563,"byte_end":13625,"line_start":297,"line_end":297,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13626,"byte_end":13629,"line_start":298,"line_end":298,"column_start":1,"column_end":4}},{"value":"/ Use [`DateTime.timestamp`](./struct.DateTime.html#method.timestamp) to get the timestamp (in seconds)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13630,"byte_end":13735,"line_start":299,"line_end":299,"column_start":1,"column_end":106}},{"value":"/ from a [`DateTime`](./struct.DateTime.html). Additionally, you can use","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13736,"byte_end":13810,"line_start":300,"line_end":300,"column_start":1,"column_end":75}},{"value":"/ [`DateTime.timestamp_subsec_nanos`](./struct.DateTime.html#method.timestamp_subsec_nanos)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13811,"byte_end":13904,"line_start":301,"line_end":301,"column_start":1,"column_end":94}},{"value":"/ to get the number of additional number of nanoseconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13905,"byte_end":13963,"line_start":302,"line_end":302,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13964,"byte_end":13967,"line_start":303,"line_end":303,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13968,"byte_end":13979,"line_start":304,"line_end":304,"column_start":1,"column_end":12}},{"value":"/ // We need the trait in scope to use Utc::timestamp().","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":13980,"byte_end":14038,"line_start":305,"line_end":305,"column_start":1,"column_end":59}},{"value":"/ use chrono::{DateTime, TimeZone, Utc};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14039,"byte_end":14081,"line_start":306,"line_end":306,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14082,"byte_end":14085,"line_start":307,"line_end":307,"column_start":1,"column_end":4}},{"value":"/ // Construct a datetime from epoch:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14086,"byte_end":14125,"line_start":308,"line_end":308,"column_start":1,"column_end":40}},{"value":"/ let dt = Utc.timestamp(1_500_000_000, 0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14126,"byte_end":14171,"line_start":309,"line_end":309,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(dt.to_rfc2822(), \"Fri, 14 Jul 2017 02:40:00 +0000\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14172,"byte_end":14239,"line_start":310,"line_end":310,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14240,"byte_end":14243,"line_start":311,"line_end":311,"column_start":1,"column_end":4}},{"value":"/ // Get epoch value from a datetime:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14244,"byte_end":14283,"line_start":312,"line_end":312,"column_start":1,"column_end":40}},{"value":"/ let dt = DateTime::parse_from_rfc2822(\"Fri, 14 Jul 2017 02:40:00 +0000\").unwrap();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14284,"byte_end":14370,"line_start":313,"line_end":313,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp(), 1_500_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14371,"byte_end":14417,"line_start":314,"line_end":314,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14418,"byte_end":14425,"line_start":315,"line_end":315,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14426,"byte_end":14429,"line_start":316,"line_end":316,"column_start":1,"column_end":4}},{"value":"/ ### Individual date","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14430,"byte_end":14453,"line_start":317,"line_end":317,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14454,"byte_end":14457,"line_start":318,"line_end":318,"column_start":1,"column_end":4}},{"value":"/ Chrono also provides an individual date type ([**`Date`**](./struct.Date.html)).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14458,"byte_end":14542,"line_start":319,"line_end":319,"column_start":1,"column_end":85}},{"value":"/ It also has time zones attached, and have to be constructed via time zones.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14543,"byte_end":14622,"line_start":320,"line_end":320,"column_start":1,"column_end":80}},{"value":"/ Most operations available to `DateTime` are also available to `Date` whenever appropriate.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14623,"byte_end":14717,"line_start":321,"line_end":321,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14718,"byte_end":14721,"line_start":322,"line_end":322,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14722,"byte_end":14733,"line_start":323,"line_end":323,"column_start":1,"column_end":12}},{"value":"/ use chrono::prelude::*;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14734,"byte_end":14761,"line_start":324,"line_end":324,"column_start":1,"column_end":28}},{"value":"/ use chrono::offset::LocalResult;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14762,"byte_end":14798,"line_start":325,"line_end":325,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14799,"byte_end":14802,"line_start":326,"line_end":326,"column_start":1,"column_end":4}},{"value":"/ # // these *may* fail, but only very rarely. just rerun the test if you were that unfortunate ;)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14803,"byte_end":14903,"line_start":327,"line_end":327,"column_start":1,"column_end":101}},{"value":"/ assert_eq!(Utc::today(), Utc::now().date());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14904,"byte_end":14952,"line_start":328,"line_end":328,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(Local::today(), Local::now().date());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":14953,"byte_end":15005,"line_start":329,"line_end":329,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15006,"byte_end":15009,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).weekday(), Weekday::Fri);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15010,"byte_end":15072,"line_start":331,"line_end":331,"column_start":1,"column_end":63}},{"value":"/ assert_eq!(Utc.ymd_opt(2014, 11, 31), LocalResult::None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15073,"byte_end":15134,"line_start":332,"line_end":332,"column_start":1,"column_end":62}},{"value":"/ assert_eq!(Utc.ymd(2014, 11, 28).and_hms_milli(7, 8, 9, 10).format(\"%H%M%S\").to_string(),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15135,"byte_end":15228,"line_start":333,"line_end":333,"column_start":1,"column_end":94}},{"value":"/            \"070809\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15229,"byte_end":15254,"line_start":334,"line_end":334,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15255,"byte_end":15262,"line_start":335,"line_end":335,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15263,"byte_end":15266,"line_start":336,"line_end":336,"column_start":1,"column_end":4}},{"value":"/ There is no timezone-aware `Time` due to the lack of usefulness and also the complexity.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15267,"byte_end":15359,"line_start":337,"line_end":337,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15360,"byte_end":15363,"line_start":338,"line_end":338,"column_start":1,"column_end":4}},{"value":"/ `DateTime` has [`date`](./struct.DateTime.html#method.date) method","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15364,"byte_end":15434,"line_start":339,"line_end":339,"column_start":1,"column_end":71}},{"value":"/ which returns a `Date` which represents its date component.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15435,"byte_end":15498,"line_start":340,"line_end":340,"column_start":1,"column_end":64}},{"value":"/ There is also a [`time`](./struct.DateTime.html#method.time) method,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15499,"byte_end":15571,"line_start":341,"line_end":341,"column_start":1,"column_end":73}},{"value":"/ which simply returns a naive local time described below.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15572,"byte_end":15632,"line_start":342,"line_end":342,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15633,"byte_end":15636,"line_start":343,"line_end":343,"column_start":1,"column_end":4}},{"value":"/ ### Naive date and time","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15637,"byte_end":15664,"line_start":344,"line_end":344,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15665,"byte_end":15668,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ Chrono provides naive counterparts to `Date`, (non-existent) `Time` and `DateTime`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15669,"byte_end":15755,"line_start":346,"line_end":346,"column_start":1,"column_end":87}},{"value":"/ as [**`NaiveDate`**](./naive/struct.NaiveDate.html),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15756,"byte_end":15812,"line_start":347,"line_end":347,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveTime`**](./naive/struct.NaiveTime.html) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15813,"byte_end":15869,"line_start":348,"line_end":348,"column_start":1,"column_end":57}},{"value":"/ [**`NaiveDateTime`**](./naive/struct.NaiveDateTime.html) respectively.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15870,"byte_end":15944,"line_start":349,"line_end":349,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15945,"byte_end":15948,"line_start":350,"line_end":350,"column_start":1,"column_end":4}},{"value":"/ They have almost equivalent interfaces as their timezone-aware twins,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":15949,"byte_end":16022,"line_start":351,"line_end":351,"column_start":1,"column_end":74}},{"value":"/ but are not associated to time zones obviously and can be quite low-level.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16023,"byte_end":16101,"line_start":352,"line_end":352,"column_start":1,"column_end":79}},{"value":"/ They are mostly useful for building blocks for higher-level types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16102,"byte_end":16172,"line_start":353,"line_end":353,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16173,"byte_end":16176,"line_start":354,"line_end":354,"column_start":1,"column_end":4}},{"value":"/ Timezone-aware `DateTime` and `Date` types have two methods returning naive versions:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16177,"byte_end":16266,"line_start":355,"line_end":355,"column_start":1,"column_end":90}},{"value":"/ [`naive_local`](./struct.DateTime.html#method.naive_local) returns","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16267,"byte_end":16337,"line_start":356,"line_end":356,"column_start":1,"column_end":71}},{"value":"/ a view to the naive local time,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16338,"byte_end":16373,"line_start":357,"line_end":357,"column_start":1,"column_end":36}},{"value":"/ and [`naive_utc`](./struct.DateTime.html#method.naive_utc) returns","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16374,"byte_end":16444,"line_start":358,"line_end":358,"column_start":1,"column_end":71}},{"value":"/ a view to the naive UTC time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16445,"byte_end":16478,"line_start":359,"line_end":359,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16479,"byte_end":16482,"line_start":360,"line_end":360,"column_start":1,"column_end":4}},{"value":"/ ## Limitations","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16483,"byte_end":16501,"line_start":361,"line_end":361,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16502,"byte_end":16505,"line_start":362,"line_end":362,"column_start":1,"column_end":4}},{"value":"/ Only proleptic Gregorian calendar (i.e. extended to support older dates) is supported.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16506,"byte_end":16596,"line_start":363,"line_end":363,"column_start":1,"column_end":91}},{"value":"/ Be very careful if you really have to deal with pre-20C dates, they can be in Julian or others.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16597,"byte_end":16696,"line_start":364,"line_end":364,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16697,"byte_end":16700,"line_start":365,"line_end":365,"column_start":1,"column_end":4}},{"value":"/ Date types are limited in about +/- 262,000 years from the common epoch.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16701,"byte_end":16777,"line_start":366,"line_end":366,"column_start":1,"column_end":77}},{"value":"/ Time types are limited in the nanosecond accuracy.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16778,"byte_end":16832,"line_start":367,"line_end":367,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16833,"byte_end":16836,"line_start":368,"line_end":368,"column_start":1,"column_end":4}},{"value":"/ [Leap seconds are supported in the representation but","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16837,"byte_end":16894,"line_start":369,"line_end":369,"column_start":1,"column_end":58}},{"value":"/ Chrono doesn't try to make use of them](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16895,"byte_end":16991,"line_start":370,"line_end":370,"column_start":1,"column_end":97}},{"value":"/ (The main reason is that leap seconds are not really predictable.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":16992,"byte_end":17062,"line_start":371,"line_end":371,"column_start":1,"column_end":71}},{"value":"/ Almost *every* operation over the possible leap seconds will ignore them.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17063,"byte_end":17140,"line_start":372,"line_end":372,"column_start":1,"column_end":78}},{"value":"/ Consider using `NaiveDateTime` with the implicit TAI (International Atomic Time) scale","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17141,"byte_end":17231,"line_start":373,"line_end":373,"column_start":1,"column_end":91}},{"value":"/ if you want.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17232,"byte_end":17248,"line_start":374,"line_end":374,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17249,"byte_end":17252,"line_start":375,"line_end":375,"column_start":1,"column_end":4}},{"value":"/ Chrono inherently does not support an inaccurate or partial date and time representation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17253,"byte_end":17346,"line_start":376,"line_end":376,"column_start":1,"column_end":94}},{"value":"/ Any operation that can be ambiguous will return `None` in such cases.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17347,"byte_end":17420,"line_start":377,"line_end":377,"column_start":1,"column_end":74}},{"value":"/ For example, \"a month later\" of 2014-01-30 is not well-defined","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17421,"byte_end":17487,"line_start":378,"line_end":378,"column_start":1,"column_end":67}},{"value":"/ and consequently `Utc.ymd(2014, 1, 30).with_month(2)` returns `None`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17488,"byte_end":17561,"line_start":379,"line_end":379,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17562,"byte_end":17565,"line_start":380,"line_end":380,"column_start":1,"column_end":4}},{"value":"/ Advanced time zone handling is not yet supported.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17566,"byte_end":17619,"line_start":381,"line_end":381,"column_start":1,"column_end":54}},{"value":"/ For now you can try the [Chrono-tz](https://github.com/chronotope/chrono-tz/) crate instead.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17620,"byte_end":17716,"line_start":382,"line_end":382,"column_start":1,"column_end":97}},{"value":"deny(missing_docs)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17866,"byte_end":17888,"line_start":387,"line_end":387,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17889,"byte_end":17928,"line_start":388,"line_end":388,"column_start":1,"column_end":40}},{"value":"deny(dead_code)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":17929,"byte_end":17948,"line_start":389,"line_end":389,"column_start":1,"column_end":20}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20004,"byte_end":20011,"line_start":452,"line_end":452,"column_start":9,"column_end":16},"name":"prelude","qualname":"::prelude","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":2003},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":2005},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52}],"decl_id":null,"docs":" A convenience module appropriate for glob imports (`use chrono::prelude::*;`).\n","sig":null,"attributes":[{"value":"/ A convenience module appropriate for glob imports (`use chrono::prelude::*;`).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":19913,"byte_end":19995,"line_start":451,"line_end":451,"column_start":1,"column_end":83}}]},{"kind":"Mod","id":{"krate":0,"index":60},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"offset","qualname":"::offset","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":1365},{"krate":0,"index":1396},{"krate":0,"index":1390},{"krate":0,"index":1392},{"krate":0,"index":1387},{"krate":0,"index":1385},{"krate":0,"index":1380},{"krate":0,"index":1382},{"krate":0,"index":1376},{"krate":0,"index":75},{"krate":0,"index":83},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":120},{"krate":0,"index":179},{"krate":0,"index":215},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":2123},{"krate":0,"index":247},{"krate":0,"index":2125}],"decl_id":null,"docs":" The time zone, which calculates offsets from the local time to UTC.","sig":null,"attributes":[{"value":"/ The time zone, which calculates offsets from the local time to UTC.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41407,"byte_end":41478,"line_start":4,"line_end":4,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41479,"byte_end":41482,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ There are four operations provided by the `TimeZone` trait:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41483,"byte_end":41546,"line_start":6,"line_end":6,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41547,"byte_end":41550,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ 1. Converting the local `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41551,"byte_end":41612,"line_start":8,"line_end":8,"column_start":1,"column_end":62}},{"value":"/ 2. Converting the UTC `NaiveDateTime` to `DateTime<Tz>`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41613,"byte_end":41672,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/ 3. Converting `DateTime<Tz>` to the local `NaiveDateTime`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41673,"byte_end":41734,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/ 4. Constructing `DateTime<Tz>` objects from various offsets","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41735,"byte_end":41798,"line_start":11,"line_end":11,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41799,"byte_end":41802,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ 1 is used for constructors. 2 is used for the `with_timezone` method of date and time types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41803,"byte_end":41899,"line_start":13,"line_end":13,"column_start":1,"column_end":97}},{"value":"/ 3 is used for other methods, e.g. `year()` or `format()`, and provided by an associated type","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41900,"byte_end":41996,"line_start":14,"line_end":14,"column_start":1,"column_end":97}},{"value":"/ which implements `Offset` (which then passed to `TimeZone` for actual implementations).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":41997,"byte_end":42088,"line_start":15,"line_end":15,"column_start":1,"column_end":92}},{"value":"/ Technically speaking `TimeZone` has a total knowledge about given timescale,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42089,"byte_end":42169,"line_start":16,"line_end":16,"column_start":1,"column_end":81}},{"value":"/ but `Offset` is used as a cache to avoid the repeated conversion","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42170,"byte_end":42238,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ and provides implementations for 1 and 3.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42239,"byte_end":42284,"line_start":18,"line_end":18,"column_start":1,"column_end":46}},{"value":"/ An `TimeZone` instance can be reconstructed from the corresponding `Offset` instance.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42285,"byte_end":42374,"line_start":19,"line_end":19,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1367},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42828,"byte_end":42832,"line_start":33,"line_end":33,"column_start":5,"column_end":9},"name":"None","qualname":"::offset::LocalResult::None","value":"LocalResult::None","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Given local time representation is invalid.\n This can occur when, for example, the positive timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation is invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42700,"byte_end":42747,"line_start":31,"line_end":31,"column_start":5,"column_end":52}},{"value":"/ This can occur when, for example, the positive timezone transition.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42752,"byte_end":42823,"line_start":32,"line_end":32,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1369},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42906,"byte_end":42912,"line_start":35,"line_end":35,"column_start":5,"column_end":11},"name":"Single","qualname":"::offset::LocalResult::Single","value":"LocalResult::Single(T)","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Given local time representation has a single unique result.\n","sig":null,"attributes":[{"value":"/ Given local time representation has a single unique result.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42838,"byte_end":42901,"line_start":34,"line_end":34,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1372},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43078,"byte_end":43087,"line_start":38,"line_end":38,"column_start":5,"column_end":14},"name":"Ambiguous","qualname":"::offset::LocalResult::Ambiguous","value":"LocalResult::Ambiguous(T, T)","parent":{"krate":0,"index":1365},"children":[],"decl_id":null,"docs":" Given local time representation has multiple results and thus ambiguous.\n This can occur when, for example, the negative timezone transition.\n","sig":null,"attributes":[{"value":"/ Given local time representation has multiple results and thus ambiguous.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42921,"byte_end":42997,"line_start":36,"line_end":36,"column_start":5,"column_end":81}},{"value":"/ This can occur when, for example, the negative timezone transition.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43002,"byte_end":43073,"line_start":37,"line_end":37,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1365},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42679,"byte_end":42690,"line_start":30,"line_end":30,"column_start":10,"column_end":21},"name":"LocalResult","qualname":"::offset::LocalResult","value":"pub enum LocalResult<T> {\n\n    /// Given local time representation is invalid.\n    /// This can occur when, for example, the positive timezone transition.\n    None,\n\n    /// Given local time representation has a single unique result.\n    Single(T),\n\n    /// Given local time representation has multiple results and thus ambiguous.\n    /// This can occur when, for example, the negative timezone transition.\n    Ambiguous(T, T),\n}","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1369},{"krate":0,"index":1372}],"decl_id":null,"docs":" The conversion result from the local time to the timezone-aware datetime types.\n","sig":null,"attributes":[{"value":"/ The conversion result from the local time to the timezone-aware datetime types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":42535,"byte_end":42618,"line_start":28,"line_end":28,"column_start":1,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43237,"byte_end":43243,"line_start":43,"line_end":43,"column_start":12,"column_end":18},"name":"single","qualname":"<LocalResult<T>>::single","value":"pub fn single(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` only when the conversion result is unique, or `None` otherwise.\n","sig":null,"attributes":[{"value":"/ Returns `Some` only when the conversion result is unique, or `None` otherwise.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43143,"byte_end":43225,"line_start":42,"line_end":42,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43471,"byte_end":43479,"line_start":51,"line_end":51,"column_start":12,"column_end":20},"name":"earliest","qualname":"<LocalResult<T>>::earliest","value":"pub fn earliest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the earliest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the earliest possible conversion result, or `None` if none.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43377,"byte_end":43459,"line_start":50,"line_end":50,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43736,"byte_end":43742,"line_start":59,"line_end":59,"column_start":12,"column_end":18},"name":"latest","qualname":"<LocalResult<T>>::latest","value":"pub fn latest(Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns `Some` for the latest possible conversion result, or `None` if none.\n","sig":null,"attributes":[{"value":"/ Returns `Some` for the latest possible conversion result, or `None` if none.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43644,"byte_end":43724,"line_start":58,"line_end":58,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43989,"byte_end":43992,"line_start":67,"line_end":67,"column_start":12,"column_end":15},"name":"map","qualname":"<LocalResult<T>>::map","value":"pub fn map<U, F: FnMut(T) -> U>(Self, F) -> LocalResult<U>","parent":null,"children":[],"decl_id":null,"docs":" Maps a `LocalResult<T>` into `LocalResult<U>` with given function.\n","sig":null,"attributes":[{"value":"/ Maps a `LocalResult<T>` into `LocalResult<U>` with given function.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43907,"byte_end":43977,"line_start":66,"line_end":66,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44567,"byte_end":44575,"line_start":82,"line_end":82,"column_start":12,"column_end":20},"name":"and_time","qualname":"<LocalResult<Date<Tz>>>::and_time","value":"pub fn and_time(Self, NaiveTime) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44342,"byte_end":44413,"line_start":77,"line_end":77,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44418,"byte_end":44466,"line_start":78,"line_end":78,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44471,"byte_end":44474,"line_start":79,"line_end":79,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44479,"byte_end":44541,"line_start":80,"line_end":80,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44546,"byte_end":44555,"line_start":81,"line_end":81,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45073,"byte_end":45084,"line_start":96,"line_end":96,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_opt","value":"pub fn and_hms_opt(Self, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44845,"byte_end":44919,"line_start":91,"line_end":91,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44924,"byte_end":44972,"line_start":92,"line_end":92,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44977,"byte_end":44980,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44985,"byte_end":45047,"line_start":94,"line_end":94,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45052,"byte_end":45061,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45707,"byte_end":45724,"line_start":111,"line_end":111,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45381,"byte_end":45468,"line_start":105,"line_end":105,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45473,"byte_end":45553,"line_start":106,"line_end":106,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45558,"byte_end":45606,"line_start":107,"line_end":107,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45611,"byte_end":45614,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45619,"byte_end":45681,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":45686,"byte_end":45695,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46423,"byte_end":46440,"line_start":132,"line_end":132,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(Self, u32, u32, u32, u32)\n-> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46093,"byte_end":46180,"line_start":126,"line_end":126,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46185,"byte_end":46269,"line_start":127,"line_end":127,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46274,"byte_end":46322,"line_start":128,"line_end":128,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46327,"byte_end":46330,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46335,"byte_end":46397,"line_start":130,"line_end":130,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46402,"byte_end":46411,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47141,"byte_end":47157,"line_start":153,"line_end":153,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<LocalResult<Date<Tz>>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(Self, u32, u32, u32, u32) -> LocalResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46809,"byte_end":46895,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46900,"byte_end":46987,"line_start":148,"line_end":148,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":46992,"byte_end":47040,"line_start":149,"line_end":149,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47045,"byte_end":47048,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ Propagates any error. Ambiguous result would be discarded.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47053,"byte_end":47115,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47120,"byte_end":47129,"line_start":152,"line_end":152,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47645,"byte_end":47651,"line_start":171,"line_end":171,"column_start":12,"column_end":18},"name":"unwrap","qualname":"<LocalResult<T>>::unwrap","value":"pub fn unwrap(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the single unique conversion result, or panics accordingly.\n","sig":null,"attributes":[{"value":"/ Returns the single unique conversion result, or panics accordingly.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47562,"byte_end":47633,"line_start":170,"line_end":170,"column_start":5,"column_end":76}}]},{"kind":"Trait","id":{"krate":0,"index":93},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48006,"byte_end":48012,"line_start":183,"line_end":183,"column_start":11,"column_end":17},"name":"Offset","qualname":"::offset::Offset","value":"Offset: Sized + Clone + fmt::Debug","parent":null,"children":[{"krate":0,"index":94}],"decl_id":null,"docs":" The offset from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ The offset from the local time to UTC.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47953,"byte_end":47995,"line_start":182,"line_end":182,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48118,"byte_end":48121,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"fix","qualname":"::offset::Offset::fix","value":"pub fn fix(&Self) -> FixedOffset","parent":{"krate":0,"index":93},"children":[],"decl_id":null,"docs":" Returns the fixed offset from UTC to the local time stored.\n","sig":null,"attributes":[{"value":"/ Returns the fixed offset from UTC to the local time stored.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48047,"byte_end":48110,"line_start":184,"line_end":184,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":95},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48320,"byte_end":48328,"line_start":192,"line_end":192,"column_start":11,"column_end":19},"name":"TimeZone","qualname":"::offset::TimeZone","value":"TimeZone: Sized + Clone","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119}],"decl_id":null,"docs":" The time zone.","sig":null,"attributes":[{"value":"/ The time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48148,"byte_end":48166,"line_start":188,"line_end":188,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48167,"byte_end":48170,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ The methods here are the primarily constructors for [`Date`](../struct.Date.html) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48171,"byte_end":48260,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/ [`DateTime`](../struct.DateTime.html) types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48261,"byte_end":48309,"line_start":191,"line_end":191,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":96},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48551,"byte_end":48557,"line_start":196,"line_end":196,"column_start":10,"column_end":16},"name":"Offset","qualname":"::offset::TimeZone::Offset","value":"type Offset: Offset;","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" An associated offset type.\n This type is used to store the actual offset in date and time types.\n The original `TimeZone` value can be recovered via `TimeZone::from_offset`.\n","sig":null,"attributes":[{"value":"/ An associated offset type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48350,"byte_end":48380,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/ This type is used to store the actual offset in date and time types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48385,"byte_end":48457,"line_start":194,"line_end":194,"column_start":5,"column_end":77}},{"value":"/ The original `TimeZone` value can be recovered via `TimeZone::from_offset`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48462,"byte_end":48541,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49174,"byte_end":49177,"line_start":213,"line_end":213,"column_start":8,"column_end":11},"name":"ymd","qualname":"::offset::TimeZone::ymd","value":"pub fn ymd(&Self, i32, u32, u32) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48572,"byte_end":48643,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48648,"byte_end":48727,"line_start":199,"line_end":199,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48732,"byte_end":48735,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48740,"byte_end":48833,"line_start":201,"line_end":201,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48838,"byte_end":48915,"line_start":202,"line_end":202,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48920,"byte_end":48923,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48928,"byte_end":48990,"line_start":204,"line_end":204,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48995,"byte_end":48998,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49003,"byte_end":49016,"line_start":206,"line_end":206,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49021,"byte_end":49024,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49029,"byte_end":49037,"line_start":208,"line_end":208,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49042,"byte_end":49074,"line_start":209,"line_end":209,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49079,"byte_end":49082,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd(2015, 5, 15).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49087,"byte_end":49153,"line_start":211,"line_end":211,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49158,"byte_end":49166,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49993,"byte_end":50000,"line_start":233,"line_end":233,"column_start":8,"column_end":15},"name":"ymd_opt","qualname":"::offset::TimeZone::ymd_opt","value":"pub fn ymd_opt(&Self, i32, u32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, month, day and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, month, day and the current time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49293,"byte_end":49364,"line_start":217,"line_end":217,"column_start":5,"column_end":76}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49369,"byte_end":49448,"line_start":218,"line_end":218,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49453,"byte_end":49456,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49461,"byte_end":49554,"line_start":220,"line_end":220,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49559,"byte_end":49636,"line_start":221,"line_end":221,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49641,"byte_end":49644,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49649,"byte_end":49719,"line_start":223,"line_end":223,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49724,"byte_end":49727,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49732,"byte_end":49745,"line_start":225,"line_end":225,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49750,"byte_end":49753,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49758,"byte_end":49766,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, LocalResult, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49771,"byte_end":49816,"line_start":228,"line_end":228,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49821,"byte_end":49824,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.ymd_opt(2015, 5, 15).unwrap().to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49829,"byte_end":49908,"line_start":230,"line_end":230,"column_start":5,"column_end":84}},{"value":"/ assert_eq!(Utc.ymd_opt(2000, 0, 0), LocalResult::None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49913,"byte_end":49972,"line_start":231,"line_end":231,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":49977,"byte_end":49985,"line_start":232,"line_end":232,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50849,"byte_end":50851,"line_start":255,"line_end":255,"column_start":8,"column_end":10},"name":"yo","qualname":"::offset::TimeZone::yo","value":"pub fn yo(&Self, i32, u32) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50237,"byte_end":50328,"line_start":240,"line_end":240,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50333,"byte_end":50412,"line_start":241,"line_end":241,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50417,"byte_end":50420,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50425,"byte_end":50518,"line_start":243,"line_end":243,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50523,"byte_end":50600,"line_start":244,"line_end":244,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50605,"byte_end":50608,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid DOY.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50613,"byte_end":50668,"line_start":246,"line_end":246,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50673,"byte_end":50676,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50681,"byte_end":50694,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50699,"byte_end":50702,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50707,"byte_end":50715,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50720,"byte_end":50752,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50757,"byte_end":50760,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.yo(2015, 135).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50765,"byte_end":50828,"line_start":253,"line_end":253,"column_start":5,"column_end":68}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50833,"byte_end":50841,"line_start":254,"line_end":254,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51402,"byte_end":51408,"line_start":266,"line_end":266,"column_start":8,"column_end":14},"name":"yo_opt","qualname":"::offset::TimeZone::yo_opt","value":"pub fn yo_opt(&Self, i32, u32) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from year, day of year (DOY or \"ordinal\") and the current time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":50955,"byte_end":51046,"line_start":259,"line_end":259,"column_start":5,"column_end":96}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51051,"byte_end":51130,"line_start":260,"line_end":260,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51135,"byte_end":51138,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51143,"byte_end":51236,"line_start":262,"line_end":262,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51241,"byte_end":51318,"line_start":263,"line_end":263,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51323,"byte_end":51326,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid DOY.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51331,"byte_end":51394,"line_start":265,"line_end":265,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52386,"byte_end":52392,"line_start":290,"line_end":290,"column_start":8,"column_end":14},"name":"isoywd","qualname":"::offset::TimeZone::isoywd","value":"pub fn isoywd(&Self, i32, u32, Weekday) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51633,"byte_end":51724,"line_start":273,"line_end":273,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51729,"byte_end":51755,"line_start":274,"line_end":274,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51760,"byte_end":51839,"line_start":275,"line_end":275,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51844,"byte_end":51915,"line_start":276,"line_end":276,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51920,"byte_end":51923,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":51928,"byte_end":52021,"line_start":278,"line_end":278,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52026,"byte_end":52103,"line_start":279,"line_end":279,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52108,"byte_end":52111,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52116,"byte_end":52179,"line_start":281,"line_end":281,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52184,"byte_end":52187,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52192,"byte_end":52205,"line_start":283,"line_end":283,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52210,"byte_end":52213,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52218,"byte_end":52226,"line_start":285,"line_end":285,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, Weekday, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52231,"byte_end":52272,"line_start":286,"line_end":286,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52277,"byte_end":52280,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.isoywd(2015, 20, Weekday::Fri).to_string(), \"2015-05-15UTC\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52285,"byte_end":52365,"line_start":288,"line_end":288,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52370,"byte_end":52378,"line_start":289,"line_end":289,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53083,"byte_end":53093,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"isoywd_opt","qualname":"::offset::TimeZone::isoywd_opt","value":"pub fn isoywd_opt(&Self, i32, u32, Weekday) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\n the current time zone.\n This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\n The resulting `Date` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52521,"byte_end":52612,"line_start":294,"line_end":294,"column_start":5,"column_end":96}},{"value":"/ the current time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52617,"byte_end":52643,"line_start":295,"line_end":295,"column_start":5,"column_end":31}},{"value":"/ This assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52648,"byte_end":52727,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/ The resulting `Date` may have a different year from the input year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52732,"byte_end":52803,"line_start":297,"line_end":297,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52808,"byte_end":52811,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ The time zone normally does not affect the date (unless it is between UTC-24 and UTC+24),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52816,"byte_end":52909,"line_start":299,"line_end":299,"column_start":5,"column_end":98}},{"value":"/ but it will propagate to the `DateTime` values constructed via this date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52914,"byte_end":52991,"line_start":300,"line_end":300,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":52996,"byte_end":52999,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53004,"byte_end":53075,"line_start":302,"line_end":302,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53918,"byte_end":53927,"line_start":324,"line_end":324,"column_start":8,"column_end":17},"name":"timestamp","qualname":"::offset::TimeZone::timestamp","value":"pub fn timestamp(&Self, i64, u32) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53343,"byte_end":53405,"line_start":310,"line_end":310,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53410,"byte_end":53470,"line_start":311,"line_end":311,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53475,"byte_end":53546,"line_start":312,"line_end":312,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53551,"byte_end":53554,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53559,"byte_end":53634,"line_start":314,"line_end":314,"column_start":5,"column_end":80}},{"value":"/ for a non-panicking version see [`timestamp_opt`](#method.timestamp_opt).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53639,"byte_end":53716,"line_start":315,"line_end":315,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53721,"byte_end":53724,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53729,"byte_end":53742,"line_start":317,"line_end":317,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53747,"byte_end":53750,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53755,"byte_end":53763,"line_start":319,"line_end":319,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53768,"byte_end":53800,"line_start":320,"line_end":320,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53805,"byte_end":53808,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp(1431648000, 0).to_string(), \"2015-05-15 00:00:00 UTC\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53813,"byte_end":53897,"line_start":322,"line_end":322,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":53902,"byte_end":53910,"line_start":323,"line_end":323,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54410,"byte_end":54423,"line_start":334,"line_end":334,"column_start":8,"column_end":21},"name":"timestamp_opt","qualname":"::offset::TimeZone::timestamp_opt","value":"pub fn timestamp_opt(&Self, i64, u32) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap seconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap seconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54038,"byte_end":54100,"line_start":328,"line_end":328,"column_start":5,"column_end":67}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\")","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54105,"byte_end":54165,"line_start":329,"line_end":329,"column_start":5,"column_end":65}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54170,"byte_end":54241,"line_start":330,"line_end":330,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54246,"byte_end":54249,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of seconds and/or","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54254,"byte_end":54326,"line_start":332,"line_end":332,"column_start":5,"column_end":77}},{"value":"/ invalid nanosecond, otherwise always returns `LocalResult::Single`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54331,"byte_end":54402,"line_start":333,"line_end":333,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55163,"byte_end":55179,"line_start":354,"line_end":354,"column_start":8,"column_end":24},"name":"timestamp_millis","qualname":"::offset::TimeZone::timestamp_millis","value":"pub fn timestamp_millis(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54684,"byte_end":54751,"line_start":341,"line_end":341,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54756,"byte_end":54817,"line_start":342,"line_end":342,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54822,"byte_end":54825,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ Panics on out-of-range number of milliseconds for a non-panicking","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54830,"byte_end":54899,"line_start":344,"line_end":344,"column_start":5,"column_end":74}},{"value":"/ version see [`timestamp_millis_opt`](#method.timestamp_millis_opt).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54904,"byte_end":54975,"line_start":345,"line_end":345,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54980,"byte_end":54983,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":54988,"byte_end":55001,"line_start":347,"line_end":347,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55006,"byte_end":55009,"line_start":348,"line_end":348,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55014,"byte_end":55022,"line_start":349,"line_end":349,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55027,"byte_end":55059,"line_start":350,"line_end":350,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55064,"byte_end":55067,"line_start":351,"line_end":351,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_millis(1431648000).timestamp(), 1431648);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55072,"byte_end":55142,"line_start":352,"line_end":352,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55147,"byte_end":55155,"line_start":353,"line_end":353,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55910,"byte_end":55930,"line_start":375,"line_end":375,"column_start":8,"column_end":28},"name":"timestamp_millis_opt","qualname":"::offset::TimeZone::timestamp_millis_opt","value":"pub fn timestamp_millis_opt(&Self, i64) -> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap milliseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap milliseconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55282,"byte_end":55349,"line_start":358,"line_end":358,"column_start":5,"column_end":72}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55354,"byte_end":55415,"line_start":359,"line_end":359,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55420,"byte_end":55423,"line_start":360,"line_end":360,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55428,"byte_end":55431,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ Returns `LocalResult::None` on out-of-range number of milliseconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55436,"byte_end":55506,"line_start":362,"line_end":362,"column_start":5,"column_end":75}},{"value":"/ and/or invalid nanosecond, otherwise always returns","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55511,"byte_end":55566,"line_start":363,"line_end":363,"column_start":5,"column_end":60}},{"value":"/ `LocalResult::Single`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55571,"byte_end":55597,"line_start":364,"line_end":364,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55602,"byte_end":55605,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55610,"byte_end":55623,"line_start":366,"line_end":366,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55628,"byte_end":55631,"line_start":367,"line_end":367,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55636,"byte_end":55644,"line_start":368,"line_end":368,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone, LocalResult};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55649,"byte_end":55694,"line_start":369,"line_end":369,"column_start":5,"column_end":50}},{"value":"/ match Utc.timestamp_millis_opt(1431648000) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55699,"byte_end":55747,"line_start":370,"line_end":370,"column_start":5,"column_end":53}},{"value":"/     LocalResult::Single(dt) => assert_eq!(dt.timestamp(), 1431648),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55752,"byte_end":55823,"line_start":371,"line_end":371,"column_start":5,"column_end":76}},{"value":"/     _ => panic!(\"Incorrect timestamp_millis\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55828,"byte_end":55878,"line_start":372,"line_end":372,"column_start":5,"column_end":55}},{"value":"/ };","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55883,"byte_end":55889,"line_start":373,"line_end":373,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":55894,"byte_end":55902,"line_start":374,"line_end":374,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56632,"byte_end":56647,"line_start":397,"line_end":397,"column_start":8,"column_end":23},"name":"timestamp_nanos","qualname":"::offset::TimeZone::timestamp_nanos","value":"pub fn timestamp_nanos(&Self, i64) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the number of non-leap nanoseconds\n since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the number of non-leap nanoseconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56209,"byte_end":56275,"line_start":384,"line_end":384,"column_start":5,"column_end":71}},{"value":"/ since January 1, 1970 0:00:00 UTC (aka \"UNIX timestamp\").","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56280,"byte_end":56341,"line_start":385,"line_end":385,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56346,"byte_end":56349,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ Unlike [`timestamp_millis`](#method.timestamp_millis), this never","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56354,"byte_end":56423,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ panics.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56428,"byte_end":56439,"line_start":388,"line_end":388,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56444,"byte_end":56447,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56452,"byte_end":56465,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56470,"byte_end":56473,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56478,"byte_end":56486,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56491,"byte_end":56523,"line_start":393,"line_end":393,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56528,"byte_end":56531,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(Utc.timestamp_nanos(1431648000000000).timestamp(), 1431648);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56536,"byte_end":56611,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56616,"byte_end":56624,"line_start":396,"line_end":396,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57434,"byte_end":57451,"line_start":416,"line_end":416,"column_start":8,"column_end":25},"name":"datetime_from_str","qualname":"::offset::TimeZone::datetime_from_str","value":"pub fn datetime_from_str(&Self, &str, &str) -> ParseResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a `DateTime` with the current offset.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56930,"byte_end":56986,"line_start":406,"line_end":406,"column_start":5,"column_end":61}},{"value":"/ returns a `DateTime` with the current offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":56991,"byte_end":57040,"line_start":407,"line_end":407,"column_start":5,"column_end":54}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57045,"byte_end":57115,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57120,"byte_end":57158,"line_start":409,"line_end":409,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57163,"byte_end":57166,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ If the format does not include offsets, the current offset is assumed;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57171,"byte_end":57245,"line_start":411,"line_end":411,"column_start":5,"column_end":79}},{"value":"/ otherwise the input should have a matching UTC offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57250,"byte_end":57308,"line_start":412,"line_end":412,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57313,"byte_end":57316,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ See also `DateTime::parse_from_str` which gives a local `DateTime`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57321,"byte_end":57391,"line_start":414,"line_end":414,"column_start":5,"column_end":75}},{"value":"/ with parsed `FixedOffset`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57396,"byte_end":57426,"line_start":415,"line_end":415,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57722,"byte_end":57733,"line_start":423,"line_end":423,"column_start":8,"column_end":19},"name":"from_offset","qualname":"::offset::TimeZone::from_offset","value":"pub fn from_offset(&Self::Offset) -> Self","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Reconstructs the time zone from the offset.\n","sig":null,"attributes":[{"value":"/ Reconstructs the time zone from the offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57667,"byte_end":57714,"line_start":422,"line_end":422,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57845,"byte_end":57867,"line_start":426,"line_end":426,"column_start":8,"column_end":30},"name":"offset_from_local_date","qualname":"::offset::TimeZone::offset_from_local_date","value":"pub fn offset_from_local_date(&Self, &NaiveDate) -> LocalResult<Self::Offset>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDate` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDate` if possible.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57771,"byte_end":57837,"line_start":425,"line_end":425,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58007,"byte_end":58033,"line_start":429,"line_end":429,"column_start":8,"column_end":34},"name":"offset_from_local_datetime","qualname":"::offset::TimeZone::offset_from_local_datetime","value":"pub fn offset_from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<Self::Offset>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset(s) for given local `NaiveDateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Creates the offset(s) for given local `NaiveDateTime` if possible.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":57929,"byte_end":57999,"line_start":428,"line_end":428,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58183,"byte_end":58198,"line_start":432,"line_end":432,"column_start":8,"column_end":23},"name":"from_local_date","qualname":"::offset::TimeZone::from_local_date","value":"pub fn from_local_date(&Self, &NaiveDate) -> LocalResult<Date<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDate` to the timezone-aware `Date` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDate` to the timezone-aware `Date` if possible.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58099,"byte_end":58175,"line_start":431,"line_end":431,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58550,"byte_end":58569,"line_start":440,"line_end":440,"column_start":8,"column_end":27},"name":"from_local_datetime","qualname":"::offset::TimeZone::from_local_datetime","value":"pub fn from_local_datetime(&Self, &NaiveDateTime)\n-> LocalResult<DateTime<Self>>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.\n","sig":null,"attributes":[{"value":"/ Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58458,"byte_end":58542,"line_start":439,"line_end":439,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58843,"byte_end":58863,"line_start":446,"line_end":446,"column_start":8,"column_end":28},"name":"offset_from_utc_date","qualname":"::offset::TimeZone::offset_from_utc_date","value":"pub fn offset_from_utc_date(&Self, &NaiveDate) -> Self::Offset","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDate`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDate`. This cannot fail.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58768,"byte_end":58835,"line_start":445,"line_end":445,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58989,"byte_end":59013,"line_start":449,"line_end":449,"column_start":8,"column_end":32},"name":"offset_from_utc_datetime","qualname":"::offset::TimeZone::offset_from_utc_datetime","value":"pub fn offset_from_utc_datetime(&Self, &NaiveDateTime) -> Self::Offset","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Creates the offset for given UTC `NaiveDateTime`. This cannot fail.\n","sig":null,"attributes":[{"value":"/ Creates the offset for given UTC `NaiveDateTime`. This cannot fail.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":58910,"byte_end":58981,"line_start":448,"line_end":448,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59220,"byte_end":59233,"line_start":453,"line_end":453,"column_start":8,"column_end":21},"name":"from_utc_date","qualname":"::offset::TimeZone::from_utc_date","value":"pub fn from_utc_date(&Self, &NaiveDate) -> Date<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDate` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDate` to the local time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59064,"byte_end":59115,"line_start":451,"line_end":451,"column_start":5,"column_end":56}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59120,"byte_end":59212,"line_start":452,"line_end":452,"column_start":5,"column_end":97}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59506,"byte_end":59523,"line_start":459,"line_end":459,"column_start":8,"column_end":25},"name":"from_utc_datetime","qualname":"::offset::TimeZone::from_utc_datetime","value":"pub fn from_utc_datetime(&Self, &NaiveDateTime) -> DateTime<Self>","parent":{"krate":0,"index":95},"children":[],"decl_id":null,"docs":" Converts the UTC `NaiveDateTime` to the local time.\n The UTC is continuous and thus this cannot fail (but can give the duplicate local time).\n","sig":null,"attributes":[{"value":"/ Converts the UTC `NaiveDateTime` to the local time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59346,"byte_end":59401,"line_start":457,"line_end":457,"column_start":5,"column_end":60}},{"value":"/ The UTC is continuous and thus this cannot fail (but can give the duplicate local time).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":59406,"byte_end":59498,"line_start":458,"line_end":458,"column_start":5,"column_end":97}}]},{"kind":"Struct","id":{"krate":0,"index":1399},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62853,"byte_end":62864,"line_start":23,"line_end":23,"column_start":12,"column_end":23},"name":"FixedOffset","qualname":"::offset::fixed::FixedOffset","value":"FixedOffset {  }","parent":null,"children":[{"krate":0,"index":1400}],"decl_id":null,"docs":" The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","sig":null,"attributes":[{"value":"/ The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62477,"byte_end":62548,"line_start":16,"line_end":16,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62549,"byte_end":62552,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62553,"byte_end":62610,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on a `FixedOffset` struct is the preferred way to construct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62611,"byte_end":62674,"line_start":19,"line_end":19,"column_start":1,"column_end":64}},{"value":"/ `DateTime<FixedOffset>` instances. See the [`east`](#method.east) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62675,"byte_end":62748,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/ [`west`](#method.west) methods for examples.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62749,"byte_end":62797,"line_start":21,"line_end":21,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63468,"byte_end":63472,"line_start":42,"line_end":42,"column_start":12,"column_end":16},"name":"east","qualname":"<FixedOffset>::east","value":"pub fn east(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62919,"byte_end":63007,"line_start":28,"line_end":28,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63012,"byte_end":63065,"line_start":29,"line_end":29,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63070,"byte_end":63073,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63078,"byte_end":63116,"line_start":31,"line_end":31,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63121,"byte_end":63124,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63129,"byte_end":63142,"line_start":33,"line_end":33,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63147,"byte_end":63150,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63155,"byte_end":63163,"line_start":35,"line_end":35,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63168,"byte_end":63208,"line_start":36,"line_end":36,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63213,"byte_end":63233,"line_start":37,"line_end":37,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::east(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63238,"byte_end":63302,"line_start":38,"line_end":38,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63307,"byte_end":63371,"line_start":39,"line_end":39,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00+05:00\")","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63376,"byte_end":63443,"line_start":40,"line_end":40,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63448,"byte_end":63456,"line_start":41,"line_end":41,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63807,"byte_end":63815,"line_start":50,"line_end":50,"column_start":12,"column_end":20},"name":"east_opt","qualname":"<FixedOffset>::east_opt","value":"pub fn east_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\n The negative `secs` means the Western Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63590,"byte_end":63678,"line_start":46,"line_end":46,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Western Hemisphere.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63683,"byte_end":63736,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63741,"byte_end":63744,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":63749,"byte_end":63795,"line_start":49,"line_end":49,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":140},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64557,"byte_end":64561,"line_start":72,"line_end":72,"column_start":12,"column_end":16},"name":"west","qualname":"<FixedOffset>::west","value":"pub fn west(i32) -> FixedOffset","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64008,"byte_end":64096,"line_start":58,"line_end":58,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64101,"byte_end":64154,"line_start":59,"line_end":59,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64159,"byte_end":64162,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-bound `secs`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64167,"byte_end":64205,"line_start":61,"line_end":61,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64210,"byte_end":64213,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64218,"byte_end":64231,"line_start":63,"line_end":63,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64236,"byte_end":64239,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64244,"byte_end":64252,"line_start":65,"line_end":65,"column_start":5,"column_end":13}},{"value":"/ use chrono::{FixedOffset, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64257,"byte_end":64297,"line_start":66,"line_end":66,"column_start":5,"column_end":45}},{"value":"/ let hour = 3600;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64302,"byte_end":64322,"line_start":67,"line_end":67,"column_start":5,"column_end":25}},{"value":"/ let datetime = FixedOffset::west(5 * hour).ymd(2016, 11, 08)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64327,"byte_end":64391,"line_start":68,"line_end":68,"column_start":5,"column_end":69}},{"value":"/                                           .and_hms(0, 0, 0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64396,"byte_end":64460,"line_start":69,"line_end":69,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(&datetime.to_rfc3339(), \"2016-11-08T00:00:00-05:00\")","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64465,"byte_end":64532,"line_start":70,"line_end":70,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64537,"byte_end":64545,"line_start":71,"line_end":71,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64896,"byte_end":64904,"line_start":80,"line_end":80,"column_start":12,"column_end":20},"name":"west_opt","qualname":"<FixedOffset>::west_opt","value":"pub fn west_opt(i32) -> Option<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\n The negative `secs` means the Eastern Hemisphere.","sig":null,"attributes":[{"value":"/ Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64679,"byte_end":64767,"line_start":76,"line_end":76,"column_start":5,"column_end":93}},{"value":"/ The negative `secs` means the Eastern Hemisphere.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64772,"byte_end":64825,"line_start":77,"line_end":77,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64830,"byte_end":64833,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-bound `secs`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":64838,"byte_end":64884,"line_start":79,"line_end":79,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65203,"byte_end":65218,"line_start":90,"line_end":90,"column_start":12,"column_end":27},"name":"local_minus_utc","qualname":"<FixedOffset>::local_minus_utc","value":"pub fn local_minus_utc(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from UTC to the local time.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from UTC to the local time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65098,"byte_end":65177,"line_start":88,"line_end":88,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65182,"byte_end":65191,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65380,"byte_end":65395,"line_start":96,"line_end":96,"column_start":12,"column_end":27},"name":"utc_minus_local","qualname":"<FixedOffset>::utc_minus_local","value":"pub fn utc_minus_local(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of seconds to add to convert from the local time to UTC.\n","sig":null,"attributes":[{"value":"/ Returns the number of seconds to add to convert from the local time to UTC.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65275,"byte_end":65354,"line_start":94,"line_end":94,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65359,"byte_end":65368,"line_start":95,"line_end":95,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1414},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72299,"byte_end":72304,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"Local","qualname":"::offset::local::Local","value":"","parent":null,"children":[],"decl_id":null,"docs":" The local timescale. This is implemented via the standard `time` crate.","sig":null,"attributes":[{"value":"/ The local timescale. This is implemented via the standard `time` crate.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":71843,"byte_end":71918,"line_start":66,"line_end":66,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":71919,"byte_end":71922,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":71923,"byte_end":71980,"line_start":68,"line_end":68,"column_start":1,"column_end":58}},{"value":"/ on the Local struct is the preferred way to construct `DateTime<Local>`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":71981,"byte_end":72056,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/ instances.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72057,"byte_end":72071,"line_start":70,"line_end":70,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72072,"byte_end":72075,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72076,"byte_end":72089,"line_start":72,"line_end":72,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72090,"byte_end":72093,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72094,"byte_end":72102,"line_start":74,"line_end":74,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Local, DateTime, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72103,"byte_end":72147,"line_start":75,"line_end":75,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72148,"byte_end":72151,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ let dt: DateTime<Local> = Local::now();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72152,"byte_end":72195,"line_start":77,"line_end":77,"column_start":1,"column_end":44}},{"value":"/ let dt: DateTime<Local> = Local.timestamp(0, 0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72196,"byte_end":72248,"line_start":78,"line_end":78,"column_start":1,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72249,"byte_end":72257,"line_start":79,"line_end":79,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72395,"byte_end":72400,"line_start":85,"line_end":85,"column_start":12,"column_end":17},"name":"today","qualname":"<Local>::today","value":"pub fn today() -> Date<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72324,"byte_end":72383,"line_start":84,"line_end":84,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72601,"byte_end":72604,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"now","qualname":"<Local>::now","value":"pub fn now() -> DateTime<Local>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72459,"byte_end":72522,"line_start":89,"line_end":89,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\")))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72527,"byte_end":72589,"line_start":90,"line_end":90,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1421},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77357,"byte_end":77360,"line_start":33,"line_end":33,"column_start":12,"column_end":15},"name":"Utc","qualname":"::offset::utc::Utc","value":"","parent":null,"children":[],"decl_id":null,"docs":" The UTC time zone. This is the most efficient time zone when you don't need the local time.\n It is also used as an offset (which is also a dummy type).","sig":null,"attributes":[{"value":"/ The UTC time zone. This is the most efficient time zone when you don't need the local time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":76711,"byte_end":76806,"line_start":15,"line_end":15,"column_start":1,"column_end":96}},{"value":"/ It is also used as an offset (which is also a dummy type).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":76807,"byte_end":76869,"line_start":16,"line_end":16,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":76870,"byte_end":76873,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ Using the [`TimeZone`](./trait.TimeZone.html) methods","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":76874,"byte_end":76931,"line_start":18,"line_end":18,"column_start":1,"column_end":58}},{"value":"/ on the UTC struct is the preferred way to construct `DateTime<Utc>`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":76932,"byte_end":77003,"line_start":19,"line_end":19,"column_start":1,"column_end":72}},{"value":"/ instances.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77004,"byte_end":77018,"line_start":20,"line_end":20,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77019,"byte_end":77022,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77023,"byte_end":77036,"line_start":22,"line_end":22,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77037,"byte_end":77040,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77041,"byte_end":77049,"line_start":24,"line_end":24,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77050,"byte_end":77107,"line_start":25,"line_end":25,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77108,"byte_end":77111,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77112,"byte_end":77194,"line_start":27,"line_end":27,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77195,"byte_end":77198,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77199,"byte_end":77240,"line_start":29,"line_end":29,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(Utc.ymd(1970, 1, 1).and_hms(0, 1, 1), dt);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77241,"byte_end":77298,"line_start":30,"line_end":30,"column_start":1,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77299,"byte_end":77307,"line_start":31,"line_end":31,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77473,"byte_end":77478,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"today","qualname":"<Utc>::today","value":"pub fn today() -> Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `Date` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `Date` which corresponds to the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77402,"byte_end":77461,"line_start":37,"line_end":37,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":231},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77663,"byte_end":77666,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"now","qualname":"<Utc>::now","value":"pub fn now() -> DateTime<Utc>","parent":null,"children":[],"decl_id":null,"docs":" Returns a `DateTime` which corresponds to the current date.\n","sig":null,"attributes":[{"value":"/ Returns a `DateTime` which corresponds to the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77521,"byte_end":77584,"line_start":40,"line_end":40,"column_start":5,"column_end":68}},{"value":"cfg(not(all(target_arch = \"wasm32\", feature = \"wasmbind\")))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77589,"byte_end":77651,"line_start":41,"line_end":41,"column_start":5,"column_end":67}}]},{"kind":"Mod","id":{"krate":0,"index":248},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20649,"byte_end":20654,"line_start":473,"line_end":473,"column_start":9,"column_end":14},"name":"naive","qualname":"::naive","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":249},{"krate":0,"index":329},{"krate":0,"index":453},{"krate":0,"index":466},{"krate":0,"index":551},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677}],"decl_id":null,"docs":" Date and time types unconcerned with timezones.","sig":null,"attributes":[{"value":"/ Date and time types unconcerned with timezones.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20661,"byte_end":20712,"line_start":474,"line_end":474,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20717,"byte_end":20720,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ They are primarily building blocks for other types","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20725,"byte_end":20779,"line_start":476,"line_end":476,"column_start":5,"column_end":59}},{"value":"/ (e.g. [`TimeZone`](../offset/trait.TimeZone.html)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20784,"byte_end":20839,"line_start":477,"line_end":477,"column_start":5,"column_end":60}},{"value":"/ but can be also used for the simpler date and time handling.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20844,"byte_end":20908,"line_start":478,"line_end":478,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1477},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115576,"byte_end":115585,"line_start":101,"line_end":101,"column_start":12,"column_end":21},"name":"NaiveDate","qualname":"::naive::date::NaiveDate","value":"NaiveDate {  }","parent":null,"children":[{"krate":0,"index":1478}],"decl_id":null,"docs":" ISO 8601 calendar date without timezone.\n Allows for every [proleptic Gregorian date](#calendar-date)\n from Jan 1, 262145 BCE to Dec 31, 262143 CE.\n Also supports the conversion from ISO 8601 ordinal and week date.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date without timezone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113002,"byte_end":113046,"line_start":52,"line_end":52,"column_start":1,"column_end":45}},{"value":"/ Allows for every [proleptic Gregorian date](#calendar-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113047,"byte_end":113110,"line_start":53,"line_end":53,"column_start":1,"column_end":64}},{"value":"/ from Jan 1, 262145 BCE to Dec 31, 262143 CE.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113111,"byte_end":113159,"line_start":54,"line_end":54,"column_start":1,"column_end":49}},{"value":"/ Also supports the conversion from ISO 8601 ordinal and week date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113160,"byte_end":113229,"line_start":55,"line_end":55,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113230,"byte_end":113233,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Calendar Date","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113234,"byte_end":113253,"line_start":57,"line_end":57,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113254,"byte_end":113257,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **calendar date** follows the proleptic Gregorian calendar.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113258,"byte_end":113334,"line_start":59,"line_end":59,"column_start":1,"column_end":77}},{"value":"/ It is like a normal civil calendar but note some slight differences:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113335,"byte_end":113407,"line_start":60,"line_end":60,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113408,"byte_end":113411,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ * Dates before the Gregorian calendar's inception in 1582 are defined via the extrapolation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113412,"byte_end":113508,"line_start":62,"line_end":62,"column_start":1,"column_end":97}},{"value":"/   Be careful, as historical dates are often noted in the Julian calendar and others","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113509,"byte_end":113596,"line_start":63,"line_end":63,"column_start":1,"column_end":88}},{"value":"/   and the transition to Gregorian may differ across countries (as late as early 20C).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113597,"byte_end":113686,"line_start":64,"line_end":64,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113687,"byte_end":113690,"line_start":65,"line_end":65,"column_start":1,"column_end":4}},{"value":"/   (Some example: Both Shakespeare from Britain and Cervantes from Spain seemingly died","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113691,"byte_end":113781,"line_start":66,"line_end":66,"column_start":1,"column_end":91}},{"value":"/   on the same calendar date---April 23, 1616---but in the different calendar.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113782,"byte_end":113863,"line_start":67,"line_end":67,"column_start":1,"column_end":82}},{"value":"/   Britain used the Julian calendar at that time, so Shakespeare's death is later.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113864,"byte_end":113950,"line_start":68,"line_end":68,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113951,"byte_end":113954,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ * ISO 8601 calendars has the year 0, which is 1 BCE (a year before 1 CE).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":113955,"byte_end":114032,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/   If you need a typical BCE/BC and CE/AD notation for year numbers,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114033,"byte_end":114104,"line_start":71,"line_end":71,"column_start":1,"column_end":72}},{"value":"/   use the [`Datelike::year_ce`](../trait.Datelike.html#method.year_ce) method.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114105,"byte_end":114187,"line_start":72,"line_end":72,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114188,"byte_end":114191,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Week Date","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114192,"byte_end":114207,"line_start":74,"line_end":74,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114208,"byte_end":114211,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **week date** is a triple of year number, week number","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114212,"byte_end":114282,"line_start":76,"line_end":76,"column_start":1,"column_end":71}},{"value":"/ and [day of the week](../enum.Weekday.html) with the following rules:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114283,"byte_end":114356,"line_start":77,"line_end":77,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114357,"byte_end":114360,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ * A week consists of Monday through Sunday, and is always numbered within some year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114361,"byte_end":114449,"line_start":79,"line_end":79,"column_start":1,"column_end":89}},{"value":"/   The week number ranges from 1 to 52 or 53 depending on the year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114450,"byte_end":114520,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114521,"byte_end":114524,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ * The week 1 of given year is defined as the first week containing January 4 of that year,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114525,"byte_end":114619,"line_start":82,"line_end":82,"column_start":1,"column_end":95}},{"value":"/   or equivalently, the first week containing four or more days in that year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114620,"byte_end":114700,"line_start":83,"line_end":83,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114701,"byte_end":114704,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ * The year number in the week date may *not* correspond to the actual Gregorian year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114705,"byte_end":114794,"line_start":85,"line_end":85,"column_start":1,"column_end":90}},{"value":"/   For example, January 3, 2016 (Sunday) was on the last (53rd) week of 2015.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114795,"byte_end":114875,"line_start":86,"line_end":86,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114876,"byte_end":114879,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Chrono's date types default to the ISO 8601 [calendar date](#calendar-date),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114880,"byte_end":114960,"line_start":88,"line_end":88,"column_start":1,"column_end":81}},{"value":"/ but [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":114961,"byte_end":115037,"line_start":89,"line_end":89,"column_start":1,"column_end":77}},{"value":"/ [`Datelike::weekday`](../trait.Datelike.html#tymethod.weekday) methods","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115038,"byte_end":115112,"line_start":90,"line_end":90,"column_start":1,"column_end":75}},{"value":"/ can be used to get the corresponding week date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115113,"byte_end":115164,"line_start":91,"line_end":91,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115165,"byte_end":115168,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ # Ordinal Date","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115169,"byte_end":115187,"line_start":93,"line_end":93,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115188,"byte_end":115191,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ The ISO 8601 **ordinal date** is a pair of year number and day of the year (\"ordinal\").","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115192,"byte_end":115283,"line_start":95,"line_end":95,"column_start":1,"column_end":92}},{"value":"/ The ordinal number ranges from 1 to 365 or 366 depending on the year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115284,"byte_end":115357,"line_start":96,"line_end":96,"column_start":1,"column_end":74}},{"value":"/ The year number is same to that of the [calendar date](#calendar-date).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115358,"byte_end":115433,"line_start":97,"line_end":97,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115434,"byte_end":115437,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ This is currently the internal format of Chrono's date types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115438,"byte_end":115503,"line_start":99,"line_end":99,"column_start":1,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":369},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115704,"byte_end":115712,"line_start":106,"line_end":106,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::naive::date::MIN_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `NaiveDate` (January 1, 262145 BCE).\n","sig":null,"attributes":[{"value":"/ The minimum possible `NaiveDate` (January 1, 262145 BCE).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115632,"byte_end":115693,"line_start":105,"line_end":105,"column_start":1,"column_end":62}}]},{"kind":"Const","id":{"krate":0,"index":370},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115862,"byte_end":115870,"line_start":108,"line_end":108,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::naive::date::MAX_DATE","value":"NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `NaiveDate` (December 31, 262143 CE).\n","sig":null,"attributes":[{"value":"/ The maximum possible `NaiveDate` (December 31, 262143 CE).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":115789,"byte_end":115851,"line_start":107,"line_end":107,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118180,"byte_end":118188,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"from_ymd","qualname":"<NaiveDate>::from_ymd","value":"pub fn from_ymd(i32, u32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117450,"byte_end":117518,"line_start":145,"line_end":145,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117523,"byte_end":117549,"line_start":146,"line_end":146,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117554,"byte_end":117557,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117562,"byte_end":117624,"line_start":148,"line_end":148,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117629,"byte_end":117632,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117637,"byte_end":117650,"line_start":150,"line_end":150,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117655,"byte_end":117658,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117663,"byte_end":117671,"line_start":152,"line_end":152,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117676,"byte_end":117723,"line_start":153,"line_end":153,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117728,"byte_end":117731,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 3, 14);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117736,"byte_end":117781,"line_start":155,"line_end":155,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117786,"byte_end":117817,"line_start":156,"line_end":156,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117822,"byte_end":117851,"line_start":157,"line_end":157,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117856,"byte_end":117884,"line_start":158,"line_end":158,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117889,"byte_end":117936,"line_start":159,"line_end":159,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117941,"byte_end":117983,"line_start":160,"line_end":160,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":117988,"byte_end":118028,"line_start":161,"line_end":161,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118033,"byte_end":118075,"line_start":162,"line_end":162,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118080,"byte_end":118155,"line_start":163,"line_end":163,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118160,"byte_end":118168,"line_start":164,"line_end":164,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":375},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119039,"byte_end":119051,"line_start":188,"line_end":188,"column_start":12,"column_end":24},"name":"from_ymd_opt","qualname":"<NaiveDate>::from_ymd_opt","value":"pub fn from_ymd_opt(i32, u32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [calendar date](#calendar-date)\n (year, month and day).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [calendar date](#calendar-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118337,"byte_end":118405,"line_start":169,"line_end":169,"column_start":5,"column_end":73}},{"value":"/ (year, month and day).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118410,"byte_end":118436,"line_start":170,"line_end":170,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118441,"byte_end":118444,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date, invalid month and/or day.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118449,"byte_end":118519,"line_start":172,"line_end":172,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118524,"byte_end":118527,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118532,"byte_end":118545,"line_start":174,"line_end":174,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118550,"byte_end":118553,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118558,"byte_end":118566,"line_start":176,"line_end":176,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118571,"byte_end":118597,"line_start":177,"line_end":177,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118602,"byte_end":118605,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ let from_ymd_opt = NaiveDate::from_ymd_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118610,"byte_end":118657,"line_start":179,"line_end":179,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118662,"byte_end":118665,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ assert!(from_ymd_opt(2015, 3, 14).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118670,"byte_end":118719,"line_start":181,"line_end":181,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 0, 14).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118724,"byte_end":118773,"line_start":182,"line_end":182,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(2015, 2, 29).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118778,"byte_end":118827,"line_start":183,"line_end":183,"column_start":5,"column_end":54}},{"value":"/ assert!(from_ymd_opt(-4, 2, 29).is_some()); // 5 BCE is a leap year","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118832,"byte_end":118903,"line_start":184,"line_end":184,"column_start":5,"column_end":76}},{"value":"/ assert!(from_ymd_opt(400000, 1, 1).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118908,"byte_end":118958,"line_start":185,"line_end":185,"column_start":5,"column_end":55}},{"value":"/ assert!(from_ymd_opt(-400000, 1, 1).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":118963,"byte_end":119014,"line_start":186,"line_end":186,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119019,"byte_end":119027,"line_start":187,"line_end":187,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119945,"byte_end":119952,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"from_yo","qualname":"<NaiveDate>::from_yo","value":"pub fn from_yo(i32, u32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119230,"byte_end":119296,"line_start":193,"line_end":193,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119301,"byte_end":119332,"line_start":194,"line_end":194,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119337,"byte_end":119340,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid day of year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119345,"byte_end":119408,"line_start":196,"line_end":196,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119413,"byte_end":119416,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119421,"byte_end":119434,"line_start":198,"line_end":198,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119439,"byte_end":119442,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119447,"byte_end":119455,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119460,"byte_end":119507,"line_start":201,"line_end":201,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119512,"byte_end":119515,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_yo(2015, 73);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119520,"byte_end":119561,"line_start":203,"line_end":203,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(d.ordinal(), 73);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119566,"byte_end":119598,"line_start":204,"line_end":204,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119603,"byte_end":119634,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119639,"byte_end":119668,"line_start":206,"line_end":206,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119673,"byte_end":119701,"line_start":207,"line_end":207,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119706,"byte_end":119748,"line_start":208,"line_end":208,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119753,"byte_end":119793,"line_start":209,"line_end":209,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119798,"byte_end":119840,"line_start":210,"line_end":210,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119845,"byte_end":119920,"line_start":211,"line_end":211,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":119925,"byte_end":119933,"line_start":212,"line_end":212,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120822,"byte_end":120833,"line_start":237,"line_end":237,"column_start":12,"column_end":23},"name":"from_yo_opt","qualname":"<NaiveDate>::from_yo_opt","value":"pub fn from_yo_opt(i32, u32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)\n (year and day of the year).","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ordinal date](#ordinal-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120089,"byte_end":120155,"line_start":217,"line_end":217,"column_start":5,"column_end":71}},{"value":"/ (year and day of the year).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120160,"byte_end":120191,"line_start":218,"line_end":218,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120196,"byte_end":120199,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid day of year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120204,"byte_end":120275,"line_start":220,"line_end":220,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120280,"byte_end":120283,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120288,"byte_end":120301,"line_start":222,"line_end":222,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120306,"byte_end":120309,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120314,"byte_end":120322,"line_start":224,"line_end":224,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120327,"byte_end":120353,"line_start":225,"line_end":225,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120358,"byte_end":120361,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ let from_yo_opt = NaiveDate::from_yo_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120366,"byte_end":120411,"line_start":227,"line_end":227,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120416,"byte_end":120419,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ assert!(from_yo_opt(2015, 100).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120424,"byte_end":120470,"line_start":229,"line_end":229,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120475,"byte_end":120519,"line_start":230,"line_end":230,"column_start":5,"column_end":49}},{"value":"/ assert!(from_yo_opt(2015, 365).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120524,"byte_end":120570,"line_start":231,"line_end":231,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(2015, 366).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120575,"byte_end":120621,"line_start":232,"line_end":232,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-4, 366).is_some()); // 5 BCE is a leap year","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120626,"byte_end":120694,"line_start":233,"line_end":233,"column_start":5,"column_end":73}},{"value":"/ assert!(from_yo_opt(400000, 1).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120699,"byte_end":120745,"line_start":234,"line_end":234,"column_start":5,"column_end":51}},{"value":"/ assert!(from_yo_opt(-400000, 1).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120750,"byte_end":120797,"line_start":235,"line_end":235,"column_start":5,"column_end":52}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120802,"byte_end":120810,"line_start":236,"line_end":236,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121839,"byte_end":121850,"line_start":263,"line_end":263,"column_start":12,"column_end":23},"name":"from_isoywd","qualname":"<NaiveDate>::from_isoywd","value":"pub fn from_isoywd(i32, u32, Weekday) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":120999,"byte_end":121063,"line_start":242,"line_end":242,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121068,"byte_end":121112,"line_start":243,"line_end":243,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121117,"byte_end":121193,"line_start":244,"line_end":244,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121198,"byte_end":121201,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121206,"byte_end":121269,"line_start":246,"line_end":246,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121274,"byte_end":121277,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121282,"byte_end":121295,"line_start":248,"line_end":248,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121300,"byte_end":121303,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121308,"byte_end":121316,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121321,"byte_end":121368,"line_start":251,"line_end":251,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121373,"byte_end":121376,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 11, Weekday::Sat);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121381,"byte_end":121440,"line_start":253,"line_end":253,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121445,"byte_end":121487,"line_start":254,"line_end":254,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121492,"byte_end":121532,"line_start":255,"line_end":255,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121537,"byte_end":121579,"line_start":256,"line_end":256,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121584,"byte_end":121615,"line_start":257,"line_end":257,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121620,"byte_end":121649,"line_start":258,"line_end":258,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121654,"byte_end":121682,"line_start":259,"line_end":259,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121687,"byte_end":121734,"line_start":260,"line_end":260,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121739,"byte_end":121814,"line_start":261,"line_end":261,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":121819,"byte_end":121827,"line_start":262,"line_end":262,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":379},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":124213,"byte_end":124228,"line_start":311,"line_end":311,"column_start":12,"column_end":27},"name":"from_isoywd_opt","qualname":"<NaiveDate>::from_isoywd_opt","value":"pub fn from_isoywd_opt(i32, u32, Weekday) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from the [ISO week date](#week-date)\n (year, week number and day of the week).\n The resulting `NaiveDate` may have a different year from the input year.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from the [ISO week date](#week-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122012,"byte_end":122076,"line_start":267,"line_end":267,"column_start":5,"column_end":69}},{"value":"/ (year, week number and day of the week).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122081,"byte_end":122125,"line_start":268,"line_end":268,"column_start":5,"column_end":49}},{"value":"/ The resulting `NaiveDate` may have a different year from the input year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122130,"byte_end":122206,"line_start":269,"line_end":269,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122211,"byte_end":122214,"line_start":270,"line_end":270,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range date and/or invalid week number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122219,"byte_end":122290,"line_start":271,"line_end":271,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122295,"byte_end":122298,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122303,"byte_end":122316,"line_start":273,"line_end":273,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122321,"byte_end":122324,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122329,"byte_end":122337,"line_start":275,"line_end":275,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122342,"byte_end":122379,"line_start":276,"line_end":276,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122384,"byte_end":122387,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122392,"byte_end":122431,"line_start":278,"line_end":278,"column_start":5,"column_end":44}},{"value":"/ let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122436,"byte_end":122489,"line_start":279,"line_end":279,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122494,"byte_end":122497,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 0, Weekday::Sun), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122502,"byte_end":122563,"line_start":281,"line_end":281,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 10, Weekday::Sun), Some(from_ymd(2015, 3, 8)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122568,"byte_end":122652,"line_start":282,"line_end":282,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 30, Weekday::Mon), Some(from_ymd(2015, 7, 20)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122657,"byte_end":122742,"line_start":283,"line_end":283,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 60, Weekday::Mon), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122747,"byte_end":122809,"line_start":284,"line_end":284,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122814,"byte_end":122817,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_isoywd_opt(400000, 10, Weekday::Fri), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122822,"byte_end":122886,"line_start":286,"line_end":286,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(from_isoywd_opt(-400000, 10, Weekday::Sat), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122891,"byte_end":122956,"line_start":287,"line_end":287,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122961,"byte_end":122969,"line_start":288,"line_end":288,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122974,"byte_end":122977,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ The year number of ISO week date may differ from that of the calendar date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":122982,"byte_end":123061,"line_start":290,"line_end":290,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123066,"byte_end":123069,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123074,"byte_end":123082,"line_start":292,"line_end":292,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123087,"byte_end":123126,"line_start":293,"line_end":293,"column_start":5,"column_end":44}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123131,"byte_end":123172,"line_start":294,"line_end":294,"column_start":5,"column_end":46}},{"value":"/ # let from_isoywd_opt = NaiveDate::from_isoywd_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123177,"byte_end":123232,"line_start":295,"line_end":295,"column_start":5,"column_end":60}},{"value":"/ //           Mo Tu We Th Fr Sa Su","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123237,"byte_end":123274,"line_start":296,"line_end":296,"column_start":5,"column_end":42}},{"value":"/ // 2014-W52  22 23 24 25 26 27 28    has 4+ days of new year,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123279,"byte_end":123344,"line_start":297,"line_end":297,"column_start":5,"column_end":70}},{"value":"/ // 2015-W01  29 30 31  1  2  3  4 <- so this is the first week","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123349,"byte_end":123415,"line_start":298,"line_end":298,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 52, Weekday::Sun), Some(from_ymd(2014, 12, 28)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123420,"byte_end":123506,"line_start":299,"line_end":299,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2014, 53, Weekday::Mon), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123511,"byte_end":123573,"line_start":300,"line_end":300,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 1, Weekday::Mon), Some(from_ymd(2014, 12, 29)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123578,"byte_end":123663,"line_start":301,"line_end":301,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123668,"byte_end":123671,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ // 2015-W52  21 22 23 24 25 26 27    has 4+ days of old year,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123676,"byte_end":123741,"line_start":303,"line_end":303,"column_start":5,"column_end":70}},{"value":"/ // 2015-W53  28 29 30 31  1  2  3 <- so this is the last week","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123746,"byte_end":123811,"line_start":304,"line_end":304,"column_start":5,"column_end":70}},{"value":"/ // 2016-W01   4  5  6  7  8  9 10","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123816,"byte_end":123853,"line_start":305,"line_end":305,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 52, Weekday::Sun), Some(from_ymd(2015, 12, 27)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123858,"byte_end":123944,"line_start":306,"line_end":306,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 53, Weekday::Sun), Some(from_ymd(2016, 1, 3)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":123949,"byte_end":124033,"line_start":307,"line_end":307,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(from_isoywd_opt(2015, 54, Weekday::Mon), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":124038,"byte_end":124100,"line_start":308,"line_end":308,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(from_isoywd_opt(2016, 1, Weekday::Mon), Some(from_ymd(2016, 1, 4)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":124105,"byte_end":124188,"line_start":309,"line_end":309,"column_start":5,"column_end":88}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":124193,"byte_end":124201,"line_start":310,"line_end":310,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127109,"byte_end":127130,"line_start":381,"line_end":381,"column_start":12,"column_end":33},"name":"from_num_days_from_ce","qualname":"<NaiveDate>::from_num_days_from_ce","value":"pub fn from_num_days_from_ce(i32) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125378,"byte_end":125467,"line_start":337,"line_end":337,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125472,"byte_end":125501,"line_start":338,"line_end":338,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125506,"byte_end":125509,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics if the date is out of range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125514,"byte_end":125553,"line_start":340,"line_end":340,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125558,"byte_end":125561,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125566,"byte_end":125579,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125584,"byte_end":125587,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125592,"byte_end":125600,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125605,"byte_end":125652,"line_start":345,"line_end":345,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125657,"byte_end":125660,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_num_days_from_ce(735671);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125665,"byte_end":125718,"line_start":347,"line_end":347,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(d.num_days_from_ce(), 735671); // days since January 1, 1 CE","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125723,"byte_end":125798,"line_start":348,"line_end":348,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125803,"byte_end":125834,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d.month(), 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125839,"byte_end":125868,"line_start":350,"line_end":350,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(d.day(), 14);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125873,"byte_end":125901,"line_start":351,"line_end":351,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(d.ordinal(), 73); // day of year","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125906,"byte_end":125953,"line_start":352,"line_end":352,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":125958,"byte_end":126000,"line_start":353,"line_end":353,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(d.iso_week().week(), 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126005,"byte_end":126045,"line_start":354,"line_end":354,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(d.weekday(), Weekday::Sat);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126050,"byte_end":126092,"line_start":355,"line_end":355,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126097,"byte_end":126105,"line_start":356,"line_end":356,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126110,"byte_end":126113,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ While not directly supported by Chrono,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126118,"byte_end":126161,"line_start":358,"line_end":358,"column_start":5,"column_end":48}},{"value":"/ it is easy to convert from the Julian day number","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126166,"byte_end":126218,"line_start":359,"line_end":359,"column_start":5,"column_end":57}},{"value":"/ (January 1, 4713 BCE in the *Julian* calendar being Day 0)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126223,"byte_end":126285,"line_start":360,"line_end":360,"column_start":5,"column_end":67}},{"value":"/ to Gregorian with this method.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126290,"byte_end":126324,"line_start":361,"line_end":361,"column_start":5,"column_end":39}},{"value":"/ (Note that this panics when `jd` is out of range.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126329,"byte_end":126383,"line_start":362,"line_end":362,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126388,"byte_end":126391,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126396,"byte_end":126404,"line_start":364,"line_end":364,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126409,"byte_end":126435,"line_start":365,"line_end":365,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126440,"byte_end":126443,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ fn jd_to_date(jd: i32) -> NaiveDate {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126448,"byte_end":126489,"line_start":367,"line_end":367,"column_start":5,"column_end":46}},{"value":"/     // keep in mind that the Julian day number is 0-based","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126494,"byte_end":126555,"line_start":368,"line_end":368,"column_start":5,"column_end":66}},{"value":"/     // while this method requires an 1-based number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126560,"byte_end":126616,"line_start":369,"line_end":369,"column_start":5,"column_end":61}},{"value":"/     NaiveDate::from_num_days_from_ce(jd - 1721425)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126621,"byte_end":126675,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126680,"byte_end":126685,"line_start":371,"line_end":371,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126690,"byte_end":126693,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ // January 1, 4713 BCE in Julian = November 24, 4714 BCE in Gregorian","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126698,"byte_end":126771,"line_start":373,"line_end":373,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(jd_to_date(0), NaiveDate::from_ymd(-4713, 11, 24));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126776,"byte_end":126842,"line_start":374,"line_end":374,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126847,"byte_end":126850,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(jd_to_date(1721426), NaiveDate::from_ymd(1, 1, 1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126855,"byte_end":126921,"line_start":376,"line_end":376,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(jd_to_date(2450000), NaiveDate::from_ymd(1995, 10, 9));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":126926,"byte_end":126996,"line_start":377,"line_end":377,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(jd_to_date(2451545), NaiveDate::from_ymd(2000, 1, 1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127001,"byte_end":127070,"line_start":378,"line_end":378,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127075,"byte_end":127083,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127088,"byte_end":127097,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128079,"byte_end":128104,"line_start":405,"line_end":405,"column_start":12,"column_end":37},"name":"from_num_days_from_ce_opt","qualname":"<NaiveDate>::from_num_days_from_ce_opt","value":"pub fn from_num_days_from_ce_opt(i32) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with\n January 1, 1 being day 1.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` from a day's number in the proleptic Gregorian calendar, with","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127247,"byte_end":127336,"line_start":385,"line_end":385,"column_start":5,"column_end":94}},{"value":"/ January 1, 1 being day 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127341,"byte_end":127370,"line_start":386,"line_end":386,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127375,"byte_end":127378,"line_start":387,"line_end":387,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the date is out of range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127383,"byte_end":127430,"line_start":388,"line_end":388,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127435,"byte_end":127438,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127443,"byte_end":127456,"line_start":390,"line_end":390,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127461,"byte_end":127464,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127469,"byte_end":127477,"line_start":392,"line_end":392,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127482,"byte_end":127508,"line_start":393,"line_end":393,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127513,"byte_end":127516,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ let from_ndays_opt = NaiveDate::from_num_days_from_ce_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127521,"byte_end":127583,"line_start":395,"line_end":395,"column_start":5,"column_end":67}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127588,"byte_end":127627,"line_start":396,"line_end":396,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127632,"byte_end":127635,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_ndays_opt(730_000),      Some(from_ymd(1999, 9, 3)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127640,"byte_end":127713,"line_start":398,"line_end":398,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(from_ndays_opt(1),            Some(from_ymd(1, 1, 1)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127718,"byte_end":127788,"line_start":399,"line_end":399,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ndays_opt(0),            Some(from_ymd(0, 12, 31)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127793,"byte_end":127865,"line_start":400,"line_end":400,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(-1),           Some(from_ymd(0, 12, 30)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127870,"byte_end":127942,"line_start":401,"line_end":401,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(from_ndays_opt(100_000_000),  None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":127947,"byte_end":127998,"line_start":402,"line_end":402,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(from_ndays_opt(-100_000_000), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128003,"byte_end":128054,"line_start":403,"line_end":403,"column_start":5,"column_end":56}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128059,"byte_end":128067,"line_start":404,"line_end":404,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130126,"byte_end":130140,"line_start":456,"line_end":456,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDate>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDate`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDate`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128557,"byte_end":128640,"line_start":414,"line_end":414,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128645,"byte_end":128715,"line_start":415,"line_end":415,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128720,"byte_end":128758,"line_start":416,"line_end":416,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128763,"byte_end":128766,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128771,"byte_end":128784,"line_start":418,"line_end":418,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128789,"byte_end":128792,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128797,"byte_end":128805,"line_start":420,"line_end":420,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128810,"byte_end":128836,"line_start":421,"line_end":421,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128841,"byte_end":128844,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128849,"byte_end":128900,"line_start":423,"line_end":423,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128905,"byte_end":128908,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05\", \"%Y-%m-%d\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128913,"byte_end":128969,"line_start":425,"line_end":425,"column_start":5,"column_end":61}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":128974,"byte_end":129026,"line_start":426,"line_end":426,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015\", \"%d%b%Y\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129031,"byte_end":129083,"line_start":427,"line_end":427,"column_start":5,"column_end":57}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129088,"byte_end":129140,"line_start":428,"line_end":428,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129145,"byte_end":129153,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129158,"byte_end":129161,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ Time and offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129166,"byte_end":129224,"line_start":431,"line_end":431,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129229,"byte_end":129232,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129237,"byte_end":129245,"line_start":433,"line_end":433,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129250,"byte_end":129278,"line_start":434,"line_end":434,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129283,"byte_end":129336,"line_start":435,"line_end":435,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129341,"byte_end":129422,"line_start":436,"line_end":436,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129427,"byte_end":129480,"line_start":437,"line_end":437,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129485,"byte_end":129493,"line_start":438,"line_end":438,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129498,"byte_end":129501,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ Out-of-bound dates or insufficient fields are errors.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129506,"byte_end":129563,"line_start":440,"line_end":440,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129568,"byte_end":129571,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129576,"byte_end":129584,"line_start":442,"line_end":442,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129589,"byte_end":129617,"line_start":443,"line_end":443,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129622,"byte_end":129675,"line_start":444,"line_end":444,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"2015/9\", \"%Y/%m\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129680,"byte_end":129736,"line_start":445,"line_end":445,"column_start":5,"column_end":61}},{"value":"/ assert!(parse_from_str(\"2015/9/31\", \"%Y/%m/%d\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129741,"byte_end":129803,"line_start":446,"line_end":446,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129808,"byte_end":129816,"line_start":447,"line_end":447,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129821,"byte_end":129824,"line_start":448,"line_end":448,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129829,"byte_end":129911,"line_start":449,"line_end":449,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129916,"byte_end":129919,"line_start":450,"line_end":450,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129924,"byte_end":129932,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129937,"byte_end":129965,"line_start":452,"line_end":452,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveDate::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":129970,"byte_end":130023,"line_start":453,"line_end":453,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"Sat, 09 Aug 2013\", \"%a, %d %b %Y\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130028,"byte_end":130101,"line_start":454,"line_end":454,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130106,"byte_end":130114,"line_start":455,"line_end":455,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130789,"byte_end":130797,"line_start":477,"line_end":477,"column_start":12,"column_end":20},"name":"and_time","qualname":"<NaiveDate>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130328,"byte_end":130404,"line_start":462,"line_end":462,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130409,"byte_end":130412,"line_start":463,"line_end":463,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130417,"byte_end":130430,"line_start":464,"line_end":464,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130435,"byte_end":130438,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130443,"byte_end":130451,"line_start":466,"line_end":466,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130456,"byte_end":130510,"line_start":467,"line_end":467,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130515,"byte_end":130518,"line_start":468,"line_end":468,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130523,"byte_end":130567,"line_start":469,"line_end":469,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130572,"byte_end":130627,"line_start":470,"line_end":470,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130632,"byte_end":130635,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_time(t);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130640,"byte_end":130682,"line_start":472,"line_end":472,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130687,"byte_end":130716,"line_start":473,"line_end":473,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130721,"byte_end":130750,"line_start":474,"line_end":474,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130755,"byte_end":130763,"line_start":475,"line_end":475,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130768,"byte_end":130777,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131613,"byte_end":131620,"line_start":501,"line_end":501,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<NaiveDate>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130892,"byte_end":130971,"line_start":481,"line_end":481,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130976,"byte_end":130979,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":130984,"byte_end":131067,"line_start":483,"line_end":483,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131072,"byte_end":131146,"line_start":484,"line_end":484,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131151,"byte_end":131154,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131159,"byte_end":131208,"line_start":486,"line_end":486,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131213,"byte_end":131216,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131221,"byte_end":131234,"line_start":488,"line_end":488,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131239,"byte_end":131242,"line_start":489,"line_end":489,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131247,"byte_end":131255,"line_start":490,"line_end":490,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131260,"byte_end":131332,"line_start":491,"line_end":491,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131337,"byte_end":131340,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131345,"byte_end":131389,"line_start":493,"line_end":493,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131394,"byte_end":131397,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms(12, 34, 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131402,"byte_end":131452,"line_start":495,"line_end":495,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131457,"byte_end":131489,"line_start":496,"line_end":496,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131494,"byte_end":131537,"line_start":497,"line_end":497,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131542,"byte_end":131574,"line_start":498,"line_end":498,"column_start":5,"column_end":37}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131579,"byte_end":131587,"line_start":499,"line_end":499,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131592,"byte_end":131601,"line_start":500,"line_end":500,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":385},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132506,"byte_end":132517,"line_start":524,"line_end":524,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<NaiveDate>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131753,"byte_end":131832,"line_start":505,"line_end":505,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131837,"byte_end":131840,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ No [leap second](./struct.NaiveTime.html#leap-second-handling) is allowed here;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131845,"byte_end":131928,"line_start":507,"line_end":507,"column_start":5,"column_end":88}},{"value":"/ use `NaiveDate::and_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":131933,"byte_end":132011,"line_start":508,"line_end":508,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132016,"byte_end":132019,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132024,"byte_end":132081,"line_start":510,"line_end":510,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132086,"byte_end":132089,"line_start":511,"line_end":511,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132094,"byte_end":132107,"line_start":512,"line_end":512,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132112,"byte_end":132115,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132120,"byte_end":132128,"line_start":514,"line_end":514,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132133,"byte_end":132159,"line_start":515,"line_end":515,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132164,"byte_end":132167,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132172,"byte_end":132216,"line_start":517,"line_end":517,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_opt(12, 34, 56).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132221,"byte_end":132270,"line_start":518,"line_end":518,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(12, 34, 60).is_none()); // use `and_hms_milli_opt` instead","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132275,"byte_end":132359,"line_start":519,"line_end":519,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_opt(12, 60, 56).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132364,"byte_end":132413,"line_start":520,"line_end":520,"column_start":5,"column_end":54}},{"value":"/ assert!(d.and_hms_opt(24, 34, 56).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132418,"byte_end":132467,"line_start":521,"line_end":521,"column_start":5,"column_end":54}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132472,"byte_end":132480,"line_start":522,"line_end":522,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132485,"byte_end":132494,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":387},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133456,"byte_end":133469,"line_start":549,"line_end":549,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<NaiveDate>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132674,"byte_end":132766,"line_start":528,"line_end":528,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132771,"byte_end":132774,"line_start":529,"line_end":529,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132779,"byte_end":132820,"line_start":530,"line_end":530,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132825,"byte_end":132915,"line_start":531,"line_end":531,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132920,"byte_end":132923,"line_start":532,"line_end":532,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132928,"byte_end":132990,"line_start":533,"line_end":533,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":132995,"byte_end":132998,"line_start":534,"line_end":534,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133003,"byte_end":133016,"line_start":535,"line_end":535,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133021,"byte_end":133024,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133029,"byte_end":133037,"line_start":537,"line_end":537,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133042,"byte_end":133114,"line_start":538,"line_end":538,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133119,"byte_end":133122,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133127,"byte_end":133171,"line_start":540,"line_end":540,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133176,"byte_end":133179,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133184,"byte_end":133245,"line_start":542,"line_end":542,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133250,"byte_end":133282,"line_start":543,"line_end":543,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133287,"byte_end":133330,"line_start":544,"line_end":544,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133335,"byte_end":133367,"line_start":545,"line_end":545,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133372,"byte_end":133417,"line_start":546,"line_end":546,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133422,"byte_end":133430,"line_start":547,"line_end":547,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133435,"byte_end":133444,"line_start":548,"line_end":548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134542,"byte_end":134559,"line_start":574,"line_end":574,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<NaiveDate>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133627,"byte_end":133719,"line_start":553,"line_end":553,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133724,"byte_end":133727,"line_start":554,"line_end":554,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133732,"byte_end":133773,"line_start":555,"line_end":555,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133778,"byte_end":133868,"line_start":556,"line_end":556,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133873,"byte_end":133876,"line_start":557,"line_end":557,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133881,"byte_end":133951,"line_start":558,"line_end":558,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133956,"byte_end":133959,"line_start":559,"line_end":559,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133964,"byte_end":133977,"line_start":560,"line_end":560,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133982,"byte_end":133985,"line_start":561,"line_end":561,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":133990,"byte_end":133998,"line_start":562,"line_end":562,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134003,"byte_end":134029,"line_start":563,"line_end":563,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134034,"byte_end":134037,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134042,"byte_end":134086,"line_start":565,"line_end":565,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 56,   789).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134091,"byte_end":134153,"line_start":566,"line_end":566,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 1_789).is_some()); // leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134158,"byte_end":134235,"line_start":567,"line_end":567,"column_start":5,"column_end":82}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 59, 2_789).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134240,"byte_end":134302,"line_start":568,"line_end":568,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 34, 60,   789).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134307,"byte_end":134369,"line_start":569,"line_end":569,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(12, 60, 56,   789).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134374,"byte_end":134436,"line_start":570,"line_end":570,"column_start":5,"column_end":67}},{"value":"/ assert!(d.and_hms_milli_opt(24, 34, 56,   789).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134441,"byte_end":134503,"line_start":571,"line_end":571,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134508,"byte_end":134516,"line_start":572,"line_end":572,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134521,"byte_end":134530,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135560,"byte_end":135573,"line_start":600,"line_end":600,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<NaiveDate>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134770,"byte_end":134862,"line_start":579,"line_end":579,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134867,"byte_end":134870,"line_start":580,"line_end":580,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134875,"byte_end":134920,"line_start":581,"line_end":581,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":134925,"byte_end":135015,"line_start":582,"line_end":582,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135020,"byte_end":135023,"line_start":583,"line_end":583,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135028,"byte_end":135090,"line_start":584,"line_end":584,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135095,"byte_end":135098,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135103,"byte_end":135116,"line_start":586,"line_end":586,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135121,"byte_end":135124,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135129,"byte_end":135137,"line_start":588,"line_end":588,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135142,"byte_end":135214,"line_start":589,"line_end":589,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135219,"byte_end":135222,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135227,"byte_end":135271,"line_start":591,"line_end":591,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135276,"byte_end":135279,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_micro(12, 34, 56, 789_012);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135284,"byte_end":135349,"line_start":593,"line_end":593,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135354,"byte_end":135386,"line_start":594,"line_end":594,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135391,"byte_end":135434,"line_start":595,"line_end":595,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135439,"byte_end":135471,"line_start":596,"line_end":596,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135476,"byte_end":135521,"line_start":597,"line_end":597,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135526,"byte_end":135534,"line_start":598,"line_end":598,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135539,"byte_end":135548,"line_start":599,"line_end":599,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":391},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136674,"byte_end":136691,"line_start":625,"line_end":625,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<NaiveDate>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135731,"byte_end":135823,"line_start":604,"line_end":604,"column_start":5,"column_end":97}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135828,"byte_end":135831,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135836,"byte_end":135881,"line_start":606,"line_end":606,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135886,"byte_end":135976,"line_start":607,"line_end":607,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135981,"byte_end":135984,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":135989,"byte_end":136059,"line_start":609,"line_end":609,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136064,"byte_end":136067,"line_start":610,"line_end":610,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136072,"byte_end":136085,"line_start":611,"line_end":611,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136090,"byte_end":136093,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136098,"byte_end":136106,"line_start":613,"line_end":613,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136111,"byte_end":136137,"line_start":614,"line_end":614,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136142,"byte_end":136145,"line_start":615,"line_end":615,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136150,"byte_end":136194,"line_start":616,"line_end":616,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 56,   789_012).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136199,"byte_end":136265,"line_start":617,"line_end":617,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 1_789_012).is_some()); // leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136270,"byte_end":136351,"line_start":618,"line_end":618,"column_start":5,"column_end":86}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 59, 2_789_012).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136356,"byte_end":136422,"line_start":619,"line_end":619,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 34, 60,   789_012).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136427,"byte_end":136493,"line_start":620,"line_end":620,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(12, 60, 56,   789_012).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136498,"byte_end":136564,"line_start":621,"line_end":621,"column_start":5,"column_end":71}},{"value":"/ assert!(d.and_hms_micro_opt(24, 34, 56,   789_012).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136569,"byte_end":136635,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136640,"byte_end":136648,"line_start":623,"line_end":623,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136653,"byte_end":136662,"line_start":624,"line_end":624,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":393},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137696,"byte_end":137708,"line_start":651,"line_end":651,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<NaiveDate>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136902,"byte_end":136993,"line_start":630,"line_end":630,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":136998,"byte_end":137001,"line_start":631,"line_end":631,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137006,"byte_end":137054,"line_start":632,"line_end":632,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137059,"byte_end":137149,"line_start":633,"line_end":633,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137154,"byte_end":137157,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137162,"byte_end":137223,"line_start":635,"line_end":635,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137228,"byte_end":137231,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137236,"byte_end":137249,"line_start":637,"line_end":637,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137254,"byte_end":137257,"line_start":638,"line_end":638,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137262,"byte_end":137270,"line_start":639,"line_end":639,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime, Datelike, Timelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137275,"byte_end":137347,"line_start":640,"line_end":640,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137352,"byte_end":137355,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137360,"byte_end":137404,"line_start":642,"line_end":642,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137409,"byte_end":137412,"line_start":643,"line_end":643,"column_start":5,"column_end":8}},{"value":"/ let dt: NaiveDateTime = d.and_hms_nano(12, 34, 56, 789_012_345);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137417,"byte_end":137485,"line_start":644,"line_end":644,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137490,"byte_end":137522,"line_start":645,"line_end":645,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Wed);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137527,"byte_end":137570,"line_start":646,"line_end":646,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.second(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137575,"byte_end":137607,"line_start":647,"line_end":647,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(dt.nanosecond(), 789_012_345);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137612,"byte_end":137657,"line_start":648,"line_end":648,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137662,"byte_end":137670,"line_start":649,"line_end":649,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137675,"byte_end":137684,"line_start":650,"line_end":650,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138825,"byte_end":138841,"line_start":676,"line_end":676,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<NaiveDate>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137863,"byte_end":137954,"line_start":655,"line_end":655,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137959,"byte_end":137962,"line_start":656,"line_end":656,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":137967,"byte_end":138015,"line_start":657,"line_end":657,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138020,"byte_end":138110,"line_start":658,"line_end":658,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138115,"byte_end":138118,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138123,"byte_end":138192,"line_start":660,"line_end":660,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138197,"byte_end":138200,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138205,"byte_end":138218,"line_start":662,"line_end":662,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138223,"byte_end":138226,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138231,"byte_end":138239,"line_start":664,"line_end":664,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138244,"byte_end":138270,"line_start":665,"line_end":665,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138275,"byte_end":138278,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138283,"byte_end":138327,"line_start":667,"line_end":667,"column_start":5,"column_end":49}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 56,   789_012_345).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138332,"byte_end":138401,"line_start":668,"line_end":668,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 1_789_012_345).is_some()); // leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138406,"byte_end":138490,"line_start":669,"line_end":669,"column_start":5,"column_end":89}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 59, 2_789_012_345).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138495,"byte_end":138564,"line_start":670,"line_end":670,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 34, 60,   789_012_345).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138569,"byte_end":138638,"line_start":671,"line_end":671,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(12, 60, 56,   789_012_345).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138643,"byte_end":138712,"line_start":672,"line_end":672,"column_start":5,"column_end":74}},{"value":"/ assert!(d.and_hms_nano_opt(24, 34, 56,   789_012_345).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138717,"byte_end":138786,"line_start":673,"line_end":673,"column_start":5,"column_end":74}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138791,"byte_end":138799,"line_start":674,"line_end":674,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":138804,"byte_end":138813,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140514,"byte_end":140518,"line_start":728,"line_end":728,"column_start":12,"column_end":16},"name":"succ","qualname":"<NaiveDate>::succ","value":"pub fn succ(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":139982,"byte_end":140037,"line_start":714,"line_end":714,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140042,"byte_end":140045,"line_start":715,"line_end":715,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140050,"byte_end":140104,"line_start":716,"line_end":716,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140109,"byte_end":140112,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140117,"byte_end":140130,"line_start":718,"line_end":718,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140135,"byte_end":140138,"line_start":719,"line_end":719,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140143,"byte_end":140151,"line_start":720,"line_end":720,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140156,"byte_end":140182,"line_start":721,"line_end":721,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140187,"byte_end":140190,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6,  3).succ(), NaiveDate::from_ymd(2015, 6, 4));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140195,"byte_end":140285,"line_start":723,"line_end":723,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015,  6, 30).succ(), NaiveDate::from_ymd(2015, 7, 1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140290,"byte_end":140380,"line_start":724,"line_end":724,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 12, 31).succ(), NaiveDate::from_ymd(2016, 1, 1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140385,"byte_end":140475,"line_start":725,"line_end":725,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140480,"byte_end":140488,"line_start":726,"line_end":726,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140493,"byte_end":140502,"line_start":727,"line_end":727,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141060,"byte_end":141068,"line_start":747,"line_end":747,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<NaiveDate>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the next calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the next calendar date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140599,"byte_end":140654,"line_start":732,"line_end":732,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140659,"byte_end":140662,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140667,"byte_end":140729,"line_start":734,"line_end":734,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140734,"byte_end":140737,"line_start":735,"line_end":735,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140742,"byte_end":140755,"line_start":736,"line_end":736,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140760,"byte_end":140763,"line_start":737,"line_end":737,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140768,"byte_end":140776,"line_start":738,"line_end":738,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140781,"byte_end":140807,"line_start":739,"line_end":739,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140812,"byte_end":140844,"line_start":740,"line_end":740,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140849,"byte_end":140852,"line_start":741,"line_end":741,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).succ_opt(),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140857,"byte_end":140915,"line_start":742,"line_end":742,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 4)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140920,"byte_end":140974,"line_start":743,"line_end":743,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MAX_DATE.succ_opt(), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":140979,"byte_end":141021,"line_start":744,"line_end":744,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141026,"byte_end":141034,"line_start":745,"line_end":745,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141039,"byte_end":141048,"line_start":746,"line_end":746,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":403},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141745,"byte_end":141749,"line_start":765,"line_end":765,"column_start":12,"column_end":16},"name":"pred","qualname":"<NaiveDate>::pred","value":"pub fn pred(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141208,"byte_end":141267,"line_start":751,"line_end":751,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141272,"byte_end":141275,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141280,"byte_end":141335,"line_start":753,"line_end":753,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141340,"byte_end":141343,"line_start":754,"line_end":754,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141348,"byte_end":141361,"line_start":755,"line_end":755,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141366,"byte_end":141369,"line_start":756,"line_end":756,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141374,"byte_end":141382,"line_start":757,"line_end":757,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141387,"byte_end":141413,"line_start":758,"line_end":758,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141418,"byte_end":141421,"line_start":759,"line_end":759,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred(), NaiveDate::from_ymd(2015,  6,  2));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141426,"byte_end":141516,"line_start":760,"line_end":760,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 1).pred(), NaiveDate::from_ymd(2015,  5, 31));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141521,"byte_end":141611,"line_start":761,"line_end":761,"column_start":5,"column_end":95}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 1, 1).pred(), NaiveDate::from_ymd(2014, 12, 31));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141616,"byte_end":141706,"line_start":762,"line_end":762,"column_start":5,"column_end":95}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141711,"byte_end":141719,"line_start":763,"line_end":763,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141724,"byte_end":141733,"line_start":764,"line_end":764,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142296,"byte_end":142304,"line_start":784,"line_end":784,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<NaiveDate>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDate` for the previous calendar date.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDate` for the previous calendar date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141830,"byte_end":141889,"line_start":769,"line_end":769,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141894,"byte_end":141897,"line_start":770,"line_end":770,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141902,"byte_end":141965,"line_start":771,"line_end":771,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141970,"byte_end":141973,"line_start":772,"line_end":772,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141978,"byte_end":141991,"line_start":773,"line_end":773,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":141996,"byte_end":141999,"line_start":774,"line_end":774,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142004,"byte_end":142012,"line_start":775,"line_end":775,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142017,"byte_end":142043,"line_start":776,"line_end":776,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142048,"byte_end":142080,"line_start":777,"line_end":777,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142085,"byte_end":142088,"line_start":778,"line_end":778,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2015, 6, 3).pred_opt(),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142093,"byte_end":142151,"line_start":779,"line_end":779,"column_start":5,"column_end":63}},{"value":"/            Some(NaiveDate::from_ymd(2015, 6, 2)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142156,"byte_end":142210,"line_start":780,"line_end":780,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(MIN_DATE.pred_opt(), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142215,"byte_end":142257,"line_start":781,"line_end":781,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142262,"byte_end":142270,"line_start":782,"line_end":782,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142275,"byte_end":142284,"line_start":783,"line_end":783,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143351,"byte_end":143369,"line_start":810,"line_end":810,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDate>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Adds the `days` part of given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds the `days` part of given `Duration` to the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142446,"byte_end":142511,"line_start":788,"line_end":788,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142516,"byte_end":142519,"line_start":789,"line_end":789,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142524,"byte_end":142575,"line_start":790,"line_end":790,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142580,"byte_end":142583,"line_start":791,"line_end":791,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142588,"byte_end":142601,"line_start":792,"line_end":792,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142606,"byte_end":142609,"line_start":793,"line_end":793,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142614,"byte_end":142622,"line_start":794,"line_end":794,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142627,"byte_end":142684,"line_start":795,"line_end":795,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142689,"byte_end":142715,"line_start":796,"line_end":796,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MAX_DATE;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142720,"byte_end":142752,"line_start":797,"line_end":797,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142757,"byte_end":142780,"line_start":798,"line_end":798,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142785,"byte_end":142788,"line_start":799,"line_end":799,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142793,"byte_end":142837,"line_start":800,"line_end":800,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(40)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142842,"byte_end":142898,"line_start":801,"line_end":801,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142903,"byte_end":142959,"line_start":802,"line_end":802,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-40)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":142964,"byte_end":143021,"line_start":803,"line_end":803,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143026,"byte_end":143081,"line_start":804,"line_end":804,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143086,"byte_end":143160,"line_start":805,"line_end":805,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_add_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143165,"byte_end":143240,"line_start":806,"line_end":806,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MAX_DATE.checked_add_signed(Duration::days(1)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143245,"byte_end":143314,"line_start":807,"line_end":807,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143319,"byte_end":143326,"line_start":808,"line_end":808,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":143331,"byte_end":143339,"line_start":809,"line_end":809,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145002,"byte_end":145020,"line_start":846,"line_end":846,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDate>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts the `days` part of given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts the `days` part of given `Duration` from the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144090,"byte_end":144162,"line_start":824,"line_end":824,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144167,"byte_end":144170,"line_start":825,"line_end":825,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144175,"byte_end":144226,"line_start":826,"line_end":826,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144231,"byte_end":144234,"line_start":827,"line_end":827,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144239,"byte_end":144252,"line_start":828,"line_end":828,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144257,"byte_end":144260,"line_start":829,"line_end":829,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144265,"byte_end":144273,"line_start":830,"line_end":830,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144278,"byte_end":144335,"line_start":831,"line_end":831,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144340,"byte_end":144366,"line_start":832,"line_end":832,"column_start":5,"column_end":31}},{"value":"/ use chrono::naive::MIN_DATE;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144371,"byte_end":144403,"line_start":833,"line_end":833,"column_start":5,"column_end":37}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144408,"byte_end":144431,"line_start":834,"line_end":834,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144436,"byte_end":144439,"line_start":835,"line_end":835,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144444,"byte_end":144488,"line_start":836,"line_end":836,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(40)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144493,"byte_end":144549,"line_start":837,"line_end":837,"column_start":5,"column_end":61}},{"value":"/            Some(NaiveDate::from_ymd(2015, 7, 27)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144554,"byte_end":144609,"line_start":838,"line_end":838,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-40)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144614,"byte_end":144671,"line_start":839,"line_end":839,"column_start":5,"column_end":62}},{"value":"/            Some(NaiveDate::from_ymd(2015, 10, 15)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144676,"byte_end":144732,"line_start":840,"line_end":840,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144737,"byte_end":144811,"line_start":841,"line_end":841,"column_start":5,"column_end":79}},{"value":"/ assert_eq!(d.checked_sub_signed(Duration::days(-1_000_000_000)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144816,"byte_end":144891,"line_start":842,"line_end":842,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(MIN_DATE.checked_sub_signed(Duration::days(1)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144896,"byte_end":144965,"line_start":843,"line_end":843,"column_start":5,"column_end":74}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144970,"byte_end":144977,"line_start":844,"line_end":844,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":144982,"byte_end":144990,"line_start":845,"line_end":845,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146946,"byte_end":146967,"line_start":885,"line_end":885,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDate>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDate) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDate` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDate` from the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145741,"byte_end":145797,"line_start":860,"line_end":860,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145802,"byte_end":145847,"line_start":861,"line_end":861,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145852,"byte_end":145855,"line_start":862,"line_end":862,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145860,"byte_end":145907,"line_start":863,"line_end":863,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145912,"byte_end":145971,"line_start":864,"line_end":864,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145976,"byte_end":145979,"line_start":865,"line_end":865,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":145984,"byte_end":145997,"line_start":866,"line_end":866,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146002,"byte_end":146005,"line_start":867,"line_end":867,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146010,"byte_end":146018,"line_start":868,"line_end":868,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146023,"byte_end":146080,"line_start":869,"line_end":869,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146085,"byte_end":146111,"line_start":870,"line_end":870,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146116,"byte_end":146139,"line_start":871,"line_end":871,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146144,"byte_end":146147,"line_start":872,"line_end":872,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146152,"byte_end":146191,"line_start":873,"line_end":873,"column_start":5,"column_end":44}},{"value":"/ let since = NaiveDate::signed_duration_since;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146196,"byte_end":146245,"line_start":874,"line_end":874,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146250,"byte_end":146253,"line_start":875,"line_end":875,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 1)), Duration::zero());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146258,"byte_end":146342,"line_start":876,"line_end":876,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 12, 31)), Duration::days(1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146347,"byte_end":146434,"line_start":877,"line_end":877,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2014, 1, 2)), Duration::days(-1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146439,"byte_end":146525,"line_start":878,"line_end":878,"column_start":5,"column_end":91}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 9, 23)), Duration::days(100));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146530,"byte_end":146618,"line_start":879,"line_end":879,"column_start":5,"column_end":93}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2013, 1, 1)), Duration::days(365));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146623,"byte_end":146710,"line_start":880,"line_end":880,"column_start":5,"column_end":92}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(2010, 1, 1)), Duration::days(365*4 + 1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146715,"byte_end":146808,"line_start":881,"line_end":881,"column_start":5,"column_end":98}},{"value":"/ assert_eq!(since(from_ymd(2014, 1, 1), from_ymd(1614, 1, 1)), Duration::days(365*400 + 97));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146813,"byte_end":146909,"line_start":882,"line_end":882,"column_start":5,"column_end":101}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146914,"byte_end":146921,"line_start":883,"line_end":883,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":146926,"byte_end":146934,"line_start":884,"line_end":884,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148726,"byte_end":148743,"line_start":925,"line_end":925,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDate>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n Otherwise it is same to the ordinary `format` method.","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147561,"byte_end":147618,"line_start":896,"line_end":896,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary `format` method.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147623,"byte_end":147680,"line_start":897,"line_end":897,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147685,"byte_end":147688,"line_start":898,"line_end":898,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147693,"byte_end":147743,"line_start":899,"line_end":899,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147748,"byte_end":147826,"line_start":900,"line_end":900,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147831,"byte_end":147834,"line_start":901,"line_end":901,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147839,"byte_end":147852,"line_start":902,"line_end":902,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147857,"byte_end":147860,"line_start":903,"line_end":903,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147865,"byte_end":147873,"line_start":904,"line_end":904,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147878,"byte_end":147904,"line_start":905,"line_end":905,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147909,"byte_end":147957,"line_start":906,"line_end":906,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147962,"byte_end":147965,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":147970,"byte_end":148015,"line_start":908,"line_end":908,"column_start":5,"column_end":50}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148020,"byte_end":148064,"line_start":909,"line_end":909,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format_with_items(fmt.clone()).to_string(), \"2015-09-05\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148069,"byte_end":148144,"line_start":910,"line_end":910,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(),             \"2015-09-05\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148149,"byte_end":148224,"line_start":911,"line_end":911,"column_start":5,"column_end":80}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148229,"byte_end":148237,"line_start":912,"line_end":912,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148242,"byte_end":148245,"line_start":913,"line_end":913,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148250,"byte_end":148334,"line_start":914,"line_end":914,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148339,"byte_end":148342,"line_start":915,"line_end":915,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148347,"byte_end":148355,"line_start":916,"line_end":916,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148360,"byte_end":148388,"line_start":917,"line_end":917,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148393,"byte_end":148443,"line_start":918,"line_end":918,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d\").clone();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148448,"byte_end":148503,"line_start":919,"line_end":919,"column_start":5,"column_end":60}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148508,"byte_end":148554,"line_start":920,"line_end":920,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format_with_items(fmt)), \"2015-09-05\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148559,"byte_end":148629,"line_start":921,"line_end":921,"column_start":5,"column_end":75}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148634,"byte_end":148642,"line_start":922,"line_end":922,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148647,"byte_end":148700,"line_start":923,"line_end":923,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148705,"byte_end":148714,"line_start":924,"line_end":924,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":413},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150416,"byte_end":150422,"line_start":964,"line_end":964,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDate>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148924,"byte_end":148978,"line_start":930,"line_end":930,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":148983,"byte_end":149053,"line_start":931,"line_end":931,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149058,"byte_end":149096,"line_start":932,"line_end":932,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149101,"byte_end":149104,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149109,"byte_end":149144,"line_start":934,"line_end":934,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149149,"byte_end":149222,"line_start":935,"line_end":935,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149227,"byte_end":149284,"line_start":936,"line_end":936,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149289,"byte_end":149351,"line_start":937,"line_end":937,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149356,"byte_end":149416,"line_start":938,"line_end":938,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149421,"byte_end":149424,"line_start":939,"line_end":939,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149429,"byte_end":149493,"line_start":940,"line_end":940,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149498,"byte_end":149561,"line_start":941,"line_end":941,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149566,"byte_end":149641,"line_start":942,"line_end":942,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149646,"byte_end":149649,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149654,"byte_end":149667,"line_start":944,"line_end":944,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149672,"byte_end":149675,"line_start":945,"line_end":945,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149680,"byte_end":149688,"line_start":946,"line_end":946,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149693,"byte_end":149719,"line_start":947,"line_end":947,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149724,"byte_end":149727,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149732,"byte_end":149776,"line_start":949,"line_end":949,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(d.format(\"%Y-%m-%d\").to_string(), \"2015-09-05\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149781,"byte_end":149844,"line_start":950,"line_end":950,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(d.format(\"%A, %-d %B, %C%y\").to_string(), \"Saturday, 5 September, 2015\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149849,"byte_end":149937,"line_start":951,"line_end":951,"column_start":5,"column_end":93}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149942,"byte_end":149950,"line_start":952,"line_end":952,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149955,"byte_end":149958,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":149963,"byte_end":150047,"line_start":954,"line_end":954,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150052,"byte_end":150055,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150060,"byte_end":150068,"line_start":956,"line_end":956,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150073,"byte_end":150101,"line_start":957,"line_end":957,"column_start":5,"column_end":33}},{"value":"/ # let d = NaiveDate::from_ymd(2015, 9, 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150106,"byte_end":150152,"line_start":958,"line_end":958,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%Y-%m-%d\")), \"2015-09-05\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150157,"byte_end":150223,"line_start":959,"line_end":959,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", d.format(\"%A, %-d %B, %C%y\")), \"Saturday, 5 September, 2015\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150228,"byte_end":150319,"line_start":960,"line_end":960,"column_start":5,"column_end":96}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150324,"byte_end":150332,"line_start":961,"line_end":961,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150337,"byte_end":150390,"line_start":962,"line_end":962,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150395,"byte_end":150404,"line_start":963,"line_end":963,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1500},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196485,"byte_end":196492,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"IsoWeek","qualname":"::naive::isoweek::IsoWeek","value":"IsoWeek {  }","parent":null,"children":[{"krate":0,"index":1501}],"decl_id":null,"docs":" ISO 8601 week.","sig":null,"attributes":[{"value":"/ ISO 8601 week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196079,"byte_end":196097,"line_start":10,"line_end":10,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196098,"byte_end":196101,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ This type, combined with [`Weekday`](../enum.Weekday.html),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196102,"byte_end":196165,"line_start":12,"line_end":12,"column_start":1,"column_end":64}},{"value":"/ constitues the ISO 8601 [week date](./struct.NaiveDate.html#week-date).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196166,"byte_end":196241,"line_start":13,"line_end":13,"column_start":1,"column_end":76}},{"value":"/ One can retrieve this type from the existing [`Datelike`](../trait.Datelike.html) types","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196242,"byte_end":196333,"line_start":14,"line_end":14,"column_start":1,"column_end":92}},{"value":"/ via the [`Datelike::iso_week`](../trait.Datelike.html#tymethod.iso_week) method.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":196334,"byte_end":196418,"line_start":15,"line_end":15,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":461},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198430,"byte_end":198434,"line_start":68,"line_end":68,"column_start":12,"column_end":16},"name":"year","qualname":"<IsoWeek>::year","value":"pub fn year(&Self) -> i32","parent":null,"children":[],"decl_id":null,"docs":" Returns the year number for this ISO week.","sig":null,"attributes":[{"value":"/ Returns the year number for this ISO week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197772,"byte_end":197818,"line_start":47,"line_end":47,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197823,"byte_end":197826,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197831,"byte_end":197844,"line_start":49,"line_end":49,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197849,"byte_end":197852,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197857,"byte_end":197865,"line_start":51,"line_end":51,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197870,"byte_end":197917,"line_start":52,"line_end":52,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197922,"byte_end":197925,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197930,"byte_end":197988,"line_start":54,"line_end":54,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(d.iso_week().year(), 2015);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197993,"byte_end":198035,"line_start":55,"line_end":55,"column_start":5,"column_end":47}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198040,"byte_end":198048,"line_start":56,"line_end":56,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198053,"byte_end":198056,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ This year number might not match the calendar year number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198061,"byte_end":198123,"line_start":58,"line_end":58,"column_start":5,"column_end":67}},{"value":"/ Continuing the example...","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198128,"byte_end":198157,"line_start":59,"line_end":59,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198162,"byte_end":198165,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198170,"byte_end":198178,"line_start":61,"line_end":61,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198183,"byte_end":198232,"line_start":62,"line_end":62,"column_start":5,"column_end":54}},{"value":"/ # let d = NaiveDate::from_isoywd(2015, 1, Weekday::Mon);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198237,"byte_end":198297,"line_start":63,"line_end":63,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(d.year(), 2014);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198302,"byte_end":198333,"line_start":64,"line_end":64,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(d, NaiveDate::from_ymd(2014, 12, 29));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198338,"byte_end":198391,"line_start":65,"line_end":65,"column_start":5,"column_end":58}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198396,"byte_end":198404,"line_start":66,"line_end":66,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198409,"byte_end":198418,"line_start":67,"line_end":67,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198884,"byte_end":198888,"line_start":85,"line_end":85,"column_start":12,"column_end":16},"name":"week","qualname":"<IsoWeek>::week","value":"pub fn week(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198485,"byte_end":198533,"line_start":72,"line_end":72,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198538,"byte_end":198541,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 53. (The last week of year differs by years.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198546,"byte_end":198629,"line_start":74,"line_end":74,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198634,"byte_end":198637,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198642,"byte_end":198655,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198660,"byte_end":198663,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198668,"byte_end":198676,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198681,"byte_end":198728,"line_start":79,"line_end":79,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198733,"byte_end":198736,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198741,"byte_end":198800,"line_start":81,"line_end":81,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week(), 15);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198805,"byte_end":198845,"line_start":82,"line_end":82,"column_start":5,"column_end":45}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198850,"byte_end":198858,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198863,"byte_end":198872,"line_start":84,"line_end":84,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":463},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199356,"byte_end":199361,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"week0","qualname":"<IsoWeek>::week0","value":"pub fn week0(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the ISO week number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the ISO week number starting from 0.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":198956,"byte_end":199004,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199009,"byte_end":199012,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 52. (The last week of year differs by years.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199017,"byte_end":199100,"line_start":91,"line_end":91,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199105,"byte_end":199108,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199113,"byte_end":199126,"line_start":93,"line_end":93,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199131,"byte_end":199134,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199139,"byte_end":199147,"line_start":95,"line_end":95,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, Datelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199152,"byte_end":199199,"line_start":96,"line_end":96,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199204,"byte_end":199207,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_isoywd(2015, 15, Weekday::Mon);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199212,"byte_end":199271,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(d.iso_week().week0(), 14);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199276,"byte_end":199317,"line_start":99,"line_end":99,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199322,"byte_end":199330,"line_start":100,"line_end":100,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":199335,"byte_end":199344,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1520},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209121,"byte_end":209130,"line_start":179,"line_end":179,"column_start":12,"column_end":21},"name":"NaiveTime","qualname":"::naive::time::NaiveTime","value":"NaiveTime {  }","parent":null,"children":[{"krate":0,"index":1521},{"krate":0,"index":1522}],"decl_id":null,"docs":" ISO 8601 time without timezone.\n Allows for the nanosecond precision and optional leap second representation.","sig":null,"attributes":[{"value":"/ ISO 8601 time without timezone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":201910,"byte_end":201945,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ Allows for the nanosecond precision and optional leap second representation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":201946,"byte_end":202026,"line_start":20,"line_end":20,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202027,"byte_end":202030,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Leap Second Handling","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202031,"byte_end":202057,"line_start":22,"line_end":22,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202058,"byte_end":202061,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ Since 1960s, the manmade atomic clock has been so accurate that","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202062,"byte_end":202129,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ it is much more accurate than Earth's own motion.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202130,"byte_end":202183,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/ It became desirable to define the civil time in terms of the atomic clock,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202184,"byte_end":202262,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/ but that risks the desynchronization of the civil time from Earth.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202263,"byte_end":202333,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/ To account for this, the designers of the Coordinated Universal Time (UTC)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202334,"byte_end":202412,"line_start":28,"line_end":28,"column_start":1,"column_end":79}},{"value":"/ made that the UTC should be kept within 0.9 seconds of the observed Earth-bound time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202413,"byte_end":202502,"line_start":29,"line_end":29,"column_start":1,"column_end":90}},{"value":"/ When the mean solar day is longer than the ideal (86,400 seconds),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202503,"byte_end":202573,"line_start":30,"line_end":30,"column_start":1,"column_end":71}},{"value":"/ the error slowly accumulates and it is necessary to add a **leap second**","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202574,"byte_end":202651,"line_start":31,"line_end":31,"column_start":1,"column_end":78}},{"value":"/ to slow the UTC down a bit.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202652,"byte_end":202683,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ (We may also remove a second to speed the UTC up a bit, but it never happened.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202684,"byte_end":202767,"line_start":33,"line_end":33,"column_start":1,"column_end":84}},{"value":"/ The leap second, if any, follows 23:59:59 of June 30 or December 31 in the UTC.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202768,"byte_end":202851,"line_start":34,"line_end":34,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202852,"byte_end":202855,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Fast forward to the 21st century,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202856,"byte_end":202893,"line_start":36,"line_end":36,"column_start":1,"column_end":38}},{"value":"/ we have seen 26 leap seconds from January 1972 to December 2015.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202894,"byte_end":202962,"line_start":37,"line_end":37,"column_start":1,"column_end":69}},{"value":"/ Yes, 26 seconds. Probably you can read this paragraph within 26 seconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":202963,"byte_end":203039,"line_start":38,"line_end":38,"column_start":1,"column_end":77}},{"value":"/ But those 26 seconds, and possibly more in the future, are never predictable,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203040,"byte_end":203121,"line_start":39,"line_end":39,"column_start":1,"column_end":82}},{"value":"/ and whether to add a leap second or not is known only before 6 months.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203122,"byte_end":203196,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ Internet-based clocks (via NTP) do account for known leap seconds,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203197,"byte_end":203267,"line_start":41,"line_end":41,"column_start":1,"column_end":71}},{"value":"/ but the system API normally doesn't (and often can't, with no network connection)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203268,"byte_end":203353,"line_start":42,"line_end":42,"column_start":1,"column_end":86}},{"value":"/ and there is no reliable way to retrieve leap second information.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203354,"byte_end":203423,"line_start":43,"line_end":43,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203424,"byte_end":203427,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Chrono does not try to accurately implement leap seconds; it is impossible.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203428,"byte_end":203507,"line_start":45,"line_end":45,"column_start":1,"column_end":80}},{"value":"/ Rather, **it allows for leap seconds but behaves as if there are *no other* leap seconds.**","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203508,"byte_end":203603,"line_start":46,"line_end":46,"column_start":1,"column_end":96}},{"value":"/ Various operations will ignore any possible leap second(s)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203604,"byte_end":203666,"line_start":47,"line_end":47,"column_start":1,"column_end":63}},{"value":"/ except when any of the operands were actually leap seconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203667,"byte_end":203730,"line_start":48,"line_end":48,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203731,"byte_end":203734,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ If you cannot tolerate this behavior,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203735,"byte_end":203776,"line_start":50,"line_end":50,"column_start":1,"column_end":42}},{"value":"/ you must use a separate `TimeZone` for the International Atomic Time (TAI).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203777,"byte_end":203856,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ TAI is like UTC but has no leap seconds, and thus slightly differs from UTC.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203857,"byte_end":203937,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ Chrono does not yet provide such implementation, but it is planned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":203938,"byte_end":204009,"line_start":53,"line_end":53,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204010,"byte_end":204013,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ ## Representing Leap Seconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204014,"byte_end":204046,"line_start":55,"line_end":55,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204047,"byte_end":204050,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ The leap second is indicated via fractional seconds more than 1 second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204051,"byte_end":204126,"line_start":57,"line_end":57,"column_start":1,"column_end":76}},{"value":"/ This makes possible to treat a leap second as the prior non-leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204127,"byte_end":204202,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ if you don't care about sub-second accuracy.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204203,"byte_end":204251,"line_start":59,"line_end":59,"column_start":1,"column_end":49}},{"value":"/ You should use the proper formatting to get the raw leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204252,"byte_end":204320,"line_start":60,"line_end":60,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204321,"byte_end":204324,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ All methods accepting fractional seconds will accept such values.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204325,"byte_end":204394,"line_start":62,"line_end":62,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204395,"byte_end":204398,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204399,"byte_end":204407,"line_start":64,"line_end":64,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveTime, Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204408,"byte_end":204462,"line_start":65,"line_end":65,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204463,"byte_end":204466,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ let t = NaiveTime::from_hms_milli(8, 59, 59, 1_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204467,"byte_end":204523,"line_start":67,"line_end":67,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204524,"byte_end":204527,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ let dt1 = NaiveDate::from_ymd(2015, 7, 1).and_hms_micro(8, 59, 59, 1_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204528,"byte_end":204610,"line_start":69,"line_end":69,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204611,"byte_end":204614,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ let dt2 = Utc.ymd(2015, 6, 30).and_hms_nano(23, 59, 59, 1_000_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204615,"byte_end":204690,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ # let _ = (t, dt1, dt2);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204691,"byte_end":204719,"line_start":72,"line_end":72,"column_start":1,"column_end":29}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204720,"byte_end":204728,"line_start":73,"line_end":73,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204729,"byte_end":204732,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ Note that the leap second can happen anytime given an appropriate time zone;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204733,"byte_end":204813,"line_start":75,"line_end":75,"column_start":1,"column_end":81}},{"value":"/ 2015-07-01 01:23:60 would be a proper leap second if UTC+01:24 had existed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204814,"byte_end":204893,"line_start":76,"line_end":76,"column_start":1,"column_end":80}},{"value":"/ Practically speaking, though, by the time of the first leap second on 1972-06-30,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204894,"byte_end":204979,"line_start":77,"line_end":77,"column_start":1,"column_end":86}},{"value":"/ every time zone offset around the world has standardized to the 5-minute alignment.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":204980,"byte_end":205067,"line_start":78,"line_end":78,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205068,"byte_end":205071,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ ## Date And Time Arithmetics","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205072,"byte_end":205104,"line_start":80,"line_end":80,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205105,"byte_end":205108,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ As a concrete example, let's assume that `03:00:60` and `04:00:60` are leap seconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205109,"byte_end":205197,"line_start":82,"line_end":82,"column_start":1,"column_end":89}},{"value":"/ In reality, of course, leap seconds are separated by at least 6 months.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205198,"byte_end":205273,"line_start":83,"line_end":83,"column_start":1,"column_end":76}},{"value":"/ We will also use some intuitive concise notations for the explanation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205274,"byte_end":205348,"line_start":84,"line_end":84,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205349,"byte_end":205352,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ `Time + Duration`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205353,"byte_end":205374,"line_start":86,"line_end":86,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_add_signed`](#method.overflowing_add_signed)):","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205375,"byte_end":205461,"line_start":87,"line_end":87,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205462,"byte_end":205465,"line_start":88,"line_end":88,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 + 1s = 03:00:01`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205466,"byte_end":205499,"line_start":89,"line_end":89,"column_start":1,"column_end":34}},{"value":"/ - `03:00:59 + 60s = 03:02:00`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205500,"byte_end":205534,"line_start":90,"line_end":90,"column_start":1,"column_end":35}},{"value":"/ - `03:00:59 + 1s = 03:01:00`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205535,"byte_end":205568,"line_start":91,"line_end":91,"column_start":1,"column_end":34}},{"value":"/ - `03:00:60 + 1s = 03:01:00`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205569,"byte_end":205602,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/   Note that the sum is identical to the previous.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205603,"byte_end":205656,"line_start":93,"line_end":93,"column_start":1,"column_end":54}},{"value":"/ - `03:00:60 + 60s = 03:01:59`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205657,"byte_end":205691,"line_start":94,"line_end":94,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 + 61s = 03:02:00`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205692,"byte_end":205726,"line_start":95,"line_end":95,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60.1 + 0.8s = 03:00:60.9`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205727,"byte_end":205766,"line_start":96,"line_end":96,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205767,"byte_end":205770,"line_start":97,"line_end":97,"column_start":1,"column_end":4}},{"value":"/ `Time - Duration`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205771,"byte_end":205792,"line_start":98,"line_end":98,"column_start":1,"column_end":22}},{"value":"/ (short for [`NaiveTime::overflowing_sub_signed`](#method.overflowing_sub_signed)):","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205793,"byte_end":205879,"line_start":99,"line_end":99,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205880,"byte_end":205883,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ - `03:00:00 - 1s = 02:59:59`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205884,"byte_end":205917,"line_start":101,"line_end":101,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 1s = 03:00:59`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205918,"byte_end":205951,"line_start":102,"line_end":102,"column_start":1,"column_end":34}},{"value":"/ - `03:01:00 - 60s = 03:00:00`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205952,"byte_end":205986,"line_start":103,"line_end":103,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 60s = 03:00:00`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":205987,"byte_end":206021,"line_start":104,"line_end":104,"column_start":1,"column_end":35}},{"value":"/   Note that the result is identical to the previous.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206022,"byte_end":206078,"line_start":105,"line_end":105,"column_start":1,"column_end":57}},{"value":"/ - `03:00:60.7 - 0.4s = 03:00:60.3`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206079,"byte_end":206118,"line_start":106,"line_end":106,"column_start":1,"column_end":40}},{"value":"/ - `03:00:60.7 - 0.9s = 03:00:59.8`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206119,"byte_end":206158,"line_start":107,"line_end":107,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206159,"byte_end":206162,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ `Time - Time`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206163,"byte_end":206180,"line_start":109,"line_end":109,"column_start":1,"column_end":18}},{"value":"/ (short for [`NaiveTime::signed_duration_since`](#method.signed_duration_since)):","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206181,"byte_end":206265,"line_start":110,"line_end":110,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206266,"byte_end":206269,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ - `04:00:00 - 03:00:00 = 3600s`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206270,"byte_end":206306,"line_start":112,"line_end":112,"column_start":1,"column_end":37}},{"value":"/ - `03:01:00 - 03:00:00 = 60s`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206307,"byte_end":206341,"line_start":113,"line_end":113,"column_start":1,"column_end":35}},{"value":"/ - `03:00:60 - 03:00:00 = 60s`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206342,"byte_end":206376,"line_start":114,"line_end":114,"column_start":1,"column_end":35}},{"value":"/   Note that the difference is identical to the previous.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206377,"byte_end":206437,"line_start":115,"line_end":115,"column_start":1,"column_end":61}},{"value":"/ - `03:00:60.6 - 03:00:59.4 = 1.2s`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206438,"byte_end":206477,"line_start":116,"line_end":116,"column_start":1,"column_end":40}},{"value":"/ - `03:01:00 - 03:00:59.8 = 0.2s`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206478,"byte_end":206515,"line_start":117,"line_end":117,"column_start":1,"column_end":38}},{"value":"/ - `03:01:00 - 03:00:60.5 = 0.5s`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206516,"byte_end":206553,"line_start":118,"line_end":118,"column_start":1,"column_end":38}},{"value":"/   Note that the difference is larger than the previous,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206554,"byte_end":206613,"line_start":119,"line_end":119,"column_start":1,"column_end":60}},{"value":"/   even though the leap second clearly follows the previous whole second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206614,"byte_end":206690,"line_start":120,"line_end":120,"column_start":1,"column_end":77}},{"value":"/ - `04:00:60.9 - 03:00:60.1 =","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206691,"byte_end":206723,"line_start":121,"line_end":121,"column_start":1,"column_end":33}},{"value":"/   (04:00:60.9 - 04:00:00) + (04:00:00 - 03:01:00) + (03:01:00 - 03:00:60.1) =","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206724,"byte_end":206805,"line_start":122,"line_end":122,"column_start":1,"column_end":82}},{"value":"/   60.9s + 3540s + 0.9s = 3601.8s`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206806,"byte_end":206844,"line_start":123,"line_end":123,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206845,"byte_end":206848,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ In general,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206849,"byte_end":206864,"line_start":125,"line_end":125,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206865,"byte_end":206868,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ - `Time + Duration` unconditionally equals to `Duration + Time`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206869,"byte_end":206937,"line_start":127,"line_end":127,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206938,"byte_end":206941,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ - `Time - Duration` unconditionally equals to `Time + (-Duration)`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":206942,"byte_end":207013,"line_start":129,"line_end":129,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207014,"byte_end":207017,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ - `Time1 - Time2` unconditionally equals to `-(Time2 - Time1)`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207018,"byte_end":207085,"line_start":131,"line_end":131,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207086,"byte_end":207089,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ - Associativity does not generally hold, because","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207090,"byte_end":207142,"line_start":133,"line_end":133,"column_start":1,"column_end":53}},{"value":"/   `(Time + Duration1) - Duration2` no longer equals to `Time + (Duration1 - Duration2)`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207143,"byte_end":207234,"line_start":134,"line_end":134,"column_start":1,"column_end":92}},{"value":"/   for two positive durations.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207235,"byte_end":207268,"line_start":135,"line_end":135,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207269,"byte_end":207272,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/     - As a special case, `(Time + Duration) - Duration` also does not equal to `Time`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207273,"byte_end":207363,"line_start":137,"line_end":137,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207364,"byte_end":207367,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/     - If you can assume that all durations have the same sign, however,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207368,"byte_end":207443,"line_start":139,"line_end":139,"column_start":1,"column_end":76}},{"value":"/       then the associativity holds:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207444,"byte_end":207483,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/       `(Time + Duration1) + Duration2` equals to `Time + (Duration1 + Duration2)`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207484,"byte_end":207569,"line_start":141,"line_end":141,"column_start":1,"column_end":86}},{"value":"/       for two positive durations.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207570,"byte_end":207607,"line_start":142,"line_end":142,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207608,"byte_end":207611,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ ## Reading And Writing Leap Seconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207612,"byte_end":207651,"line_start":144,"line_end":144,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207652,"byte_end":207655,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ The \"typical\" leap seconds on the minute boundary are","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207656,"byte_end":207713,"line_start":146,"line_end":146,"column_start":1,"column_end":58}},{"value":"/ correctly handled both in the formatting and parsing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207714,"byte_end":207771,"line_start":147,"line_end":147,"column_start":1,"column_end":58}},{"value":"/ The leap second in the human-readable representation","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207772,"byte_end":207828,"line_start":148,"line_end":148,"column_start":1,"column_end":57}},{"value":"/ will be represented as the second part being 60, as required by ISO 8601.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207829,"byte_end":207906,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207907,"byte_end":207910,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207911,"byte_end":207919,"line_start":151,"line_end":151,"column_start":1,"column_end":9}},{"value":"/ use chrono::{Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207920,"byte_end":207952,"line_start":152,"line_end":152,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207953,"byte_end":207956,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":207957,"byte_end":208024,"line_start":154,"line_end":154,"column_start":1,"column_end":68}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:59:60Z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208025,"byte_end":208085,"line_start":155,"line_end":155,"column_start":1,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208086,"byte_end":208094,"line_start":156,"line_end":156,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208095,"byte_end":208098,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ There are hypothetical leap seconds not on the minute boundary","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208099,"byte_end":208165,"line_start":158,"line_end":158,"column_start":1,"column_end":67}},{"value":"/ nevertheless supported by Chrono.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208166,"byte_end":208203,"line_start":159,"line_end":159,"column_start":1,"column_end":38}},{"value":"/ They are allowed for the sake of completeness and consistency;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208204,"byte_end":208270,"line_start":160,"line_end":160,"column_start":1,"column_end":67}},{"value":"/ there were several \"exotic\" time zone offsets with fractional minutes prior to UTC after all.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208271,"byte_end":208368,"line_start":161,"line_end":161,"column_start":1,"column_end":98}},{"value":"/ For such cases the human-readable representation is ambiguous","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208369,"byte_end":208434,"line_start":162,"line_end":162,"column_start":1,"column_end":66}},{"value":"/ and would be read back to the next non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208435,"byte_end":208490,"line_start":163,"line_end":163,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208491,"byte_end":208494,"line_start":164,"line_end":164,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208495,"byte_end":208503,"line_start":165,"line_end":165,"column_start":1,"column_end":9}},{"value":"/ use chrono::{DateTime, Utc, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208504,"byte_end":208546,"line_start":166,"line_end":166,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208547,"byte_end":208550,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms_milli(23, 56, 4, 1_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208551,"byte_end":208617,"line_start":168,"line_end":168,"column_start":1,"column_end":67}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208618,"byte_end":208678,"line_start":169,"line_end":169,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208679,"byte_end":208682,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ let dt = Utc.ymd(2015, 6, 30).and_hms(23, 56, 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208683,"byte_end":208736,"line_start":171,"line_end":171,"column_start":1,"column_end":54}},{"value":"/ assert_eq!(format!(\"{:?}\", dt), \"2015-06-30T23:56:05Z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208737,"byte_end":208797,"line_start":172,"line_end":172,"column_start":1,"column_end":61}},{"value":"/ assert_eq!(DateTime::parse_from_rfc3339(\"2015-06-30T23:56:05Z\").unwrap(), dt);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208798,"byte_end":208880,"line_start":173,"line_end":173,"column_start":1,"column_end":83}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208881,"byte_end":208889,"line_start":174,"line_end":174,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208890,"byte_end":208893,"line_start":175,"line_end":175,"column_start":1,"column_end":4}},{"value":"/ Since Chrono alone cannot determine any existence of leap seconds,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208894,"byte_end":208964,"line_start":176,"line_end":176,"column_start":1,"column_end":71}},{"value":"/ **there is absolutely no guarantee that the leap second read has actually happened**.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":208965,"byte_end":209054,"line_start":177,"line_end":177,"column_start":1,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":493},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209788,"byte_end":209796,"line_start":204,"line_end":204,"column_start":12,"column_end":20},"name":"from_hms","qualname":"<NaiveTime>::from_hms","value":"pub fn from_hms(u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209187,"byte_end":209244,"line_start":185,"line_end":185,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209249,"byte_end":209252,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209257,"byte_end":209317,"line_start":187,"line_end":187,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*` methods with a subsecond parameter instead.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209322,"byte_end":209397,"line_start":188,"line_end":188,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209402,"byte_end":209405,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209410,"byte_end":209459,"line_start":190,"line_end":190,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209464,"byte_end":209467,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209472,"byte_end":209485,"line_start":192,"line_end":192,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209490,"byte_end":209493,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209498,"byte_end":209506,"line_start":194,"line_end":194,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209511,"byte_end":209549,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209554,"byte_end":209557,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209562,"byte_end":209605,"line_start":197,"line_end":197,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209610,"byte_end":209639,"line_start":198,"line_end":198,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209644,"byte_end":209675,"line_start":199,"line_end":199,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209680,"byte_end":209710,"line_start":200,"line_end":200,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209715,"byte_end":209749,"line_start":201,"line_end":201,"column_start":5,"column_end":39}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209754,"byte_end":209762,"line_start":202,"line_end":202,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209767,"byte_end":209776,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210653,"byte_end":210665,"line_start":229,"line_end":229,"column_start":12,"column_end":24},"name":"from_hms_opt","qualname":"<NaiveTime>::from_hms_opt","value":"pub fn from_hms_opt(u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute and second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute and second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209925,"byte_end":209982,"line_start":208,"line_end":208,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209987,"byte_end":209990,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ No [leap second](#leap-second-handling) is allowed here;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209995,"byte_end":210055,"line_start":210,"line_end":210,"column_start":5,"column_end":65}},{"value":"/ use `NaiveTime::from_hms_*_opt` methods with a subsecond parameter instead.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210060,"byte_end":210139,"line_start":211,"line_end":211,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210144,"byte_end":210147,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210152,"byte_end":210209,"line_start":213,"line_end":213,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210214,"byte_end":210217,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210222,"byte_end":210235,"line_start":215,"line_end":215,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210240,"byte_end":210243,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210248,"byte_end":210256,"line_start":217,"line_end":217,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210261,"byte_end":210287,"line_start":218,"line_end":218,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210292,"byte_end":210295,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ let from_hms_opt = NaiveTime::from_hms_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210300,"byte_end":210347,"line_start":220,"line_end":220,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210352,"byte_end":210355,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hms_opt(0, 0, 0).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210360,"byte_end":210405,"line_start":222,"line_end":222,"column_start":5,"column_end":50}},{"value":"/ assert!(from_hms_opt(23, 59, 59).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210410,"byte_end":210458,"line_start":223,"line_end":223,"column_start":5,"column_end":53}},{"value":"/ assert!(from_hms_opt(24, 0, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210463,"byte_end":210509,"line_start":224,"line_end":224,"column_start":5,"column_end":51}},{"value":"/ assert!(from_hms_opt(23, 60, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210514,"byte_end":210561,"line_start":225,"line_end":225,"column_start":5,"column_end":52}},{"value":"/ assert!(from_hms_opt(23, 59, 60).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210566,"byte_end":210614,"line_start":226,"line_end":226,"column_start":5,"column_end":53}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210619,"byte_end":210627,"line_start":227,"line_end":227,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210632,"byte_end":210641,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":495},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211406,"byte_end":211420,"line_start":252,"line_end":252,"column_start":12,"column_end":26},"name":"from_hms_milli","qualname":"<NaiveTime>::from_hms_milli","value":"pub fn from_hms_milli(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210787,"byte_end":210857,"line_start":233,"line_end":233,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210862,"byte_end":210865,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210870,"byte_end":210911,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210916,"byte_end":210983,"line_start":236,"line_end":236,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210988,"byte_end":210991,"line_start":237,"line_end":237,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":210996,"byte_end":211058,"line_start":238,"line_end":238,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211063,"byte_end":211066,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211071,"byte_end":211084,"line_start":240,"line_end":240,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211089,"byte_end":211092,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211097,"byte_end":211105,"line_start":242,"line_end":242,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211110,"byte_end":211148,"line_start":243,"line_end":243,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211153,"byte_end":211156,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_milli(23, 56, 4, 12);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211161,"byte_end":211214,"line_start":245,"line_end":245,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211219,"byte_end":211248,"line_start":246,"line_end":246,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211253,"byte_end":211284,"line_start":247,"line_end":247,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211289,"byte_end":211319,"line_start":248,"line_end":248,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211324,"byte_end":211367,"line_start":249,"line_end":249,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211372,"byte_end":211380,"line_start":250,"line_end":250,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211385,"byte_end":211394,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212480,"byte_end":212498,"line_start":279,"line_end":279,"column_start":12,"column_end":30},"name":"from_hms_milli_opt","qualname":"<NaiveTime>::from_hms_milli_opt","value":"pub fn from_hms_milli_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and millisecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211574,"byte_end":211644,"line_start":256,"line_end":256,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211649,"byte_end":211652,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ The millisecond part can exceed 1,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211657,"byte_end":211698,"line_start":258,"line_end":258,"column_start":5,"column_end":46}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211703,"byte_end":211770,"line_start":259,"line_end":259,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211775,"byte_end":211778,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211783,"byte_end":211853,"line_start":261,"line_end":261,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211858,"byte_end":211861,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211866,"byte_end":211879,"line_start":263,"line_end":263,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211884,"byte_end":211887,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211892,"byte_end":211900,"line_start":265,"line_end":265,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211905,"byte_end":211931,"line_start":266,"line_end":266,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211936,"byte_end":211939,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm_opt = NaiveTime::from_hms_milli_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":211944,"byte_end":211998,"line_start":268,"line_end":268,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212003,"byte_end":212006,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsm_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212011,"byte_end":212060,"line_start":270,"line_end":270,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 999).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212065,"byte_end":212119,"line_start":271,"line_end":271,"column_start":5,"column_end":59}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 1_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212124,"byte_end":212212,"line_start":272,"line_end":272,"column_start":5,"column_end":93}},{"value":"/ assert!(from_hmsm_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212217,"byte_end":212267,"line_start":273,"line_end":273,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsm_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212272,"byte_end":212323,"line_start":274,"line_end":274,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsm_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212328,"byte_end":212380,"line_start":275,"line_end":275,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsm_opt(23, 59, 59, 2_000).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212385,"byte_end":212441,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212446,"byte_end":212454,"line_start":277,"line_end":277,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212459,"byte_end":212468,"line_start":278,"line_end":278,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213322,"byte_end":213336,"line_start":303,"line_end":303,"column_start":12,"column_end":26},"name":"from_hms_micro","qualname":"<NaiveTime>::from_hms_micro","value":"pub fn from_hms_micro(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212695,"byte_end":212765,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212770,"byte_end":212773,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212778,"byte_end":212823,"line_start":286,"line_end":286,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212828,"byte_end":212895,"line_start":287,"line_end":287,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212900,"byte_end":212903,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212908,"byte_end":212970,"line_start":289,"line_end":289,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212975,"byte_end":212978,"line_start":290,"line_end":290,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":212983,"byte_end":212996,"line_start":291,"line_end":291,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213001,"byte_end":213004,"line_start":292,"line_end":292,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213009,"byte_end":213017,"line_start":293,"line_end":293,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213022,"byte_end":213060,"line_start":294,"line_end":294,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213065,"byte_end":213068,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_micro(23, 56, 4, 12_345);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213073,"byte_end":213130,"line_start":296,"line_end":296,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213135,"byte_end":213164,"line_start":297,"line_end":297,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213169,"byte_end":213200,"line_start":298,"line_end":298,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213205,"byte_end":213235,"line_start":299,"line_end":299,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213240,"byte_end":213283,"line_start":300,"line_end":300,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213288,"byte_end":213296,"line_start":301,"line_end":301,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213301,"byte_end":213310,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":499},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214412,"byte_end":214430,"line_start":330,"line_end":330,"column_start":12,"column_end":30},"name":"from_hms_micro_opt","qualname":"<NaiveTime>::from_hms_micro_opt","value":"pub fn from_hms_micro_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and microsecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213490,"byte_end":213560,"line_start":307,"line_end":307,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213565,"byte_end":213568,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ The microsecond part can exceed 1,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213573,"byte_end":213618,"line_start":309,"line_end":309,"column_start":5,"column_end":50}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213623,"byte_end":213690,"line_start":310,"line_end":310,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213695,"byte_end":213698,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213703,"byte_end":213773,"line_start":312,"line_end":312,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213778,"byte_end":213781,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213786,"byte_end":213799,"line_start":314,"line_end":314,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213804,"byte_end":213807,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213812,"byte_end":213820,"line_start":316,"line_end":316,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213825,"byte_end":213851,"line_start":317,"line_end":317,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213856,"byte_end":213859,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ let from_hmsu_opt = NaiveTime::from_hms_micro_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213864,"byte_end":213918,"line_start":319,"line_end":319,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213923,"byte_end":213926,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsu_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213931,"byte_end":213980,"line_start":321,"line_end":321,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 999_999).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":213985,"byte_end":214043,"line_start":322,"line_end":322,"column_start":5,"column_end":63}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 1_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214048,"byte_end":214140,"line_start":323,"line_end":323,"column_start":5,"column_end":97}},{"value":"/ assert!(from_hmsu_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214145,"byte_end":214195,"line_start":324,"line_end":324,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsu_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214200,"byte_end":214251,"line_start":325,"line_end":325,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsu_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214256,"byte_end":214308,"line_start":326,"line_end":326,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsu_opt(23, 59, 59, 2_000_000).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214313,"byte_end":214373,"line_start":327,"line_end":327,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214378,"byte_end":214386,"line_start":328,"line_end":328,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214391,"byte_end":214400,"line_start":329,"line_end":329,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":501},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215254,"byte_end":215267,"line_start":354,"line_end":354,"column_start":12,"column_end":25},"name":"from_hms_nano","qualname":"<NaiveTime>::from_hms_nano","value":"pub fn from_hms_nano(u32, u32, u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214623,"byte_end":214692,"line_start":335,"line_end":335,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214697,"byte_end":214700,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214705,"byte_end":214753,"line_start":337,"line_end":337,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214758,"byte_end":214825,"line_start":338,"line_end":338,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214830,"byte_end":214833,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214838,"byte_end":214899,"line_start":340,"line_end":340,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214904,"byte_end":214907,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214912,"byte_end":214925,"line_start":342,"line_end":342,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214930,"byte_end":214933,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214938,"byte_end":214946,"line_start":344,"line_end":344,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214951,"byte_end":214989,"line_start":345,"line_end":345,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":214994,"byte_end":214997,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215002,"byte_end":215062,"line_start":347,"line_end":347,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215067,"byte_end":215096,"line_start":348,"line_end":348,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215101,"byte_end":215132,"line_start":349,"line_end":349,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215137,"byte_end":215167,"line_start":350,"line_end":350,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215172,"byte_end":215215,"line_start":351,"line_end":351,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215220,"byte_end":215228,"line_start":352,"line_end":352,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215233,"byte_end":215242,"line_start":353,"line_end":353,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216352,"byte_end":216369,"line_start":381,"line_end":381,"column_start":12,"column_end":29},"name":"from_hms_nano_opt","qualname":"<NaiveTime>::from_hms_nano_opt","value":"pub fn from_hms_nano_opt(u32, u32, u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from hour, minute, second and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from hour, minute, second and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215418,"byte_end":215487,"line_start":358,"line_end":358,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215492,"byte_end":215495,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215500,"byte_end":215548,"line_start":360,"line_end":360,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215553,"byte_end":215620,"line_start":361,"line_end":361,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215625,"byte_end":215628,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215633,"byte_end":215702,"line_start":363,"line_end":363,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215707,"byte_end":215710,"line_start":364,"line_end":364,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215715,"byte_end":215728,"line_start":365,"line_end":365,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215733,"byte_end":215736,"line_start":366,"line_end":366,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215741,"byte_end":215749,"line_start":367,"line_end":367,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215754,"byte_end":215780,"line_start":368,"line_end":368,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215785,"byte_end":215788,"line_start":369,"line_end":369,"column_start":5,"column_end":8}},{"value":"/ let from_hmsn_opt = NaiveTime::from_hms_nano_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215793,"byte_end":215846,"line_start":370,"line_end":370,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215851,"byte_end":215854,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ assert!(from_hmsn_opt(0, 0, 0, 0).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215859,"byte_end":215908,"line_start":372,"line_end":372,"column_start":5,"column_end":54}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 999_999_999).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215913,"byte_end":215975,"line_start":373,"line_end":373,"column_start":5,"column_end":67}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":215980,"byte_end":216076,"line_start":374,"line_end":374,"column_start":5,"column_end":101}},{"value":"/ assert!(from_hmsn_opt(24, 0, 0, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216081,"byte_end":216131,"line_start":375,"line_end":375,"column_start":5,"column_end":55}},{"value":"/ assert!(from_hmsn_opt(23, 60, 0, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216136,"byte_end":216187,"line_start":376,"line_end":376,"column_start":5,"column_end":56}},{"value":"/ assert!(from_hmsn_opt(23, 59, 60, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216192,"byte_end":216244,"line_start":377,"line_end":377,"column_start":5,"column_end":57}},{"value":"/ assert!(from_hmsn_opt(23, 59, 59, 2_000_000_000).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216249,"byte_end":216313,"line_start":378,"line_end":378,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216318,"byte_end":216326,"line_start":379,"line_end":379,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216331,"byte_end":216340,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217293,"byte_end":217323,"line_start":406,"line_end":406,"column_start":12,"column_end":42},"name":"from_num_seconds_from_midnight","qualname":"<NaiveTime>::from_num_seconds_from_midnight","value":"pub fn from_num_seconds_from_midnight(u32, u32) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216636,"byte_end":216721,"line_start":387,"line_end":387,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216726,"byte_end":216729,"line_start":388,"line_end":388,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216734,"byte_end":216782,"line_start":389,"line_end":389,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216787,"byte_end":216854,"line_start":390,"line_end":390,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216859,"byte_end":216862,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid number of seconds and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216867,"byte_end":216925,"line_start":392,"line_end":392,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216930,"byte_end":216933,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216938,"byte_end":216951,"line_start":394,"line_end":394,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216956,"byte_end":216959,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216964,"byte_end":216972,"line_start":396,"line_end":396,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveTime, Timelike};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":216977,"byte_end":217015,"line_start":397,"line_end":397,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217020,"byte_end":217023,"line_start":398,"line_end":398,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_num_seconds_from_midnight(86164, 12_345_678);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217028,"byte_end":217101,"line_start":399,"line_end":399,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.hour(), 23);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217106,"byte_end":217135,"line_start":400,"line_end":400,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(t.minute(), 56);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217140,"byte_end":217171,"line_start":401,"line_end":401,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(t.second(), 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217176,"byte_end":217206,"line_start":402,"line_end":402,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(t.nanosecond(), 12_345_678);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217211,"byte_end":217254,"line_start":403,"line_end":403,"column_start":5,"column_end":48}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217259,"byte_end":217267,"line_start":404,"line_end":404,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217272,"byte_end":217281,"line_start":405,"line_end":405,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218295,"byte_end":218329,"line_start":431,"line_end":431,"column_start":12,"column_end":46},"name":"from_num_seconds_from_midnight_opt","qualname":"<NaiveTime>::from_num_seconds_from_midnight_opt","value":"pub fn from_num_seconds_from_midnight_opt(u32, u32) -> Option<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217461,"byte_end":217546,"line_start":410,"line_end":410,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217551,"byte_end":217554,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217559,"byte_end":217607,"line_start":412,"line_end":412,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217612,"byte_end":217679,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217684,"byte_end":217687,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid number of seconds and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217692,"byte_end":217758,"line_start":415,"line_end":415,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217763,"byte_end":217766,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217771,"byte_end":217784,"line_start":417,"line_end":417,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217789,"byte_end":217792,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217797,"byte_end":217805,"line_start":419,"line_end":419,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217810,"byte_end":217836,"line_start":420,"line_end":420,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217841,"byte_end":217844,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ let from_nsecs_opt = NaiveTime::from_num_seconds_from_midnight_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217849,"byte_end":217920,"line_start":422,"line_end":422,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217925,"byte_end":217928,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ assert!(from_nsecs_opt(0, 0).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217933,"byte_end":217977,"line_start":424,"line_end":424,"column_start":5,"column_end":49}},{"value":"/ assert!(from_nsecs_opt(86399, 999_999_999).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":217982,"byte_end":218040,"line_start":425,"line_end":425,"column_start":5,"column_end":63}},{"value":"/ assert!(from_nsecs_opt(86399, 1_999_999_999).is_some()); // a leap second after 23:59:59","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218045,"byte_end":218137,"line_start":426,"line_end":426,"column_start":5,"column_end":97}},{"value":"/ assert!(from_nsecs_opt(86_400, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218142,"byte_end":218191,"line_start":427,"line_end":427,"column_start":5,"column_end":54}},{"value":"/ assert!(from_nsecs_opt(86399, 2_000_000_000).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218196,"byte_end":218256,"line_start":428,"line_end":428,"column_start":5,"column_end":65}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218261,"byte_end":218269,"line_start":429,"line_end":429,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218274,"byte_end":218283,"line_start":430,"line_end":430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":505},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220979,"byte_end":220993,"line_start":497,"line_end":497,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveTime`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218505,"byte_end":218588,"line_start":436,"line_end":436,"column_start":5,"column_end":88}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218593,"byte_end":218663,"line_start":437,"line_end":437,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218668,"byte_end":218706,"line_start":438,"line_end":438,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218711,"byte_end":218714,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218719,"byte_end":218732,"line_start":440,"line_end":440,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218737,"byte_end":218740,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218745,"byte_end":218753,"line_start":442,"line_end":442,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218758,"byte_end":218784,"line_start":443,"line_end":443,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218789,"byte_end":218792,"line_start":444,"line_end":444,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218797,"byte_end":218848,"line_start":445,"line_end":445,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218853,"byte_end":218856,"line_start":446,"line_end":446,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"23:56:04\", \"%H:%M:%S\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218861,"byte_end":218915,"line_start":447,"line_end":447,"column_start":5,"column_end":59}},{"value":"/            Ok(NaiveTime::from_hms(23, 56, 4)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218920,"byte_end":218971,"line_start":448,"line_end":448,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(parse_from_str(\"pm012345.6789\", \"%p%I%M%S%.f\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":218976,"byte_end":219038,"line_start":449,"line_end":449,"column_start":5,"column_end":67}},{"value":"/            Ok(NaiveTime::from_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219043,"byte_end":219110,"line_start":450,"line_end":450,"column_start":5,"column_end":72}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219115,"byte_end":219123,"line_start":451,"line_end":451,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219128,"byte_end":219131,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ Date and offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219136,"byte_end":219194,"line_start":453,"line_end":453,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219199,"byte_end":219202,"line_start":454,"line_end":454,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219207,"byte_end":219215,"line_start":455,"line_end":455,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219220,"byte_end":219248,"line_start":456,"line_end":456,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219253,"byte_end":219306,"line_start":457,"line_end":457,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219311,"byte_end":219392,"line_start":458,"line_end":458,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveTime::from_hms(12, 34, 56)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219397,"byte_end":219449,"line_start":459,"line_end":459,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219454,"byte_end":219462,"line_start":460,"line_end":460,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219467,"byte_end":219470,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](#leap-second-handling) are correctly handled by","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219475,"byte_end":219541,"line_start":462,"line_end":462,"column_start":5,"column_end":71}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219546,"byte_end":219608,"line_start":463,"line_end":463,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219613,"byte_end":219689,"line_start":464,"line_end":464,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219694,"byte_end":219697,"line_start":465,"line_end":465,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219702,"byte_end":219710,"line_start":466,"line_end":466,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219715,"byte_end":219743,"line_start":467,"line_end":467,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219748,"byte_end":219801,"line_start":468,"line_end":468,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"08:59:60.123\", \"%H:%M:%S%.f\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219806,"byte_end":219867,"line_start":469,"line_end":469,"column_start":5,"column_end":66}},{"value":"/            Ok(NaiveTime::from_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219872,"byte_end":219936,"line_start":470,"line_end":470,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219941,"byte_end":219949,"line_start":471,"line_end":471,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219954,"byte_end":219957,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":219962,"byte_end":220005,"line_start":473,"line_end":473,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220010,"byte_end":220081,"line_start":474,"line_end":474,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220086,"byte_end":220089,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220094,"byte_end":220102,"line_start":476,"line_end":476,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220107,"byte_end":220135,"line_start":477,"line_end":477,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220140,"byte_end":220193,"line_start":478,"line_end":478,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(parse_from_str(\"7:15\", \"%H:%M\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220198,"byte_end":220245,"line_start":479,"line_end":479,"column_start":5,"column_end":52}},{"value":"/            Ok(NaiveTime::from_hms(7, 15, 0)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220250,"byte_end":220300,"line_start":480,"line_end":480,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220305,"byte_end":220308,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220313,"byte_end":220370,"line_start":482,"line_end":482,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"12\", \"%H\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220375,"byte_end":220424,"line_start":483,"line_end":483,"column_start":5,"column_end":54}},{"value":"/ assert!(parse_from_str(\"17:60\", \"%H:%M\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220429,"byte_end":220484,"line_start":484,"line_end":484,"column_start":5,"column_end":60}},{"value":"/ assert!(parse_from_str(\"24:00:00\", \"%H:%M:%S\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220489,"byte_end":220550,"line_start":485,"line_end":485,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220555,"byte_end":220563,"line_start":486,"line_end":486,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220568,"byte_end":220571,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220576,"byte_end":220658,"line_start":488,"line_end":488,"column_start":5,"column_end":87}},{"value":"/ Here `%H` is for 24-hour clocks, unlike `%I`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220663,"byte_end":220712,"line_start":489,"line_end":489,"column_start":5,"column_end":54}},{"value":"/ and thus can be independently determined without AM/PM.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220717,"byte_end":220776,"line_start":490,"line_end":490,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220781,"byte_end":220784,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220789,"byte_end":220797,"line_start":492,"line_end":492,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220802,"byte_end":220830,"line_start":493,"line_end":493,"column_start":5,"column_end":33}},{"value":"/ # let parse_from_str = NaiveTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220835,"byte_end":220888,"line_start":494,"line_end":494,"column_start":5,"column_end":58}},{"value":"/ assert!(parse_from_str(\"13:07 AM\", \"%H:%M %p\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220893,"byte_end":220954,"line_start":495,"line_end":495,"column_start":5,"column_end":66}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":220959,"byte_end":220967,"line_start":496,"line_end":496,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":222156,"byte_end":222178,"line_start":526,"line_end":526,"column_start":12,"column_end":34},"name":"overflowing_add_signed","qualname":"<NaiveTime>::overflowing_add_signed","value":"pub fn overflowing_add_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the addition.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current time,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221181,"byte_end":221227,"line_start":503,"line_end":503,"column_start":5,"column_end":51}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221232,"byte_end":221276,"line_start":504,"line_end":504,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the addition.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221281,"byte_end":221342,"line_start":505,"line_end":505,"column_start":5,"column_end":66}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221347,"byte_end":221428,"line_start":506,"line_end":506,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221433,"byte_end":221436,"line_start":507,"line_end":507,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221441,"byte_end":221454,"line_start":508,"line_end":508,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221459,"byte_end":221462,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221467,"byte_end":221475,"line_start":510,"line_end":510,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221480,"byte_end":221537,"line_start":511,"line_end":511,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221542,"byte_end":221568,"line_start":512,"line_end":512,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221573,"byte_end":221596,"line_start":513,"line_end":513,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221601,"byte_end":221604,"line_start":514,"line_end":514,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221609,"byte_end":221648,"line_start":515,"line_end":515,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221653,"byte_end":221656,"line_start":516,"line_end":516,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(11)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221661,"byte_end":221738,"line_start":517,"line_end":517,"column_start":5,"column_end":82}},{"value":"/            (from_hms(14, 4, 5), 0));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221743,"byte_end":221783,"line_start":518,"line_end":518,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(23)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221788,"byte_end":221865,"line_start":519,"line_end":519,"column_start":5,"column_end":82}},{"value":"/            (from_hms(2, 4, 5), 86_400));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221870,"byte_end":221914,"line_start":520,"line_end":520,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_add_signed(Duration::hours(-7)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":221919,"byte_end":221996,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/            (from_hms(20, 4, 5), -86_400));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":222001,"byte_end":222047,"line_start":522,"line_end":522,"column_start":5,"column_end":51}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":222052,"byte_end":222059,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":222064,"byte_end":222072,"line_start":524,"line_end":524,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":507},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225687,"byte_end":225709,"line_start":612,"line_end":612,"column_start":12,"column_end":34},"name":"overflowing_sub_signed","qualname":"<NaiveTime>::overflowing_sub_signed","value":"pub fn overflowing_sub_signed(&Self, OldDuration) -> (NaiveTime, i64)","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current time,\n and also returns the number of *seconds*\n in the integral number of days ignored from the subtraction.\n (We cannot return `Duration` because it is subject to overflow or underflow.)","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current time,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":224761,"byte_end":224814,"line_start":589,"line_end":589,"column_start":5,"column_end":58}},{"value":"/ and also returns the number of *seconds*","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":224819,"byte_end":224863,"line_start":590,"line_end":590,"column_start":5,"column_end":49}},{"value":"/ in the integral number of days ignored from the subtraction.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":224868,"byte_end":224932,"line_start":591,"line_end":591,"column_start":5,"column_end":69}},{"value":"/ (We cannot return `Duration` because it is subject to overflow or underflow.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":224937,"byte_end":225018,"line_start":592,"line_end":592,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225023,"byte_end":225026,"line_start":593,"line_end":593,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225031,"byte_end":225044,"line_start":594,"line_end":594,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225049,"byte_end":225052,"line_start":595,"line_end":595,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225057,"byte_end":225065,"line_start":596,"line_end":596,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225070,"byte_end":225127,"line_start":597,"line_end":597,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225132,"byte_end":225158,"line_start":598,"line_end":598,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225163,"byte_end":225186,"line_start":599,"line_end":599,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225191,"byte_end":225194,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ let from_hms = NaiveTime::from_hms;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225199,"byte_end":225238,"line_start":601,"line_end":601,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225243,"byte_end":225246,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(2)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225251,"byte_end":225327,"line_start":603,"line_end":603,"column_start":5,"column_end":81}},{"value":"/            (from_hms(1, 4, 5), 0));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225332,"byte_end":225371,"line_start":604,"line_end":604,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(17)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225376,"byte_end":225453,"line_start":605,"line_end":605,"column_start":5,"column_end":82}},{"value":"/            (from_hms(10, 4, 5), 86_400));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225458,"byte_end":225503,"line_start":606,"line_end":606,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(from_hms(3, 4, 5).overflowing_sub_signed(Duration::hours(-22)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225508,"byte_end":225586,"line_start":607,"line_end":607,"column_start":5,"column_end":83}},{"value":"/            (from_hms(1, 4, 5), -86_400));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225591,"byte_end":225636,"line_start":608,"line_end":608,"column_start":5,"column_end":50}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225641,"byte_end":225648,"line_start":609,"line_end":609,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225653,"byte_end":225661,"line_start":610,"line_end":610,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225666,"byte_end":225675,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228763,"byte_end":228784,"line_start":677,"line_end":677,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveTime` from the current time.\n Returns a `Duration` within +/- 1 day.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveTime` from the current time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225901,"byte_end":225957,"line_start":617,"line_end":617,"column_start":5,"column_end":61}},{"value":"/ Returns a `Duration` within +/- 1 day.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":225962,"byte_end":226004,"line_start":618,"line_end":618,"column_start":5,"column_end":47}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226009,"byte_end":226056,"line_start":619,"line_end":619,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226061,"byte_end":226064,"line_start":620,"line_end":620,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](#leap-second-handling),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226069,"byte_end":226141,"line_start":621,"line_end":621,"column_start":5,"column_end":77}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226146,"byte_end":226212,"line_start":622,"line_end":622,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveTime`s themselves represents a leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226217,"byte_end":226292,"line_start":623,"line_end":623,"column_start":5,"column_end":80}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226297,"byte_end":226342,"line_start":624,"line_end":624,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226347,"byte_end":226406,"line_start":625,"line_end":625,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226411,"byte_end":226414,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226419,"byte_end":226432,"line_start":627,"line_end":627,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226437,"byte_end":226440,"line_start":628,"line_end":628,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226445,"byte_end":226453,"line_start":629,"line_end":629,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226458,"byte_end":226515,"line_start":630,"line_end":630,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226520,"byte_end":226546,"line_start":631,"line_end":631,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226551,"byte_end":226574,"line_start":632,"line_end":632,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226579,"byte_end":226582,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226587,"byte_end":226633,"line_start":634,"line_end":634,"column_start":5,"column_end":51}},{"value":"/ let since = NaiveTime::signed_duration_since;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226638,"byte_end":226687,"line_start":635,"line_end":635,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226692,"byte_end":226695,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 900)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226700,"byte_end":226771,"line_start":637,"line_end":637,"column_start":5,"column_end":76}},{"value":"/            Duration::zero());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226776,"byte_end":226809,"line_start":638,"line_end":638,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 7, 875)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226814,"byte_end":226885,"line_start":639,"line_end":639,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(25));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226890,"byte_end":226933,"line_start":640,"line_end":640,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 6, 925)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":226938,"byte_end":227009,"line_start":641,"line_end":641,"column_start":5,"column_end":76}},{"value":"/            Duration::milliseconds(975));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227014,"byte_end":227058,"line_start":642,"line_end":642,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 5, 0, 900)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227063,"byte_end":227134,"line_start":643,"line_end":643,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(7));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227139,"byte_end":227176,"line_start":644,"line_end":644,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(3, 0, 7, 900)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227181,"byte_end":227252,"line_start":645,"line_end":645,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(5 * 60));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227257,"byte_end":227299,"line_start":646,"line_end":646,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(0, 5, 7, 900)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227304,"byte_end":227375,"line_start":647,"line_end":647,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3 * 3600));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227380,"byte_end":227424,"line_start":648,"line_end":648,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(4, 5, 7, 900)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227429,"byte_end":227500,"line_start":649,"line_end":649,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(-3600));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227505,"byte_end":227546,"line_start":650,"line_end":650,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(since(from_hmsm(3, 5, 7, 900), from_hmsm(2, 4, 6, 800)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227551,"byte_end":227622,"line_start":651,"line_end":651,"column_start":5,"column_end":76}},{"value":"/            Duration::seconds(3600 + 60 + 1) + Duration::milliseconds(100));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227627,"byte_end":227706,"line_start":652,"line_end":652,"column_start":5,"column_end":84}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227711,"byte_end":227718,"line_start":653,"line_end":653,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227723,"byte_end":227731,"line_start":654,"line_end":654,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227736,"byte_end":227739,"line_start":655,"line_end":655,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227744,"byte_end":227806,"line_start":656,"line_end":656,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227811,"byte_end":227857,"line_start":657,"line_end":657,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227862,"byte_end":227865,"line_start":658,"line_end":658,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227870,"byte_end":227878,"line_start":659,"line_end":659,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227883,"byte_end":227940,"line_start":660,"line_end":660,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227945,"byte_end":227973,"line_start":661,"line_end":661,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":227978,"byte_end":228003,"line_start":662,"line_end":662,"column_start":5,"column_end":30}},{"value":"/ # let from_hmsm = NaiveTime::from_hms_milli;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228008,"byte_end":228056,"line_start":663,"line_end":663,"column_start":5,"column_end":53}},{"value":"/ # let since = NaiveTime::signed_duration_since;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228061,"byte_end":228112,"line_start":664,"line_end":664,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228117,"byte_end":228190,"line_start":665,"line_end":665,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228195,"byte_end":228232,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_500), from_hmsm(3, 0, 59, 0)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228237,"byte_end":228310,"line_start":667,"line_end":667,"column_start":5,"column_end":78}},{"value":"/            Duration::milliseconds(1500));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228315,"byte_end":228360,"line_start":668,"line_end":668,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(3, 0, 0, 0)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228365,"byte_end":228437,"line_start":669,"line_end":669,"column_start":5,"column_end":77}},{"value":"/            Duration::seconds(60));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228442,"byte_end":228480,"line_start":670,"line_end":670,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 0, 0), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228485,"byte_end":228558,"line_start":671,"line_end":671,"column_start":5,"column_end":78}},{"value":"/            Duration::seconds(1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228563,"byte_end":228600,"line_start":672,"line_end":672,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(since(from_hmsm(3, 0, 59, 1_000), from_hmsm(2, 59, 59, 1_000)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228605,"byte_end":228683,"line_start":673,"line_end":673,"column_start":5,"column_end":83}},{"value":"/            Duration::seconds(61));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228688,"byte_end":228726,"line_start":674,"line_end":674,"column_start":5,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228731,"byte_end":228738,"line_start":675,"line_end":675,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":228743,"byte_end":228751,"line_start":676,"line_end":676,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231230,"byte_end":231247,"line_start":732,"line_end":732,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the time with the specified formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230055,"byte_end":230112,"line_start":703,"line_end":703,"column_start":5,"column_end":62}},{"value":"/ Otherwise it is same to the ordinary [`format`](#method.format) method.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230117,"byte_end":230192,"line_start":704,"line_end":704,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230197,"byte_end":230200,"line_start":705,"line_end":705,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230205,"byte_end":230255,"line_start":706,"line_end":706,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230260,"byte_end":230338,"line_start":707,"line_end":707,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230343,"byte_end":230346,"line_start":708,"line_end":708,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230351,"byte_end":230364,"line_start":709,"line_end":709,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230369,"byte_end":230372,"line_start":710,"line_end":710,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230377,"byte_end":230385,"line_start":711,"line_end":711,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230390,"byte_end":230416,"line_start":712,"line_end":712,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230421,"byte_end":230469,"line_start":713,"line_end":713,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230474,"byte_end":230477,"line_start":714,"line_end":714,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%H:%M:%S\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230482,"byte_end":230527,"line_start":715,"line_end":715,"column_start":5,"column_end":50}},{"value":"/ let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230532,"byte_end":230575,"line_start":716,"line_end":716,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(t.format_with_items(fmt.clone()).to_string(), \"23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230580,"byte_end":230653,"line_start":717,"line_end":717,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(),             \"23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230658,"byte_end":230731,"line_start":718,"line_end":718,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230736,"byte_end":230744,"line_start":719,"line_end":719,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230749,"byte_end":230752,"line_start":720,"line_end":720,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230757,"byte_end":230841,"line_start":721,"line_end":721,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230846,"byte_end":230849,"line_start":722,"line_end":722,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230854,"byte_end":230862,"line_start":723,"line_end":723,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230867,"byte_end":230895,"line_start":724,"line_end":724,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230900,"byte_end":230950,"line_start":725,"line_end":725,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%H:%M:%S\").clone();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":230955,"byte_end":231010,"line_start":726,"line_end":726,"column_start":5,"column_end":60}},{"value":"/ # let t = NaiveTime::from_hms(23, 56, 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231015,"byte_end":231060,"line_start":727,"line_end":727,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(format!(\"{}\", t.format_with_items(fmt)), \"23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231065,"byte_end":231133,"line_start":728,"line_end":728,"column_start":5,"column_end":73}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231138,"byte_end":231146,"line_start":729,"line_end":729,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231151,"byte_end":231204,"line_start":730,"line_end":730,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231209,"byte_end":231218,"line_start":731,"line_end":731,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233053,"byte_end":233059,"line_start":773,"line_end":773,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the time with the specified format string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231428,"byte_end":231482,"line_start":737,"line_end":737,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231487,"byte_end":231557,"line_start":738,"line_end":738,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231562,"byte_end":231600,"line_start":739,"line_end":739,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231605,"byte_end":231608,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231613,"byte_end":231648,"line_start":741,"line_end":741,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231653,"byte_end":231726,"line_start":742,"line_end":742,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231731,"byte_end":231788,"line_start":743,"line_end":743,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231793,"byte_end":231855,"line_start":744,"line_end":744,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231860,"byte_end":231920,"line_start":745,"line_end":745,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231925,"byte_end":231928,"line_start":746,"line_end":746,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":231933,"byte_end":231997,"line_start":747,"line_end":747,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232002,"byte_end":232065,"line_start":748,"line_end":748,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232070,"byte_end":232145,"line_start":749,"line_end":749,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232150,"byte_end":232153,"line_start":750,"line_end":750,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232158,"byte_end":232171,"line_start":751,"line_end":751,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232176,"byte_end":232179,"line_start":752,"line_end":752,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232184,"byte_end":232192,"line_start":753,"line_end":753,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232197,"byte_end":232223,"line_start":754,"line_end":754,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232228,"byte_end":232231,"line_start":755,"line_end":755,"column_start":5,"column_end":8}},{"value":"/ let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232236,"byte_end":232296,"line_start":756,"line_end":756,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S\").to_string(), \"23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232301,"byte_end":232362,"line_start":757,"line_end":757,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(t.format(\"%H:%M:%S%.6f\").to_string(), \"23:56:04.012345\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232367,"byte_end":232439,"line_start":758,"line_end":758,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(t.format(\"%-I:%M %p\").to_string(), \"11:56 PM\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232444,"byte_end":232506,"line_start":759,"line_end":759,"column_start":5,"column_end":67}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232511,"byte_end":232519,"line_start":760,"line_end":760,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232524,"byte_end":232527,"line_start":761,"line_end":761,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232532,"byte_end":232616,"line_start":762,"line_end":762,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232621,"byte_end":232624,"line_start":763,"line_end":763,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232629,"byte_end":232637,"line_start":764,"line_end":764,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232642,"byte_end":232670,"line_start":765,"line_end":765,"column_start":5,"column_end":33}},{"value":"/ # let t = NaiveTime::from_hms_nano(23, 56, 4, 12_345_678);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232675,"byte_end":232737,"line_start":766,"line_end":766,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S\")), \"23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232742,"byte_end":232806,"line_start":767,"line_end":767,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%H:%M:%S%.6f\")), \"23:56:04.012345\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232811,"byte_end":232886,"line_start":768,"line_end":768,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(format!(\"{}\", t.format(\"%-I:%M %p\")), \"11:56 PM\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232891,"byte_end":232956,"line_start":769,"line_end":769,"column_start":5,"column_end":70}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232961,"byte_end":232969,"line_start":770,"line_end":770,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":232974,"byte_end":233027,"line_start":771,"line_end":771,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233032,"byte_end":233041,"line_start":772,"line_end":772,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1545},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273976,"byte_end":273989,"line_start":55,"line_end":55,"column_start":12,"column_end":25},"name":"NaiveDateTime","qualname":"::naive::datetime::NaiveDateTime","value":"NaiveDateTime {  }","parent":null,"children":[{"krate":0,"index":1546},{"krate":0,"index":1547}],"decl_id":null,"docs":" ISO 8601 combined date and time without timezone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time without timezone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273112,"byte_end":273165,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273166,"byte_end":273169,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273170,"byte_end":273183,"line_start":31,"line_end":31,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273184,"byte_end":273187,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `NaiveDateTime` is commonly created from [`NaiveDate`](./struct.NaiveDate.html).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273188,"byte_end":273272,"line_start":33,"line_end":33,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273273,"byte_end":273276,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273277,"byte_end":273285,"line_start":35,"line_end":35,"column_start":1,"column_end":9}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273286,"byte_end":273329,"line_start":36,"line_end":36,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273330,"byte_end":273333,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273334,"byte_end":273413,"line_start":38,"line_end":38,"column_start":1,"column_end":80}},{"value":"/ # let _ = dt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273414,"byte_end":273431,"line_start":39,"line_end":39,"column_start":1,"column_end":18}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273432,"byte_end":273440,"line_start":40,"line_end":40,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273441,"byte_end":273444,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ You can use typical [date-like](../trait.Datelike.html) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273445,"byte_end":273508,"line_start":42,"line_end":42,"column_start":1,"column_end":64}},{"value":"/ [time-like](../trait.Timelike.html) methods,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273509,"byte_end":273557,"line_start":43,"line_end":43,"column_start":1,"column_end":49}},{"value":"/ provided that relevant traits are in the scope.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273558,"byte_end":273609,"line_start":44,"line_end":44,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273610,"byte_end":273613,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273614,"byte_end":273622,"line_start":46,"line_end":46,"column_start":1,"column_end":9}},{"value":"/ # use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273623,"byte_end":273668,"line_start":47,"line_end":47,"column_start":1,"column_end":46}},{"value":"/ # let dt: NaiveDateTime = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273669,"byte_end":273750,"line_start":48,"line_end":48,"column_start":1,"column_end":82}},{"value":"/ use chrono::{Datelike, Timelike, Weekday};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273751,"byte_end":273797,"line_start":49,"line_end":49,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273798,"byte_end":273801,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(dt.weekday(), Weekday::Fri);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273802,"byte_end":273845,"line_start":51,"line_end":51,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(dt.num_seconds_from_midnight(), 33011);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273846,"byte_end":273900,"line_start":52,"line_end":52,"column_start":1,"column_end":55}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":273901,"byte_end":273909,"line_start":53,"line_end":53,"column_start":1,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274651,"byte_end":274654,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NaiveDateTime>::new","value":"pub fn new(NaiveDate, NaiveTime) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` from date and time components.\n Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)\n and many other helper constructors on `NaiveDate`.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` from date and time components.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274062,"byte_end":274124,"line_start":61,"line_end":61,"column_start":5,"column_end":67}},{"value":"/ Equivalent to [`date.and_time(time)`](./struct.NaiveDate.html#method.and_time)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274129,"byte_end":274211,"line_start":62,"line_end":62,"column_start":5,"column_end":87}},{"value":"/ and many other helper constructors on `NaiveDate`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274216,"byte_end":274270,"line_start":63,"line_end":63,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274275,"byte_end":274278,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274283,"byte_end":274296,"line_start":65,"line_end":65,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274301,"byte_end":274304,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274309,"byte_end":274317,"line_start":67,"line_end":67,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime, NaiveDateTime};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274322,"byte_end":274376,"line_start":68,"line_end":68,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274381,"byte_end":274384,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ let d = NaiveDate::from_ymd(2015, 6, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274389,"byte_end":274433,"line_start":70,"line_end":70,"column_start":5,"column_end":49}},{"value":"/ let t = NaiveTime::from_hms_milli(12, 34, 56, 789);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274438,"byte_end":274493,"line_start":71,"line_end":71,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274498,"byte_end":274501,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::new(d, t);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274506,"byte_end":274544,"line_start":73,"line_end":73,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(dt.date(), d);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274549,"byte_end":274578,"line_start":74,"line_end":74,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(dt.time(), t);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274583,"byte_end":274612,"line_start":75,"line_end":75,"column_start":5,"column_end":34}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274617,"byte_end":274625,"line_start":76,"line_end":76,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274630,"byte_end":274639,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275937,"byte_end":275951,"line_start":108,"line_end":108,"column_start":12,"column_end":26},"name":"from_timestamp","qualname":"<NaiveDateTime>::from_timestamp","value":"pub fn from_timestamp(i64, u32) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274768,"byte_end":274837,"line_start":82,"line_end":82,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274842,"byte_end":274881,"line_start":83,"line_end":83,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274886,"byte_end":274954,"line_start":84,"line_end":84,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274959,"byte_end":275030,"line_start":85,"line_end":85,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275035,"byte_end":275038,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ For a non-naive version of this function see","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275043,"byte_end":275091,"line_start":87,"line_end":87,"column_start":5,"column_end":53}},{"value":"/ [`TimeZone::timestamp`](../offset/trait.TimeZone.html#method.timestamp).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275096,"byte_end":275172,"line_start":88,"line_end":88,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275177,"byte_end":275180,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275185,"byte_end":275259,"line_start":90,"line_end":90,"column_start":5,"column_end":79}},{"value":"/ [leap second](./struct.NaiveTime.html#leap-second-handling). (The true \"UNIX","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275264,"byte_end":275344,"line_start":91,"line_end":91,"column_start":5,"column_end":85}},{"value":"/ timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275349,"byte_end":275410,"line_start":92,"line_end":92,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275415,"byte_end":275418,"line_start":93,"line_end":93,"column_start":5,"column_end":8}},{"value":"/ Panics on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275423,"byte_end":275498,"line_start":94,"line_end":94,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275503,"byte_end":275506,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275511,"byte_end":275524,"line_start":96,"line_end":96,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275529,"byte_end":275532,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275537,"byte_end":275545,"line_start":98,"line_end":98,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275550,"byte_end":275593,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275598,"byte_end":275601,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(0, 42_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275606,"byte_end":275664,"line_start":101,"line_end":101,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 0, 42));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275669,"byte_end":275748,"line_start":102,"line_end":102,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275753,"byte_end":275756,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDateTime::from_timestamp(1_000_000_000, 0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275761,"byte_end":275822,"line_start":104,"line_end":104,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt, NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275827,"byte_end":275898,"line_start":105,"line_end":105,"column_start":5,"column_end":76}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275903,"byte_end":275911,"line_start":106,"line_end":106,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":275916,"byte_end":275925,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277293,"byte_end":277311,"line_start":139,"line_end":139,"column_start":12,"column_end":30},"name":"from_timestamp_opt","qualname":"<NaiveDateTime>::from_timestamp_opt","value":"pub fn from_timestamp_opt(i64, u32) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `NaiveDateTime` corresponding to a UTC date and time,\n from the number of non-leap seconds\n since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")\n and the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Makes a new `NaiveDateTime` corresponding to a UTC date and time,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276136,"byte_end":276205,"line_start":113,"line_end":113,"column_start":5,"column_end":74}},{"value":"/ from the number of non-leap seconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276210,"byte_end":276249,"line_start":114,"line_end":114,"column_start":5,"column_end":44}},{"value":"/ since the midnight UTC on January 1, 1970 (aka \"UNIX timestamp\")","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276254,"byte_end":276322,"line_start":115,"line_end":115,"column_start":5,"column_end":73}},{"value":"/ and the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276327,"byte_end":276398,"line_start":116,"line_end":116,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276403,"byte_end":276406,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ The nanosecond part can exceed 1,000,000,000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276411,"byte_end":276459,"line_start":118,"line_end":118,"column_start":5,"column_end":53}},{"value":"/ in order to represent the [leap second](./struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276464,"byte_end":276554,"line_start":119,"line_end":119,"column_start":5,"column_end":95}},{"value":"/ (The true \"UNIX timestamp\" cannot represent a leap second unambiguously.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276559,"byte_end":276636,"line_start":120,"line_end":120,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276641,"byte_end":276644,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on the out-of-range number of seconds and/or invalid nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276649,"byte_end":276732,"line_start":122,"line_end":122,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276737,"byte_end":276740,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276745,"byte_end":276758,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276763,"byte_end":276766,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276771,"byte_end":276779,"line_start":126,"line_end":126,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276784,"byte_end":276827,"line_start":127,"line_end":127,"column_start":5,"column_end":48}},{"value":"/ use std::i64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276832,"byte_end":276849,"line_start":128,"line_end":128,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276854,"byte_end":276857,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let from_timestamp_opt = NaiveDateTime::from_timestamp_opt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276862,"byte_end":276925,"line_start":130,"line_end":130,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276930,"byte_end":276933,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert!(from_timestamp_opt(0, 0).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276938,"byte_end":276986,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/ assert!(from_timestamp_opt(0, 999_999_999).is_some());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":276991,"byte_end":277049,"line_start":133,"line_end":133,"column_start":5,"column_end":63}},{"value":"/ assert!(from_timestamp_opt(0, 1_500_000_000).is_some()); // leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277054,"byte_end":277129,"line_start":134,"line_end":134,"column_start":5,"column_end":80}},{"value":"/ assert!(from_timestamp_opt(0, 2_000_000_000).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277134,"byte_end":277194,"line_start":135,"line_end":135,"column_start":5,"column_end":65}},{"value":"/ assert!(from_timestamp_opt(i64::MAX, 0).is_none());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277199,"byte_end":277254,"line_start":136,"line_end":136,"column_start":5,"column_end":60}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277259,"byte_end":277267,"line_start":137,"line_end":137,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277272,"byte_end":277281,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280690,"byte_end":280704,"line_start":211,"line_end":211,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<NaiveDateTime>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and returns a new `NaiveDateTime`.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and returns a new `NaiveDateTime`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277827,"byte_end":277914,"line_start":150,"line_end":150,"column_start":5,"column_end":92}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277919,"byte_end":277989,"line_start":151,"line_end":151,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":277994,"byte_end":278032,"line_start":152,"line_end":152,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278037,"byte_end":278040,"line_start":153,"line_end":153,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278045,"byte_end":278058,"line_start":154,"line_end":154,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278063,"byte_end":278066,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278071,"byte_end":278079,"line_start":156,"line_end":156,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278084,"byte_end":278127,"line_start":157,"line_end":157,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278132,"byte_end":278135,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278140,"byte_end":278195,"line_start":159,"line_end":159,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278200,"byte_end":278203,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(parse_from_str(\"2015-09-05 23:56:04\", \"%Y-%m-%d %H:%M:%S\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278208,"byte_end":278282,"line_start":161,"line_end":161,"column_start":5,"column_end":79}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278287,"byte_end":278358,"line_start":162,"line_end":162,"column_start":5,"column_end":76}},{"value":"/ assert_eq!(parse_from_str(\"5sep2015pm012345.6789\", \"%d%b%Y%p%I%M%S%.f\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278363,"byte_end":278439,"line_start":163,"line_end":163,"column_start":5,"column_end":81}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 9, 5).and_hms_micro(13, 23, 45, 678_900)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278444,"byte_end":278531,"line_start":164,"line_end":164,"column_start":5,"column_end":92}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278536,"byte_end":278544,"line_start":165,"line_end":165,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278549,"byte_end":278552,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Offset is ignored for the purpose of parsing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278557,"byte_end":278606,"line_start":167,"line_end":167,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278611,"byte_end":278614,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278619,"byte_end":278627,"line_start":169,"line_end":169,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278632,"byte_end":278677,"line_start":170,"line_end":170,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278682,"byte_end":278739,"line_start":171,"line_end":171,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2014-5-17T12:34:56+09:30\", \"%Y-%m-%dT%H:%M:%S%z\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278744,"byte_end":278825,"line_start":172,"line_end":172,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2014, 5, 17).and_hms(12, 34, 56)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278830,"byte_end":278903,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278908,"byte_end":278916,"line_start":174,"line_end":174,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278921,"byte_end":278924,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ [Leap seconds](./struct.NaiveTime.html#leap-second-handling) are correctly handled by","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":278929,"byte_end":279018,"line_start":176,"line_end":176,"column_start":5,"column_end":94}},{"value":"/ treating any time of the form `hh:mm:60` as a leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279023,"byte_end":279085,"line_start":177,"line_end":177,"column_start":5,"column_end":67}},{"value":"/ (This equally applies to the formatting, so the round trip is possible.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279090,"byte_end":279166,"line_start":178,"line_end":178,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279171,"byte_end":279174,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279179,"byte_end":279187,"line_start":180,"line_end":180,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279192,"byte_end":279237,"line_start":181,"line_end":181,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279242,"byte_end":279299,"line_start":182,"line_end":182,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"2015-07-01 08:59:60.123\", \"%Y-%m-%d %H:%M:%S%.f\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279304,"byte_end":279385,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"/            Ok(NaiveDate::from_ymd(2015, 7, 1).and_hms_milli(8, 59, 59, 1_123)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279390,"byte_end":279474,"line_start":184,"line_end":184,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279479,"byte_end":279487,"line_start":185,"line_end":185,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279492,"byte_end":279495,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Missing seconds are assumed to be zero,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279500,"byte_end":279543,"line_start":187,"line_end":187,"column_start":5,"column_end":48}},{"value":"/ but out-of-bound times or insufficient fields are errors otherwise.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279548,"byte_end":279619,"line_start":188,"line_end":188,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279624,"byte_end":279627,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279632,"byte_end":279640,"line_start":190,"line_end":190,"column_start":5,"column_end":13}},{"value":"/ # use chrono::{NaiveDateTime, NaiveDate};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279645,"byte_end":279690,"line_start":191,"line_end":191,"column_start":5,"column_end":50}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279695,"byte_end":279752,"line_start":192,"line_end":192,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(parse_from_str(\"94/9/4 7:15\", \"%y/%m/%d %H:%M\"),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279757,"byte_end":279820,"line_start":193,"line_end":193,"column_start":5,"column_end":68}},{"value":"/            Ok(NaiveDate::from_ymd(1994, 9, 4).and_hms(7, 15, 0)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279825,"byte_end":279895,"line_start":194,"line_end":194,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279900,"byte_end":279903,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ assert!(parse_from_str(\"04m33s\", \"%Mm%Ss\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279908,"byte_end":279965,"line_start":196,"line_end":196,"column_start":5,"column_end":62}},{"value":"/ assert!(parse_from_str(\"94/9/4 12\", \"%y/%m/%d %H\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":279970,"byte_end":280035,"line_start":197,"line_end":197,"column_start":5,"column_end":70}},{"value":"/ assert!(parse_from_str(\"94/9/4 17:60\", \"%y/%m/%d %H:%M\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280040,"byte_end":280111,"line_start":198,"line_end":198,"column_start":5,"column_end":76}},{"value":"/ assert!(parse_from_str(\"94/9/4 24:00:00\", \"%y/%m/%d %H:%M:%S\").is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280116,"byte_end":280193,"line_start":199,"line_end":199,"column_start":5,"column_end":82}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280198,"byte_end":280206,"line_start":200,"line_end":200,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280211,"byte_end":280214,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ All parsed fields should be consistent to each other, otherwise it's an error.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280219,"byte_end":280301,"line_start":202,"line_end":202,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280306,"byte_end":280309,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280314,"byte_end":280322,"line_start":204,"line_end":204,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDateTime;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280327,"byte_end":280359,"line_start":205,"line_end":205,"column_start":5,"column_end":37}},{"value":"/ # let parse_from_str = NaiveDateTime::parse_from_str;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280364,"byte_end":280421,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/ let fmt = \"%Y-%m-%d %H:%M:%S = UNIX timestamp %s\";","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280426,"byte_end":280480,"line_start":207,"line_end":207,"column_start":5,"column_end":59}},{"value":"/ assert!(parse_from_str(\"2001-09-09 01:46:39 = UNIX timestamp 999999999\", fmt).is_ok());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280485,"byte_end":280576,"line_start":208,"line_end":208,"column_start":5,"column_end":96}},{"value":"/ assert!(parse_from_str(\"1970-01-01 00:00:00 = UNIX timestamp 1\", fmt).is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280581,"byte_end":280665,"line_start":209,"line_end":209,"column_start":5,"column_end":89}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280670,"byte_end":280678,"line_start":210,"line_end":210,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281226,"byte_end":281230,"line_start":228,"line_end":228,"column_start":12,"column_end":16},"name":"date","qualname":"<NaiveDateTime>::date","value":"pub fn date(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280937,"byte_end":280968,"line_start":217,"line_end":217,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280973,"byte_end":280976,"line_start":218,"line_end":218,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280981,"byte_end":280994,"line_start":219,"line_end":219,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":280999,"byte_end":281002,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281007,"byte_end":281015,"line_start":221,"line_end":221,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281020,"byte_end":281046,"line_start":222,"line_end":222,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281051,"byte_end":281054,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281059,"byte_end":281123,"line_start":224,"line_end":224,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.date(), NaiveDate::from_ymd(2016, 7, 8));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281128,"byte_end":281187,"line_start":225,"line_end":225,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281192,"byte_end":281200,"line_start":226,"line_end":226,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281205,"byte_end":281214,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281583,"byte_end":281587,"line_start":243,"line_end":243,"column_start":12,"column_end":16},"name":"time","qualname":"<NaiveDateTime>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281282,"byte_end":281313,"line_start":232,"line_end":232,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281318,"byte_end":281321,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281326,"byte_end":281339,"line_start":234,"line_end":234,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281344,"byte_end":281347,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281352,"byte_end":281360,"line_start":236,"line_end":236,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveTime};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281365,"byte_end":281404,"line_start":237,"line_end":237,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281409,"byte_end":281412,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms(9, 10, 11);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281417,"byte_end":281481,"line_start":239,"line_end":239,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.time(), NaiveTime::from_hms(9, 10, 11));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281486,"byte_end":281544,"line_start":240,"line_end":240,"column_start":5,"column_end":63}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281549,"byte_end":281557,"line_start":241,"line_end":241,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281562,"byte_end":281571,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282494,"byte_end":282503,"line_start":270,"line_end":270,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<NaiveDateTime>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since the midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since the midnight on January 1, 1970.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281639,"byte_end":281720,"line_start":247,"line_end":247,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281725,"byte_end":281728,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281733,"byte_end":281788,"line_start":249,"line_end":249,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281793,"byte_end":281881,"line_start":250,"line_end":250,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281886,"byte_end":281889,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281894,"byte_end":281907,"line_start":252,"line_end":252,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281912,"byte_end":281915,"line_start":253,"line_end":253,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281920,"byte_end":281928,"line_start":254,"line_end":254,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281933,"byte_end":281959,"line_start":255,"line_end":255,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281964,"byte_end":281967,"line_start":256,"line_end":256,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 980);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":281972,"byte_end":282045,"line_start":257,"line_end":257,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp(), 1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282050,"byte_end":282084,"line_start":258,"line_end":258,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282089,"byte_end":282092,"line_start":259,"line_end":259,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms(1, 46, 40);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282097,"byte_end":282161,"line_start":260,"line_end":260,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.timestamp(), 1_000_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282166,"byte_end":282212,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282217,"byte_end":282220,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms(23, 59, 59);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282225,"byte_end":282292,"line_start":263,"line_end":263,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(dt.timestamp(), -1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282297,"byte_end":282332,"line_start":264,"line_end":264,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282337,"byte_end":282340,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(-1, 1, 1).and_hms(0, 0, 0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282345,"byte_end":282405,"line_start":266,"line_end":266,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp(), -62198755200);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282410,"byte_end":282455,"line_start":267,"line_end":267,"column_start":5,"column_end":50}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282460,"byte_end":282468,"line_start":268,"line_end":268,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282473,"byte_end":282482,"line_start":269,"line_end":269,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283881,"byte_end":283897,"line_start":302,"line_end":302,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<NaiveDateTime>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *milliseconds* since midnight on January 1, 1970.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282805,"byte_end":282889,"line_start":277,"line_end":277,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282894,"byte_end":282897,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282902,"byte_end":282957,"line_start":279,"line_end":279,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":282962,"byte_end":283050,"line_start":280,"line_end":280,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283055,"byte_end":283058,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283063,"byte_end":283130,"line_start":282,"line_end":282,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 Million. (If this is a problem,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283135,"byte_end":283208,"line_start":283,"line_end":283,"column_start":5,"column_end":78}},{"value":"/ please file an issue to let me know what domain needs millisecond","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283213,"byte_end":283282,"line_start":284,"line_end":284,"column_start":5,"column_end":74}},{"value":"/ precision over billions of years, I'm curious.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283287,"byte_end":283338,"line_start":285,"line_end":285,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283343,"byte_end":283346,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283351,"byte_end":283364,"line_start":287,"line_end":287,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283369,"byte_end":283372,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283377,"byte_end":283385,"line_start":289,"line_end":289,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283390,"byte_end":283416,"line_start":290,"line_end":290,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283421,"byte_end":283424,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283429,"byte_end":283502,"line_start":292,"line_end":292,"column_start":5,"column_end":78}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283507,"byte_end":283552,"line_start":293,"line_end":293,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283557,"byte_end":283560,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283565,"byte_end":283640,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283645,"byte_end":283702,"line_start":296,"line_end":296,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283707,"byte_end":283710,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1969, 12, 31).and_hms_milli(23, 59, 59, 100);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283715,"byte_end":283793,"line_start":298,"line_end":298,"column_start":5,"column_end":83}},{"value":"/ assert_eq!(dt.timestamp_millis(), -900);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283798,"byte_end":283842,"line_start":299,"line_end":299,"column_start":5,"column_end":49}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283847,"byte_end":283855,"line_start":300,"line_end":300,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":283860,"byte_end":283869,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285364,"byte_end":285379,"line_start":341,"line_end":341,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<NaiveDateTime>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","sig":null,"attributes":[{"value":"/ Returns the number of non-leap *nanoseconds* since midnight on January 1, 1970.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284028,"byte_end":284111,"line_start":307,"line_end":307,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284116,"byte_end":284119,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ Note that this does *not* account for the timezone!","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284124,"byte_end":284179,"line_start":309,"line_end":309,"column_start":5,"column_end":60}},{"value":"/ The true \"UNIX timestamp\" would count seconds since the midnight *UTC* on the epoch.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284184,"byte_end":284272,"line_start":310,"line_end":310,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284277,"byte_end":284280,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284285,"byte_end":284297,"line_start":312,"line_end":312,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284302,"byte_end":284305,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ Note also that this does reduce the number of years that can be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284310,"byte_end":284377,"line_start":314,"line_end":314,"column_start":5,"column_end":72}},{"value":"/ represented from ~584 Billion to ~584 years. The dates that can be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284382,"byte_end":284452,"line_start":315,"line_end":315,"column_start":5,"column_end":75}},{"value":"/ represented as nanoseconds are between 1677-09-21T00:12:44.0 and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284457,"byte_end":284525,"line_start":316,"line_end":316,"column_start":5,"column_end":73}},{"value":"/ 2262-04-11T23:47:16.854775804.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284530,"byte_end":284564,"line_start":317,"line_end":317,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284569,"byte_end":284572,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ (If this is a problem, please file an issue to let me know what domain","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284577,"byte_end":284651,"line_start":319,"line_end":319,"column_start":5,"column_end":79}},{"value":"/ needs nanosecond precision over millenia, I'm curious.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284656,"byte_end":284715,"line_start":320,"line_end":320,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284720,"byte_end":284723,"line_start":321,"line_end":321,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284728,"byte_end":284741,"line_start":322,"line_end":322,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284746,"byte_end":284749,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284754,"byte_end":284762,"line_start":324,"line_end":324,"column_start":5,"column_end":13}},{"value":"/ use chrono::{NaiveDate, NaiveDateTime};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284767,"byte_end":284810,"line_start":325,"line_end":325,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284815,"byte_end":284818,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284823,"byte_end":284895,"line_start":327,"line_end":327,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284900,"byte_end":284952,"line_start":328,"line_end":328,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284957,"byte_end":284960,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":284965,"byte_end":285039,"line_start":330,"line_end":330,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285044,"byte_end":285047,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ const A_BILLION: i64 = 1_000_000_000;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285052,"byte_end":285093,"line_start":332,"line_end":332,"column_start":5,"column_end":46}},{"value":"/ let nanos = dt.timestamp_nanos();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285098,"byte_end":285135,"line_start":333,"line_end":333,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(nanos, 1_000_000_000_000_000_555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285140,"byte_end":285189,"line_start":334,"line_end":334,"column_start":5,"column_end":54}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285194,"byte_end":285209,"line_start":335,"line_end":335,"column_start":5,"column_end":20}},{"value":"/     dt,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285214,"byte_end":285225,"line_start":336,"line_end":336,"column_start":5,"column_end":16}},{"value":"/     NaiveDateTime::from_timestamp(nanos / A_BILLION, (nanos % A_BILLION) as u32)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285230,"byte_end":285314,"line_start":337,"line_end":337,"column_start":5,"column_end":89}},{"value":"/ );","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285319,"byte_end":285325,"line_start":338,"line_end":338,"column_start":5,"column_end":11}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285330,"byte_end":285338,"line_start":339,"line_end":339,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285343,"byte_end":285352,"line_start":340,"line_end":340,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286157,"byte_end":286180,"line_start":363,"line_end":363,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<NaiveDateTime>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285518,"byte_end":285594,"line_start":346,"line_end":346,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285599,"byte_end":285602,"line_start":347,"line_end":347,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285607,"byte_end":285649,"line_start":348,"line_end":348,"column_start":5,"column_end":47}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285654,"byte_end":285736,"line_start":349,"line_end":349,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285741,"byte_end":285744,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285749,"byte_end":285762,"line_start":351,"line_end":351,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285767,"byte_end":285770,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285775,"byte_end":285783,"line_start":353,"line_end":353,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285788,"byte_end":285814,"line_start":354,"line_end":354,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285819,"byte_end":285822,"line_start":355,"line_end":355,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285827,"byte_end":285909,"line_start":356,"line_end":356,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 123);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285914,"byte_end":285964,"line_start":357,"line_end":357,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285969,"byte_end":285972,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":285977,"byte_end":286061,"line_start":359,"line_end":359,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_millis(), 1_234);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286066,"byte_end":286118,"line_start":360,"line_end":360,"column_start":5,"column_end":57}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286123,"byte_end":286131,"line_start":361,"line_end":361,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286136,"byte_end":286145,"line_start":362,"line_end":362,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286913,"byte_end":286936,"line_start":384,"line_end":384,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<NaiveDateTime>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286258,"byte_end":286334,"line_start":367,"line_end":367,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286339,"byte_end":286342,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286347,"byte_end":286393,"line_start":369,"line_end":369,"column_start":5,"column_end":51}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286398,"byte_end":286484,"line_start":370,"line_end":370,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286489,"byte_end":286492,"line_start":371,"line_end":371,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286497,"byte_end":286510,"line_start":372,"line_end":372,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286515,"byte_end":286518,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286523,"byte_end":286531,"line_start":374,"line_end":374,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286536,"byte_end":286562,"line_start":375,"line_end":375,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286567,"byte_end":286570,"line_start":376,"line_end":376,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286575,"byte_end":286657,"line_start":377,"line_end":377,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 123_456);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286662,"byte_end":286716,"line_start":378,"line_end":378,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286721,"byte_end":286724,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286729,"byte_end":286813,"line_start":380,"line_end":380,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_micros(), 1_234_567);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286818,"byte_end":286874,"line_start":381,"line_end":381,"column_start":5,"column_end":61}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286879,"byte_end":286887,"line_start":382,"line_end":382,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":286892,"byte_end":286901,"line_start":383,"line_end":383,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287678,"byte_end":287700,"line_start":405,"line_end":405,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<NaiveDateTime>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last whole non-leap second.","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287010,"byte_end":287085,"line_start":388,"line_end":388,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287090,"byte_end":287093,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 999,999,999,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287098,"byte_end":287148,"line_start":390,"line_end":390,"column_start":5,"column_end":55}},{"value":"/ or for [leap seconds](./struct.NaiveTime.html#leap-second-handling), to 1,999,999,999.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287153,"byte_end":287243,"line_start":391,"line_end":391,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287248,"byte_end":287251,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287256,"byte_end":287269,"line_start":393,"line_end":393,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287274,"byte_end":287277,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287282,"byte_end":287290,"line_start":395,"line_end":395,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287295,"byte_end":287321,"line_start":396,"line_end":396,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287326,"byte_end":287329,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2016, 7, 8).and_hms_nano(9, 10, 11, 123_456_789);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287334,"byte_end":287416,"line_start":398,"line_end":398,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 123_456_789);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287421,"byte_end":287478,"line_start":399,"line_end":399,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287483,"byte_end":287486,"line_start":400,"line_end":400,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 7, 1).and_hms_nano(8, 59, 59, 1_234_567_890);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287491,"byte_end":287575,"line_start":401,"line_end":401,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(dt.timestamp_subsec_nanos(), 1_234_567_890);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287580,"byte_end":287639,"line_start":402,"line_end":402,"column_start":5,"column_end":64}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287644,"byte_end":287652,"line_start":403,"line_end":403,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287657,"byte_end":287666,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291079,"byte_end":291097,"line_start":483,"line_end":483,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<NaiveDateTime>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287759,"byte_end":287814,"line_start":409,"line_end":409,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287819,"byte_end":287822,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287827,"byte_end":287922,"line_start":411,"line_end":411,"column_start":5,"column_end":100}},{"value":"/ the addition assumes that **there is no leap second ever**,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287927,"byte_end":287990,"line_start":412,"line_end":412,"column_start":5,"column_end":68}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":287995,"byte_end":288062,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288067,"byte_end":288160,"line_start":414,"line_end":414,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288165,"byte_end":288168,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288173,"byte_end":288224,"line_start":416,"line_end":416,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288229,"byte_end":288232,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288237,"byte_end":288250,"line_start":418,"line_end":418,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288255,"byte_end":288258,"line_start":419,"line_end":419,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288263,"byte_end":288271,"line_start":420,"line_end":420,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288276,"byte_end":288333,"line_start":421,"line_end":421,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288338,"byte_end":288364,"line_start":422,"line_end":422,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288369,"byte_end":288392,"line_start":423,"line_end":423,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288397,"byte_end":288400,"line_start":424,"line_end":424,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288405,"byte_end":288444,"line_start":425,"line_end":425,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288449,"byte_end":288452,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288457,"byte_end":288490,"line_start":427,"line_end":427,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288495,"byte_end":288538,"line_start":428,"line_end":428,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::zero()),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288543,"byte_end":288608,"line_start":429,"line_end":429,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288613,"byte_end":288648,"line_start":430,"line_end":430,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(1)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288653,"byte_end":288722,"line_start":431,"line_end":431,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288727,"byte_end":288762,"line_start":432,"line_end":432,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(-1)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288767,"byte_end":288837,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288842,"byte_end":288877,"line_start":434,"line_end":434,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288882,"byte_end":288959,"line_start":435,"line_end":435,"column_start":5,"column_end":82}},{"value":"/            Some(hms(4, 6, 7)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":288964,"byte_end":288999,"line_start":436,"line_end":436,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::seconds(86_400)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289004,"byte_end":289078,"line_start":437,"line_end":437,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms(3, 5, 7)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289083,"byte_end":289143,"line_start":438,"line_end":438,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289148,"byte_end":289151,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289156,"byte_end":289220,"line_start":440,"line_end":440,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 980).checked_add_signed(Duration::milliseconds(450)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289225,"byte_end":289307,"line_start":441,"line_end":441,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 8, 430)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289312,"byte_end":289353,"line_start":442,"line_end":442,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289358,"byte_end":289365,"line_start":443,"line_end":443,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289370,"byte_end":289378,"line_start":444,"line_end":444,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289383,"byte_end":289386,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289391,"byte_end":289419,"line_start":446,"line_end":446,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289424,"byte_end":289427,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289432,"byte_end":289440,"line_start":448,"line_end":448,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289445,"byte_end":289502,"line_start":449,"line_end":449,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289507,"byte_end":289535,"line_start":450,"line_end":450,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289540,"byte_end":289565,"line_start":451,"line_end":451,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289570,"byte_end":289645,"line_start":452,"line_end":452,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_add_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289650,"byte_end":289735,"line_start":453,"line_end":453,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289740,"byte_end":289747,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289752,"byte_end":289760,"line_start":455,"line_end":455,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289765,"byte_end":289768,"line_start":456,"line_end":456,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289773,"byte_end":289802,"line_start":457,"line_end":457,"column_start":5,"column_end":34}},{"value":"/ but the addition assumes that it is the only leap second happened.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289807,"byte_end":289877,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289882,"byte_end":289885,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289890,"byte_end":289898,"line_start":460,"line_end":460,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289903,"byte_end":289960,"line_start":461,"line_end":461,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289965,"byte_end":289993,"line_start":462,"line_end":462,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":289998,"byte_end":290023,"line_start":463,"line_end":463,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290028,"byte_end":290069,"line_start":464,"line_end":464,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290074,"byte_end":290159,"line_start":465,"line_end":465,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290164,"byte_end":290201,"line_start":466,"line_end":466,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::zero()),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290206,"byte_end":290263,"line_start":467,"line_end":467,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290268,"byte_end":290312,"line_start":468,"line_end":468,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(-500)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290317,"byte_end":290386,"line_start":469,"line_end":469,"column_start":5,"column_end":74}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290391,"byte_end":290433,"line_start":470,"line_end":470,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(500)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290438,"byte_end":290506,"line_start":471,"line_end":471,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_800)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290511,"byte_end":290555,"line_start":472,"line_end":472,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::milliseconds(800)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290560,"byte_end":290628,"line_start":473,"line_end":473,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 6, 0, 100)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290633,"byte_end":290674,"line_start":474,"line_end":474,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(10)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290679,"byte_end":290741,"line_start":475,"line_end":475,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 6, 9, 300)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290746,"byte_end":290787,"line_start":476,"line_end":476,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::seconds(-10)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290792,"byte_end":290855,"line_start":477,"line_end":477,"column_start":5,"column_end":68}},{"value":"/            Some(hmsm(3, 5, 50, 300)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290860,"byte_end":290902,"line_start":478,"line_end":478,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_add_signed(Duration::days(1)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290907,"byte_end":290965,"line_start":479,"line_end":479,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 9).and_hms_milli(3, 5, 59, 300)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":290970,"byte_end":291042,"line_start":480,"line_end":480,"column_start":5,"column_end":77}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291047,"byte_end":291054,"line_start":481,"line_end":481,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291059,"byte_end":291067,"line_start":482,"line_end":482,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294641,"byte_end":294659,"line_start":565,"line_end":565,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<NaiveDateTime>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291544,"byte_end":291606,"line_start":495,"line_end":495,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291611,"byte_end":291614,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291619,"byte_end":291714,"line_start":497,"line_end":497,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291719,"byte_end":291785,"line_start":498,"line_end":498,"column_start":5,"column_end":71}},{"value":"/ except when the `NaiveDateTime` itself represents a leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291790,"byte_end":291857,"line_start":499,"line_end":499,"column_start":5,"column_end":72}},{"value":"/ in which case the assumption becomes that **there is exactly a single leap second ever**.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291862,"byte_end":291955,"line_start":500,"line_end":500,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291960,"byte_end":291963,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":291968,"byte_end":292019,"line_start":502,"line_end":502,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292024,"byte_end":292027,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292032,"byte_end":292045,"line_start":504,"line_end":504,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292050,"byte_end":292053,"line_start":505,"line_end":505,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292058,"byte_end":292066,"line_start":506,"line_end":506,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292071,"byte_end":292128,"line_start":507,"line_end":507,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292133,"byte_end":292159,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292164,"byte_end":292187,"line_start":509,"line_end":509,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292192,"byte_end":292195,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292200,"byte_end":292239,"line_start":511,"line_end":511,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292244,"byte_end":292247,"line_start":512,"line_end":512,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292252,"byte_end":292285,"line_start":513,"line_end":513,"column_start":5,"column_end":38}},{"value":"/ let hms = |h, m, s| d.and_hms(h, m, s);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292290,"byte_end":292333,"line_start":514,"line_end":514,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::zero()),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292338,"byte_end":292403,"line_start":515,"line_end":515,"column_start":5,"column_end":70}},{"value":"/            Some(hms(3, 5, 7)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292408,"byte_end":292443,"line_start":516,"line_end":516,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(1)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292448,"byte_end":292517,"line_start":517,"line_end":517,"column_start":5,"column_end":74}},{"value":"/            Some(hms(3, 5, 6)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292522,"byte_end":292557,"line_start":518,"line_end":518,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(-1)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292562,"byte_end":292632,"line_start":519,"line_end":519,"column_start":5,"column_end":75}},{"value":"/            Some(hms(3, 5, 8)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292637,"byte_end":292672,"line_start":520,"line_end":520,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(3600 + 60)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292677,"byte_end":292754,"line_start":521,"line_end":521,"column_start":5,"column_end":82}},{"value":"/            Some(hms(2, 4, 7)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292759,"byte_end":292794,"line_start":522,"line_end":522,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::seconds(86_400)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292799,"byte_end":292873,"line_start":523,"line_end":523,"column_start":5,"column_end":79}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms(3, 5, 7)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292878,"byte_end":292938,"line_start":524,"line_end":524,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292943,"byte_end":292946,"line_start":525,"line_end":525,"column_start":5,"column_end":8}},{"value":"/ let hmsm = |h, m, s, milli| d.and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":292951,"byte_end":293015,"line_start":526,"line_end":526,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(hmsm(3, 5, 7, 450).checked_sub_signed(Duration::milliseconds(670)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293020,"byte_end":293102,"line_start":527,"line_end":527,"column_start":5,"column_end":87}},{"value":"/            Some(hmsm(3, 5, 6, 780)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293107,"byte_end":293148,"line_start":528,"line_end":528,"column_start":5,"column_end":46}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293153,"byte_end":293160,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293165,"byte_end":293173,"line_start":530,"line_end":530,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293178,"byte_end":293181,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Overflow returns `None`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293186,"byte_end":293214,"line_start":532,"line_end":532,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293219,"byte_end":293222,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293227,"byte_end":293235,"line_start":534,"line_end":534,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293240,"byte_end":293297,"line_start":535,"line_end":535,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293302,"byte_end":293330,"line_start":536,"line_end":536,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293335,"byte_end":293360,"line_start":537,"line_end":537,"column_start":5,"column_end":30}},{"value":"/ # let hms = |h, m, s| NaiveDate::from_ymd(2016, 7, 8).and_hms(h, m, s);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293365,"byte_end":293440,"line_start":538,"line_end":538,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(hms(3, 5, 7).checked_sub_signed(Duration::days(1_000_000_000)), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293445,"byte_end":293530,"line_start":539,"line_end":539,"column_start":5,"column_end":90}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293535,"byte_end":293542,"line_start":540,"line_end":540,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293547,"byte_end":293555,"line_start":541,"line_end":541,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293560,"byte_end":293563,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293568,"byte_end":293597,"line_start":543,"line_end":543,"column_start":5,"column_end":34}},{"value":"/ but the subtraction assumes that it is the only leap second happened.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293602,"byte_end":293675,"line_start":544,"line_end":544,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293680,"byte_end":293683,"line_start":545,"line_end":545,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293688,"byte_end":293696,"line_start":546,"line_end":546,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293701,"byte_end":293758,"line_start":547,"line_end":547,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293763,"byte_end":293791,"line_start":548,"line_end":548,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293796,"byte_end":293821,"line_start":549,"line_end":549,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293826,"byte_end":293867,"line_start":550,"line_end":550,"column_start":5,"column_end":46}},{"value":"/ # let hmsm = |h, m, s, milli| from_ymd(2016, 7, 8).and_hms_milli(h, m, s, milli);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293872,"byte_end":293957,"line_start":551,"line_end":551,"column_start":5,"column_end":90}},{"value":"/ let leap = hmsm(3, 5, 59, 1_300);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":293962,"byte_end":293999,"line_start":552,"line_end":552,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::zero()),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294004,"byte_end":294061,"line_start":553,"line_end":553,"column_start":5,"column_end":62}},{"value":"/            Some(hmsm(3, 5, 59, 1_300)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294066,"byte_end":294110,"line_start":554,"line_end":554,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(200)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294115,"byte_end":294183,"line_start":555,"line_end":555,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 1_100)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294188,"byte_end":294232,"line_start":556,"line_end":556,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::milliseconds(500)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294237,"byte_end":294305,"line_start":557,"line_end":557,"column_start":5,"column_end":73}},{"value":"/            Some(hmsm(3, 5, 59, 800)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294310,"byte_end":294352,"line_start":558,"line_end":558,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::seconds(60)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294357,"byte_end":294419,"line_start":559,"line_end":559,"column_start":5,"column_end":67}},{"value":"/            Some(hmsm(3, 5, 0, 300)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294424,"byte_end":294465,"line_start":560,"line_end":560,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(leap.checked_sub_signed(Duration::days(1)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294470,"byte_end":294528,"line_start":561,"line_end":561,"column_start":5,"column_end":63}},{"value":"/            Some(from_ymd(2016, 7, 7).and_hms_milli(3, 6, 0, 300)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294533,"byte_end":294604,"line_start":562,"line_end":562,"column_start":5,"column_end":76}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294609,"byte_end":294616,"line_start":563,"line_end":563,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":294621,"byte_end":294629,"line_start":564,"line_end":564,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297068,"byte_end":297089,"line_start":621,"line_end":621,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<NaiveDateTime>::signed_duration_since","value":"pub fn signed_duration_since(Self, NaiveDateTime) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `NaiveDateTime` from the current date and time.\n This does not overflow or underflow at all.","sig":null,"attributes":[{"value":"/ Subtracts another `NaiveDateTime` from the current date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295106,"byte_end":295175,"line_start":577,"line_end":577,"column_start":5,"column_end":74}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295180,"byte_end":295227,"line_start":578,"line_end":578,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295232,"byte_end":295235,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ As a part of Chrono's [leap second handling](./struct.NaiveTime.html#leap-second-handling),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295240,"byte_end":295335,"line_start":580,"line_end":580,"column_start":5,"column_end":100}},{"value":"/ the subtraction assumes that **there is no leap second ever**,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295340,"byte_end":295406,"line_start":581,"line_end":581,"column_start":5,"column_end":71}},{"value":"/ except when any of the `NaiveDateTime`s themselves represents a leap second","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295411,"byte_end":295490,"line_start":582,"line_end":582,"column_start":5,"column_end":84}},{"value":"/ in which case the assumption becomes that","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295495,"byte_end":295540,"line_start":583,"line_end":583,"column_start":5,"column_end":50}},{"value":"/ **there are exactly one (or two) leap second(s) ever**.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295545,"byte_end":295604,"line_start":584,"line_end":584,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295609,"byte_end":295612,"line_start":585,"line_end":585,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295617,"byte_end":295630,"line_start":586,"line_end":586,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295635,"byte_end":295638,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295643,"byte_end":295651,"line_start":588,"line_end":588,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295656,"byte_end":295713,"line_start":589,"line_end":589,"column_start":5,"column_end":62}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295718,"byte_end":295744,"line_start":590,"line_end":590,"column_start":5,"column_end":31}},{"value":"/ use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295749,"byte_end":295772,"line_start":591,"line_end":591,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295777,"byte_end":295780,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295785,"byte_end":295824,"line_start":593,"line_end":593,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295829,"byte_end":295832,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ let d = from_ymd(2016, 7, 8);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295837,"byte_end":295870,"line_start":595,"line_end":595,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(d.and_hms(3, 5, 7).signed_duration_since(d.and_hms(2, 4, 6)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295875,"byte_end":295951,"line_start":596,"line_end":596,"column_start":5,"column_end":81}},{"value":"/            Duration::seconds(3600 + 60 + 1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":295956,"byte_end":296005,"line_start":597,"line_end":597,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296010,"byte_end":296013,"line_start":598,"line_end":598,"column_start":5,"column_end":8}},{"value":"/ // July 8 is 190th day in the year 2016","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296018,"byte_end":296061,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/ let d0 = from_ymd(2016, 1, 1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296066,"byte_end":296100,"line_start":600,"line_end":600,"column_start":5,"column_end":39}},{"value":"/ assert_eq!(d.and_hms_milli(0, 7, 6, 500).signed_duration_since(d0.and_hms(0, 0, 0)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296105,"byte_end":296193,"line_start":601,"line_end":601,"column_start":5,"column_end":93}},{"value":"/            Duration::seconds(189 * 86_400 + 7 * 60 + 6) + Duration::milliseconds(500));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296198,"byte_end":296289,"line_start":602,"line_end":602,"column_start":5,"column_end":96}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296294,"byte_end":296301,"line_start":603,"line_end":603,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296306,"byte_end":296314,"line_start":604,"line_end":604,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296319,"byte_end":296322,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ Leap seconds are handled, but the subtraction assumes that","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296327,"byte_end":296389,"line_start":606,"line_end":606,"column_start":5,"column_end":67}},{"value":"/ there were no other leap seconds happened.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296394,"byte_end":296440,"line_start":607,"line_end":607,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296445,"byte_end":296448,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296453,"byte_end":296461,"line_start":609,"line_end":609,"column_start":5,"column_end":13}},{"value":"/ # extern crate chrono; extern crate time; fn main() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296466,"byte_end":296523,"line_start":610,"line_end":610,"column_start":5,"column_end":62}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296528,"byte_end":296556,"line_start":611,"line_end":611,"column_start":5,"column_end":33}},{"value":"/ # use time::Duration;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296561,"byte_end":296586,"line_start":612,"line_end":612,"column_start":5,"column_end":30}},{"value":"/ # let from_ymd = NaiveDate::from_ymd;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296591,"byte_end":296632,"line_start":613,"line_end":613,"column_start":5,"column_end":46}},{"value":"/ let leap = from_ymd(2015, 6, 30).and_hms_milli(23, 59, 59, 1_500);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296637,"byte_end":296707,"line_start":614,"line_end":614,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(leap.signed_duration_since(from_ymd(2015, 6, 30).and_hms(23, 0, 0)),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296712,"byte_end":296795,"line_start":615,"line_end":615,"column_start":5,"column_end":88}},{"value":"/            Duration::seconds(3600) + Duration::milliseconds(500));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296800,"byte_end":296870,"line_start":616,"line_end":616,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(from_ymd(2015, 7, 1).and_hms(1, 0, 0).signed_duration_since(leap),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296875,"byte_end":296956,"line_start":617,"line_end":617,"column_start":5,"column_end":86}},{"value":"/            Duration::seconds(3600) - Duration::milliseconds(500));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":296961,"byte_end":297031,"line_start":618,"line_end":618,"column_start":5,"column_end":75}},{"value":"/ # }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297036,"byte_end":297043,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297048,"byte_end":297056,"line_start":620,"line_end":620,"column_start":5,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298527,"byte_end":298544,"line_start":654,"line_end":654,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<NaiveDateTime>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n Otherwise it is same to the ordinary [`format`](#method.format) method.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297238,"byte_end":297313,"line_start":625,"line_end":625,"column_start":5,"column_end":80}},{"value":"/ Otherwise it is same to the ordinary [`format`](#method.format) method.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297318,"byte_end":297393,"line_start":626,"line_end":626,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297398,"byte_end":297401,"line_start":627,"line_end":627,"column_start":5,"column_end":8}},{"value":"/ The `Iterator` of items should be `Clone`able,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297406,"byte_end":297456,"line_start":628,"line_end":628,"column_start":5,"column_end":55}},{"value":"/ since the resulting `DelayedFormat` value may be formatted multiple times.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297461,"byte_end":297539,"line_start":629,"line_end":629,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297544,"byte_end":297547,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297552,"byte_end":297565,"line_start":631,"line_end":631,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297570,"byte_end":297573,"line_start":632,"line_end":632,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297578,"byte_end":297586,"line_start":633,"line_end":633,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297591,"byte_end":297617,"line_start":634,"line_end":634,"column_start":5,"column_end":31}},{"value":"/ use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297622,"byte_end":297670,"line_start":635,"line_end":635,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297675,"byte_end":297678,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297683,"byte_end":297737,"line_start":637,"line_end":637,"column_start":5,"column_end":59}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297742,"byte_end":297806,"line_start":638,"line_end":638,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format_with_items(fmt.clone()).to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297811,"byte_end":297896,"line_start":639,"line_end":639,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(),    \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297901,"byte_end":297986,"line_start":640,"line_end":640,"column_start":5,"column_end":90}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":297991,"byte_end":297999,"line_start":641,"line_end":641,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298004,"byte_end":298007,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298012,"byte_end":298096,"line_start":643,"line_end":643,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298101,"byte_end":298104,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298109,"byte_end":298117,"line_start":645,"line_end":645,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298122,"byte_end":298150,"line_start":646,"line_end":646,"column_start":5,"column_end":33}},{"value":"/ # use chrono::format::strftime::StrftimeItems;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298155,"byte_end":298205,"line_start":647,"line_end":647,"column_start":5,"column_end":55}},{"value":"/ # let fmt = StrftimeItems::new(\"%Y-%m-%d %H:%M:%S\").clone();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298210,"byte_end":298274,"line_start":648,"line_end":648,"column_start":5,"column_end":69}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298279,"byte_end":298345,"line_start":649,"line_end":649,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format_with_items(fmt)), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298350,"byte_end":298430,"line_start":650,"line_end":650,"column_start":5,"column_end":85}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298435,"byte_end":298443,"line_start":651,"line_end":651,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298448,"byte_end":298501,"line_start":652,"line_end":652,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298506,"byte_end":298515,"line_start":653,"line_end":653,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300330,"byte_end":300336,"line_start":693,"line_end":693,"column_start":12,"column_end":18},"name":"format","qualname":"<NaiveDateTime>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](../format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298740,"byte_end":298812,"line_start":659,"line_end":659,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](../format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298817,"byte_end":298887,"line_start":660,"line_end":660,"column_start":5,"column_end":75}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298892,"byte_end":298930,"line_start":661,"line_end":661,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298935,"byte_end":298938,"line_start":662,"line_end":662,"column_start":5,"column_end":8}},{"value":"/ This returns a `DelayedFormat`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298943,"byte_end":298978,"line_start":663,"line_end":663,"column_start":5,"column_end":40}},{"value":"/ which gets converted to a string only when actual formatting happens.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":298983,"byte_end":299056,"line_start":664,"line_end":664,"column_start":5,"column_end":78}},{"value":"/ You may use the `to_string` method to get a `String`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299061,"byte_end":299118,"line_start":665,"line_end":665,"column_start":5,"column_end":62}},{"value":"/ or just feed it into `print!` and other formatting macros.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299123,"byte_end":299185,"line_start":666,"line_end":666,"column_start":5,"column_end":67}},{"value":"/ (In this way it avoids the redundant memory allocation.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299190,"byte_end":299250,"line_start":667,"line_end":667,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299255,"byte_end":299258,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ A wrong format string does *not* issue an error immediately.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299263,"byte_end":299327,"line_start":669,"line_end":669,"column_start":5,"column_end":69}},{"value":"/ Rather, converting or formatting the `DelayedFormat` fails.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299332,"byte_end":299395,"line_start":670,"line_end":670,"column_start":5,"column_end":68}},{"value":"/ You are recommended to immediately use `DelayedFormat` for this reason.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299400,"byte_end":299475,"line_start":671,"line_end":671,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299480,"byte_end":299483,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299488,"byte_end":299501,"line_start":673,"line_end":673,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299506,"byte_end":299509,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299514,"byte_end":299522,"line_start":675,"line_end":675,"column_start":5,"column_end":13}},{"value":"/ use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299527,"byte_end":299553,"line_start":676,"line_end":676,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299558,"byte_end":299561,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299566,"byte_end":299630,"line_start":678,"line_end":678,"column_start":5,"column_end":69}},{"value":"/ assert_eq!(dt.format(\"%Y-%m-%d %H:%M:%S\").to_string(), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299635,"byte_end":299717,"line_start":679,"line_end":679,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(dt.format(\"around %l %p on %b %-d\").to_string(), \"around 11 PM on Sep 5\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299722,"byte_end":299811,"line_start":680,"line_end":680,"column_start":5,"column_end":94}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299816,"byte_end":299824,"line_start":681,"line_end":681,"column_start":5,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299829,"byte_end":299832,"line_start":682,"line_end":682,"column_start":5,"column_end":8}},{"value":"/ The resulting `DelayedFormat` can be formatted directly via the `Display` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299837,"byte_end":299921,"line_start":683,"line_end":683,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299926,"byte_end":299929,"line_start":684,"line_end":684,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299934,"byte_end":299942,"line_start":685,"line_end":685,"column_start":5,"column_end":13}},{"value":"/ # use chrono::NaiveDate;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299947,"byte_end":299975,"line_start":686,"line_end":686,"column_start":5,"column_end":33}},{"value":"/ # let dt = NaiveDate::from_ymd(2015, 9, 5).and_hms(23, 56, 4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":299980,"byte_end":300046,"line_start":687,"line_end":687,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"%Y-%m-%d %H:%M:%S\")), \"2015-09-05 23:56:04\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300051,"byte_end":300136,"line_start":688,"line_end":688,"column_start":5,"column_end":90}},{"value":"/ assert_eq!(format!(\"{}\", dt.format(\"around %l %p on %b %-d\")), \"around 11 PM on Sep 5\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300141,"byte_end":300233,"line_start":689,"line_end":689,"column_start":5,"column_end":97}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300238,"byte_end":300246,"line_start":690,"line_end":690,"column_start":5,"column_end":13}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300251,"byte_end":300304,"line_start":691,"line_end":691,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300309,"byte_end":300318,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1570},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366877,"byte_end":366881,"line_start":44,"line_end":44,"column_start":12,"column_end":16},"name":"Date","qualname":"::date::Date","value":"Date {  }","parent":null,"children":[{"krate":0,"index":1572},{"krate":0,"index":1573}],"decl_id":null,"docs":" ISO 8601 calendar date with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 calendar date with time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365504,"byte_end":365546,"line_start":19,"line_end":19,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365547,"byte_end":365550,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ This type should be considered ambiguous at best,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365551,"byte_end":365604,"line_start":21,"line_end":21,"column_start":1,"column_end":54}},{"value":"/ due to the inherent lack of precision required for the time zone resolution.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365605,"byte_end":365685,"line_start":22,"line_end":22,"column_start":1,"column_end":81}},{"value":"/ For serialization and deserialization uses, it is best to use `NaiveDate` instead.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365686,"byte_end":365772,"line_start":23,"line_end":23,"column_start":1,"column_end":87}},{"value":"/ There are some guarantees on the usage of `Date<Tz>`:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365773,"byte_end":365830,"line_start":24,"line_end":24,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365831,"byte_end":365834,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ - If properly constructed via `TimeZone::ymd` and others without an error,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365835,"byte_end":365913,"line_start":26,"line_end":26,"column_start":1,"column_end":79}},{"value":"/   the corresponding local date should exist for at least a moment.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365914,"byte_end":365984,"line_start":27,"line_end":27,"column_start":1,"column_end":71}},{"value":"/   (It may still have a gap from the offset changes.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":365985,"byte_end":366041,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366042,"byte_end":366045,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ - The `TimeZone` is free to assign *any* `Offset` to the local date,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366046,"byte_end":366118,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/   as long as that offset did occur in given day.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366119,"byte_end":366171,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/   For example, if `2015-03-08T01:59-08:00` is followed by `2015-03-08T03:00-07:00`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366172,"byte_end":366259,"line_start":32,"line_end":32,"column_start":1,"column_end":88}},{"value":"/   it may produce either `2015-03-08-08:00` or `2015-03-08-07:00`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366260,"byte_end":366328,"line_start":33,"line_end":33,"column_start":1,"column_end":69}},{"value":"/   but *not* `2015-03-08+00:00` and others.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366329,"byte_end":366375,"line_start":34,"line_end":34,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366376,"byte_end":366379,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ - Once constructed as a full `DateTime`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366380,"byte_end":366424,"line_start":36,"line_end":36,"column_start":1,"column_end":45}},{"value":"/   `DateTime::date` and other associated methods should return those for the original `Date`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366425,"byte_end":366521,"line_start":37,"line_end":37,"column_start":1,"column_end":97}},{"value":"/   For example, if `dt = tz.ymd(y,m,d).hms(h,n,s)` were valid, `dt.date() == tz.ymd(y,m,d)`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366522,"byte_end":366617,"line_start":38,"line_end":38,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366618,"byte_end":366621,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ - The date is timezone-agnostic up to one day (i.e. practically always),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366622,"byte_end":366698,"line_start":40,"line_end":40,"column_start":1,"column_end":77}},{"value":"/   so the local date and UTC date should be equal for most cases","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366699,"byte_end":366766,"line_start":41,"line_end":41,"column_start":1,"column_end":68}},{"value":"/   even though the raw calculation between `NaiveDate` and `Duration` may not.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366767,"byte_end":366848,"line_start":42,"line_end":42,"column_start":1,"column_end":82}}]},{"kind":"Const","id":{"krate":0,"index":704},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366989,"byte_end":366997,"line_start":50,"line_end":50,"column_start":11,"column_end":19},"name":"MIN_DATE","qualname":"::date::MIN_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The minimum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The minimum possible `Date`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":366946,"byte_end":366978,"line_start":49,"line_end":49,"column_start":1,"column_end":33}}]},{"kind":"Const","id":{"krate":0,"index":705},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367099,"byte_end":367107,"line_start":52,"line_end":52,"column_start":11,"column_end":19},"name":"MAX_DATE","qualname":"::date::MAX_DATE","value":"Date<Utc>","parent":null,"children":[],"decl_id":null,"docs":" The maximum possible `Date`.\n","sig":null,"attributes":[{"value":"/ The maximum possible `Date`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367056,"byte_end":367088,"line_start":51,"line_end":51,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367456,"byte_end":367464,"line_start":60,"line_end":60,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<Date<Tz>>::from_utc","value":"pub fn from_utc(NaiveDate, Tz::Offset) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` with given *UTC* date and offset.\n The local date should be constructed via the `TimeZone` trait.\n","sig":null,"attributes":[{"value":"/ Makes a new `Date` with given *UTC* date and offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367201,"byte_end":367257,"line_start":55,"line_end":55,"column_start":5,"column_end":61}},{"value":"/ The local date should be constructed via the `TimeZone` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367262,"byte_end":367328,"line_start":56,"line_end":56,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367435,"byte_end":367444,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":709},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367765,"byte_end":367773,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"and_time","qualname":"<Date<Tz>>::and_time","value":"pub fn and_time(&Self, NaiveTime) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date and given `NaiveTime`.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date and given `NaiveTime`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367571,"byte_end":367642,"line_start":64,"line_end":64,"column_start":5,"column_end":76}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367647,"byte_end":367695,"line_start":65,"line_end":65,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367700,"byte_end":367703,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid datetime.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367708,"byte_end":367739,"line_start":67,"line_end":67,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367744,"byte_end":367753,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368170,"byte_end":368177,"line_start":79,"line_end":79,"column_start":12,"column_end":19},"name":"and_hms","qualname":"<Date<Tz>>::and_hms","value":"pub fn and_hms(&Self, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367955,"byte_end":368029,"line_start":74,"line_end":74,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368034,"byte_end":368082,"line_start":75,"line_end":75,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368087,"byte_end":368090,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute and/or second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368095,"byte_end":368144,"line_start":77,"line_end":77,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368149,"byte_end":368158,"line_start":78,"line_end":78,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":711},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368532,"byte_end":368543,"line_start":88,"line_end":88,"column_start":12,"column_end":23},"name":"and_hms_opt","qualname":"<Date<Tz>>::and_hms_opt","value":"pub fn and_hms_opt(&Self, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute and second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute and second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368309,"byte_end":368383,"line_start":83,"line_end":83,"column_start":5,"column_end":79}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368388,"byte_end":368436,"line_start":84,"line_end":84,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368441,"byte_end":368444,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute and/or second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368449,"byte_end":368506,"line_start":86,"line_end":86,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368511,"byte_end":368520,"line_start":87,"line_end":87,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":713},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369030,"byte_end":369043,"line_start":98,"line_end":98,"column_start":12,"column_end":25},"name":"and_hms_milli","qualname":"<Date<Tz>>::and_hms_milli","value":"pub fn and_hms_milli(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368704,"byte_end":368791,"line_start":92,"line_end":92,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368796,"byte_end":368876,"line_start":93,"line_end":93,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368881,"byte_end":368929,"line_start":94,"line_end":94,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368934,"byte_end":368937,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":368942,"byte_end":369004,"line_start":96,"line_end":96,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369009,"byte_end":369018,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369534,"byte_end":369551,"line_start":108,"line_end":108,"column_start":12,"column_end":29},"name":"and_hms_milli_opt","qualname":"<Date<Tz>>::and_hms_milli_opt","value":"pub fn and_hms_milli_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\n The millisecond part can exceed 1,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369200,"byte_end":369287,"line_start":102,"line_end":102,"column_start":5,"column_end":92}},{"value":"/ The millisecond part can exceed 1,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369292,"byte_end":369372,"line_start":103,"line_end":103,"column_start":5,"column_end":85}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369377,"byte_end":369425,"line_start":104,"line_end":104,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369430,"byte_end":369433,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or millisecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369438,"byte_end":369508,"line_start":106,"line_end":106,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369513,"byte_end":369522,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370096,"byte_end":370109,"line_start":119,"line_end":119,"column_start":12,"column_end":25},"name":"and_hms_micro","qualname":"<Date<Tz>>::and_hms_micro","value":"pub fn and_hms_micro(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369766,"byte_end":369853,"line_start":113,"line_end":113,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369858,"byte_end":369942,"line_start":114,"line_end":114,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":369947,"byte_end":369995,"line_start":115,"line_end":115,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370000,"byte_end":370003,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370008,"byte_end":370070,"line_start":117,"line_end":117,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370075,"byte_end":370084,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":717},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370604,"byte_end":370621,"line_start":129,"line_end":129,"column_start":12,"column_end":29},"name":"and_hms_micro_opt","qualname":"<Date<Tz>>::and_hms_micro_opt","value":"pub fn and_hms_micro_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\n The microsecond part can exceed 1,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370266,"byte_end":370353,"line_start":123,"line_end":123,"column_start":5,"column_end":92}},{"value":"/ The microsecond part can exceed 1,000,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370358,"byte_end":370442,"line_start":124,"line_end":124,"column_start":5,"column_end":89}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370447,"byte_end":370495,"line_start":125,"line_end":125,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370500,"byte_end":370503,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or microsecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370508,"byte_end":370578,"line_start":127,"line_end":127,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370583,"byte_end":370592,"line_start":128,"line_end":128,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":719},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371167,"byte_end":371179,"line_start":140,"line_end":140,"column_start":12,"column_end":24},"name":"and_hms_nano","qualname":"<Date<Tz>>::and_hms_nano","value":"pub fn and_hms_nano(&Self, u32, u32, u32, u32) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370836,"byte_end":370922,"line_start":134,"line_end":134,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":370927,"byte_end":371014,"line_start":135,"line_end":135,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371019,"byte_end":371067,"line_start":136,"line_end":136,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371072,"byte_end":371075,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ Panics on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371080,"byte_end":371141,"line_start":138,"line_end":138,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371146,"byte_end":371155,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371672,"byte_end":371688,"line_start":150,"line_end":150,"column_start":12,"column_end":28},"name":"and_hms_nano_opt","qualname":"<Date<Tz>>::and_hms_nano_opt","value":"pub fn and_hms_nano_opt(&Self, u32, u32, u32, u32) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\n The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\n The offset in the current date is preserved.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371333,"byte_end":371419,"line_start":144,"line_end":144,"column_start":5,"column_end":91}},{"value":"/ The nanosecond part can exceed 1,000,000,000 in order to represent the leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371424,"byte_end":371511,"line_start":145,"line_end":145,"column_start":5,"column_end":92}},{"value":"/ The offset in the current date is preserved.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371516,"byte_end":371564,"line_start":146,"line_end":146,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371569,"byte_end":371572,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ Returns `None` on invalid hour, minute, second and/or nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371577,"byte_end":371646,"line_start":148,"line_end":148,"column_start":5,"column_end":74}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371651,"byte_end":371660,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372033,"byte_end":372037,"line_start":159,"line_end":159,"column_start":12,"column_end":16},"name":"succ","qualname":"<Date<Tz>>::succ","value":"pub fn succ(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371899,"byte_end":371940,"line_start":155,"line_end":155,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371945,"byte_end":371948,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the last representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":371953,"byte_end":372007,"line_start":157,"line_end":157,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372012,"byte_end":372021,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":723},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372259,"byte_end":372267,"line_start":167,"line_end":167,"column_start":12,"column_end":20},"name":"succ_opt","qualname":"<Date<Tz>>::succ_opt","value":"pub fn succ_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the next date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the next date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372117,"byte_end":372158,"line_start":163,"line_end":163,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372163,"byte_end":372166,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the last representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372171,"byte_end":372233,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372238,"byte_end":372247,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":725},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372527,"byte_end":372531,"line_start":175,"line_end":175,"column_start":12,"column_end":16},"name":"pred","qualname":"<Date<Tz>>::pred","value":"pub fn pred(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372391,"byte_end":372433,"line_start":171,"line_end":171,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372438,"byte_end":372441,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Panics when `self` is the first representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372446,"byte_end":372501,"line_start":173,"line_end":173,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372506,"byte_end":372515,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372755,"byte_end":372763,"line_start":183,"line_end":183,"column_start":12,"column_end":20},"name":"pred_opt","qualname":"<Date<Tz>>::pred_opt","value":"pub fn pred_opt(&Self) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `Date` for the prior date.","sig":null,"attributes":[{"value":"/ Makes a new `Date` for the prior date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372611,"byte_end":372653,"line_start":179,"line_end":179,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372658,"byte_end":372661,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when `self` is the first representable date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372666,"byte_end":372729,"line_start":181,"line_end":181,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372734,"byte_end":372743,"line_start":182,"line_end":182,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372957,"byte_end":372963,"line_start":189,"line_end":189,"column_start":12,"column_end":18},"name":"offset","qualname":"<Date<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372887,"byte_end":372931,"line_start":187,"line_end":187,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":372936,"byte_end":372945,"line_start":188,"line_end":188,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":729},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373084,"byte_end":373092,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"timezone","qualname":"<Date<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373020,"byte_end":373058,"line_start":193,"line_end":193,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373063,"byte_end":373072,"line_start":194,"line_end":194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373318,"byte_end":373331,"line_start":202,"line_end":202,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<Date<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> Date<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `Date` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373163,"byte_end":373200,"line_start":199,"line_end":199,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `Date` (but will change the string representation).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373205,"byte_end":373292,"line_start":200,"line_end":200,"column_start":5,"column_end":92}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373297,"byte_end":373306,"line_start":201,"line_end":201,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373563,"byte_end":373581,"line_start":210,"line_end":210,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<Date<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373427,"byte_end":373473,"line_start":206,"line_end":206,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373478,"byte_end":373481,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373486,"byte_end":373537,"line_start":208,"line_end":208,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373542,"byte_end":373551,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373901,"byte_end":373919,"line_start":219,"line_end":219,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<Date<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<Date<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373758,"byte_end":373811,"line_start":215,"line_end":215,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373816,"byte_end":373819,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373824,"byte_end":373875,"line_start":217,"line_end":217,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":373880,"byte_end":373889,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374420,"byte_end":374441,"line_start":231,"line_end":231,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<Date<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, Date<Tz2>) -> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `Date` from the current date.\n Returns a `Duration` of integral numbers.","sig":null,"attributes":[{"value":"/ Subtracts another `Date` from the current date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374096,"byte_end":374147,"line_start":224,"line_end":224,"column_start":5,"column_end":56}},{"value":"/ Returns a `Duration` of integral numbers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374152,"byte_end":374197,"line_start":225,"line_end":225,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374202,"byte_end":374205,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ This does not overflow or underflow at all,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374210,"byte_end":374257,"line_start":227,"line_end":227,"column_start":5,"column_end":52}},{"value":"/ as all possible output fits in the range of `Duration`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374262,"byte_end":374321,"line_start":228,"line_end":228,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374399,"byte_end":374408,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374624,"byte_end":374633,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<Date<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC date.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374557,"byte_end":374598,"line_start":235,"line_end":235,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374603,"byte_end":374612,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":737},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374939,"byte_end":374950,"line_start":247,"line_end":247,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<Date<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDate","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local date.","sig":null,"attributes":[{"value":"/ Returns a view to the naive local date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374685,"byte_end":374728,"line_start":241,"line_end":241,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374733,"byte_end":374736,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ This is technically same to [`naive_utc`](#method.naive_utc)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374741,"byte_end":374805,"line_start":243,"line_end":243,"column_start":5,"column_end":69}},{"value":"/ because the offset is restricted to never exceed one day,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374810,"byte_end":374871,"line_start":244,"line_end":244,"column_start":5,"column_end":66}},{"value":"/ but provided for the consistency.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374876,"byte_end":374913,"line_start":245,"line_end":245,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":374918,"byte_end":374927,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375495,"byte_end":375512,"line_start":262,"line_end":262,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<Date<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375354,"byte_end":375411,"line_start":259,"line_end":259,"column_start":5,"column_end":62}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375416,"byte_end":375469,"line_start":260,"line_end":260,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375474,"byte_end":375483,"line_start":261,"line_end":261,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375987,"byte_end":375993,"line_start":272,"line_end":272,"column_start":12,"column_end":18},"name":"format","qualname":"<Date<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the date with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the date with the specified format string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375732,"byte_end":375786,"line_start":267,"line_end":267,"column_start":5,"column_end":59}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375791,"byte_end":375860,"line_start":268,"line_end":268,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375865,"byte_end":375903,"line_start":269,"line_end":269,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375908,"byte_end":375961,"line_start":270,"line_end":270,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375966,"byte_end":375975,"line_start":271,"line_end":271,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1578},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380825,"byte_end":380829,"line_start":37,"line_end":37,"column_start":5,"column_end":9},"name":"Secs","qualname":"::datetime::SecondsFormat::Secs","value":"SecondsFormat::Secs","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Format whole seconds only, with no decimal point nor subseconds.\n","sig":null,"attributes":[{"value":"/ Format whole seconds only, with no decimal point nor subseconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380752,"byte_end":380820,"line_start":36,"line_end":36,"column_start":5,"column_end":73}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1580},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380968,"byte_end":380974,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"name":"Millis","qualname":"::datetime::SecondsFormat::Millis","value":"SecondsFormat::Millis","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Use fixed 3 subsecond digits. This corresponds to\n [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n","sig":null,"attributes":[{"value":"/ Use fixed 3 subsecond digits. This corresponds to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380836,"byte_end":380889,"line_start":39,"line_end":39,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380894,"byte_end":380963,"line_start":40,"line_end":40,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1582},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381113,"byte_end":381119,"line_start":45,"line_end":45,"column_start":5,"column_end":11},"name":"Micros","qualname":"::datetime::SecondsFormat::Micros","value":"SecondsFormat::Micros","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Use fixed 6 subsecond digits. This corresponds to\n [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n","sig":null,"attributes":[{"value":"/ Use fixed 6 subsecond digits. This corresponds to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380981,"byte_end":381034,"line_start":43,"line_end":43,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381039,"byte_end":381108,"line_start":44,"line_end":44,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1584},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381258,"byte_end":381263,"line_start":49,"line_end":49,"column_start":5,"column_end":10},"name":"Nanos","qualname":"::datetime::SecondsFormat::Nanos","value":"SecondsFormat::Nanos","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Use fixed 9 subsecond digits. This corresponds to\n [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n","sig":null,"attributes":[{"value":"/ Use fixed 9 subsecond digits. This corresponds to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381126,"byte_end":381179,"line_start":47,"line_end":47,"column_start":5,"column_end":58}},{"value":"/ [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381184,"byte_end":381253,"line_start":48,"line_end":48,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1586},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381499,"byte_end":381505,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"AutoSi","qualname":"::datetime::SecondsFormat::AutoSi","value":"SecondsFormat::AutoSi","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":" Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n display all available non-zero sub-second digits.  This corresponds to\n [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381270,"byte_end":381343,"line_start":51,"line_end":51,"column_start":5,"column_end":78}},{"value":"/ display all available non-zero sub-second digits.  This corresponds to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381348,"byte_end":381422,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"/ [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381427,"byte_end":381494,"line_start":53,"line_end":53,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1588},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381565,"byte_end":381580,"line_start":58,"line_end":58,"column_start":5,"column_end":20},"name":"__NonExhaustive","qualname":"::datetime::SecondsFormat::__NonExhaustive","value":"SecondsFormat::__NonExhaustive","parent":{"krate":0,"index":1577},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1577},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380732,"byte_end":380745,"line_start":35,"line_end":35,"column_start":10,"column_end":23},"name":"SecondsFormat","qualname":"::datetime::SecondsFormat","value":"pub enum SecondsFormat {\n\n    /// Format whole seconds only, with no decimal point nor subseconds.\n    Secs,\n\n    /// Use fixed 3 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond3](format/enum.Fixed.html#variant.Nanosecond3).\n    Millis,\n\n    /// Use fixed 6 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond6](format/enum.Fixed.html#variant.Nanosecond6).\n    Micros,\n\n    /// Use fixed 9 subsecond digits. This corresponds to\n    /// [Fixed::Nanosecond9](format/enum.Fixed.html#variant.Nanosecond9).\n    Nanos,\n\n    /// Automatically select one of `Secs`, `Millis`, `Micros`, or `Nanos` to\n    /// display all available non-zero sub-second digits.  This corresponds to\n    /// [Fixed::Nanosecond](format/enum.Fixed.html#variant.Nanosecond).\n    AutoSi,\n\n    #[doc(hidden)]\n    __NonExhaustive,\n}","parent":null,"children":[{"krate":0,"index":1578},{"krate":0,"index":1580},{"krate":0,"index":1582},{"krate":0,"index":1584},{"krate":0,"index":1586},{"krate":0,"index":1588}],"decl_id":null,"docs":" Specific formatting options for seconds. This may be extended in the\n future, so exhaustive matching in external code is not recommended.","sig":null,"attributes":[{"value":"/ Specific formatting options for seconds. This may be extended in the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380469,"byte_end":380541,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ future, so exhaustive matching in external code is not recommended.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380542,"byte_end":380613,"line_start":31,"line_end":31,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380614,"byte_end":380617,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ See the `TimeZone::to_rfc3339_opts` function for usage.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":380618,"byte_end":380677,"line_start":33,"line_end":33,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1601},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381878,"byte_end":381886,"line_start":67,"line_end":67,"column_start":12,"column_end":20},"name":"DateTime","qualname":"::datetime::DateTime","value":"DateTime {  }","parent":null,"children":[{"krate":0,"index":1603},{"krate":0,"index":1604}],"decl_id":null,"docs":" ISO 8601 combined date and time with time zone.","sig":null,"attributes":[{"value":"/ ISO 8601 combined date and time with time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381585,"byte_end":381636,"line_start":61,"line_end":61,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381637,"byte_end":381640,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ There are some constructors implemented here (the `from_*` methods), but","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381641,"byte_end":381717,"line_start":63,"line_end":63,"column_start":1,"column_end":77}},{"value":"/ the general-purpose constructors are all via the methods on the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381718,"byte_end":381785,"line_start":64,"line_end":64,"column_start":1,"column_end":68}},{"value":"/ [`TimeZone`](./offset/trait.TimeZone.html) implementations.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381786,"byte_end":381849,"line_start":65,"line_end":65,"column_start":1,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":857},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382527,"byte_end":382535,"line_start":87,"line_end":87,"column_start":12,"column_end":20},"name":"from_utc","qualname":"<DateTime<Tz>>::from_utc","value":"pub fn from_utc(NaiveDateTime, Tz::Offset) -> DateTime<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DateTime` with given *UTC* datetime and offset.\n The local datetime should be constructed via the `TimeZone` trait.","sig":null,"attributes":[{"value":"/ Makes a new `DateTime` with given *UTC* datetime and offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381997,"byte_end":382061,"line_start":73,"line_end":73,"column_start":5,"column_end":69}},{"value":"/ The local datetime should be constructed via the `TimeZone` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382066,"byte_end":382136,"line_start":74,"line_end":74,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382141,"byte_end":382144,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382149,"byte_end":382162,"line_start":76,"line_end":76,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382167,"byte_end":382170,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382175,"byte_end":382183,"line_start":78,"line_end":78,"column_start":5,"column_end":13}},{"value":"/ use chrono::{DateTime, TimeZone, NaiveDateTime, Utc};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382188,"byte_end":382245,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382250,"byte_end":382253,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::<Utc>::from_utc(NaiveDateTime::from_timestamp(61, 0), Utc);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382258,"byte_end":382340,"line_start":81,"line_end":81,"column_start":5,"column_end":87}},{"value":"/ assert_eq!(Utc.timestamp(61, 0), dt);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382345,"byte_end":382386,"line_start":82,"line_end":82,"column_start":5,"column_end":46}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382391,"byte_end":382399,"line_start":83,"line_end":83,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382506,"byte_end":382515,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":858},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382723,"byte_end":382727,"line_start":93,"line_end":93,"column_start":12,"column_end":16},"name":"date","qualname":"<DateTime<Tz>>::date","value":"pub fn date(&Self) -> Date<Tz>","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a date component.\n","sig":null,"attributes":[{"value":"/ Retrieves a date component.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382666,"byte_end":382697,"line_start":91,"line_end":91,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382702,"byte_end":382711,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":859},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382952,"byte_end":382956,"line_start":100,"line_end":100,"column_start":12,"column_end":16},"name":"time","qualname":"<DateTime<Tz>>::time","value":"pub fn time(&Self) -> NaiveTime","parent":null,"children":[],"decl_id":null,"docs":" Retrieves a time component.\n Unlike `date`, this is not associated to the time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves a time component.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382831,"byte_end":382862,"line_start":97,"line_end":97,"column_start":5,"column_end":36}},{"value":"/ Unlike `date`, this is not associated to the time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382867,"byte_end":382926,"line_start":98,"line_end":98,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":382931,"byte_end":382940,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":860},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383173,"byte_end":383182,"line_start":107,"line_end":107,"column_start":12,"column_end":21},"name":"timestamp","qualname":"<DateTime<Tz>>::timestamp","value":"pub fn timestamp(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n (aka \"UNIX timestamp\").\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383039,"byte_end":383115,"line_start":104,"line_end":104,"column_start":5,"column_end":81}},{"value":"/ (aka \"UNIX timestamp\").","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383120,"byte_end":383147,"line_start":105,"line_end":105,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383152,"byte_end":383161,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":861},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384003,"byte_end":384019,"line_start":131,"line_end":131,"column_start":12,"column_end":28},"name":"timestamp_millis","qualname":"<DateTime<Tz>>::timestamp_millis","value":"pub fn timestamp_millis(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-milliseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-milliseconds since January 1, 1970 UTC","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383244,"byte_end":383317,"line_start":111,"line_end":111,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383322,"byte_end":383325,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383330,"byte_end":383404,"line_start":113,"line_end":113,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584 Million. (If this is a problem, please file","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383409,"byte_end":383482,"line_start":114,"line_end":114,"column_start":5,"column_end":78}},{"value":"/ an issue to let me know what domain needs millisecond precision over","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383487,"byte_end":383559,"line_start":115,"line_end":115,"column_start":5,"column_end":77}},{"value":"/ billions of years, I'm curious.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383564,"byte_end":383600,"line_start":116,"line_end":116,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383605,"byte_end":383608,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383613,"byte_end":383626,"line_start":118,"line_end":118,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383631,"byte_end":383634,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383639,"byte_end":383647,"line_start":120,"line_end":120,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383652,"byte_end":383672,"line_start":121,"line_end":121,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383677,"byte_end":383702,"line_start":122,"line_end":122,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383707,"byte_end":383710,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_milli(0, 0, 1, 444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383715,"byte_end":383776,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383781,"byte_end":383826,"line_start":125,"line_end":125,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383831,"byte_end":383834,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_milli(1, 46, 40, 555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383839,"byte_end":383902,"line_start":127,"line_end":127,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.timestamp_millis(), 1_000_000_000_555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383907,"byte_end":383964,"line_start":128,"line_end":128,"column_start":5,"column_end":62}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383969,"byte_end":383977,"line_start":129,"line_end":129,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":383982,"byte_end":383991,"line_start":130,"line_end":130,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384840,"byte_end":384855,"line_start":155,"line_end":155,"column_start":12,"column_end":27},"name":"timestamp_nanos","qualname":"<DateTime<Tz>>::timestamp_nanos","value":"pub fn timestamp_nanos(&Self) -> i64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","sig":null,"attributes":[{"value":"/ Returns the number of non-leap-nanoseconds since January 1, 1970 UTC","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384088,"byte_end":384160,"line_start":135,"line_end":135,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384165,"byte_end":384168,"line_start":136,"line_end":136,"column_start":5,"column_end":8}},{"value":"/ Note that this does reduce the number of years that can be represented","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384173,"byte_end":384247,"line_start":137,"line_end":137,"column_start":5,"column_end":79}},{"value":"/ from ~584 Billion to ~584. (If this is a problem, please file","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384252,"byte_end":384317,"line_start":138,"line_end":138,"column_start":5,"column_end":70}},{"value":"/ an issue to let me know what domain needs nanosecond precision over","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384322,"byte_end":384393,"line_start":139,"line_end":139,"column_start":5,"column_end":76}},{"value":"/ millenia, I'm curious.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384398,"byte_end":384425,"line_start":140,"line_end":140,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384430,"byte_end":384433,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384438,"byte_end":384451,"line_start":142,"line_end":142,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384456,"byte_end":384459,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384464,"byte_end":384472,"line_start":144,"line_end":144,"column_start":5,"column_end":13}},{"value":"/ use chrono::Utc;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384477,"byte_end":384497,"line_start":145,"line_end":145,"column_start":5,"column_end":25}},{"value":"/ use chrono::TimeZone;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384502,"byte_end":384527,"line_start":146,"line_end":146,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384532,"byte_end":384535,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(1970, 1, 1).and_hms_nano(0, 0, 1, 444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384540,"byte_end":384600,"line_start":148,"line_end":148,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_444);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384605,"byte_end":384657,"line_start":149,"line_end":149,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384662,"byte_end":384665,"line_start":150,"line_end":150,"column_start":5,"column_end":8}},{"value":"/ let dt = Utc.ymd(2001, 9, 9).and_hms_nano(1, 46, 40, 555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384670,"byte_end":384732,"line_start":151,"line_end":151,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.timestamp_nanos(), 1_000_000_000_000_000_555);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384737,"byte_end":384801,"line_start":152,"line_end":152,"column_start":5,"column_end":69}},{"value":"/ ~~~~","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384806,"byte_end":384814,"line_start":153,"line_end":153,"column_start":5,"column_end":13}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384819,"byte_end":384828,"line_start":154,"line_end":154,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":863},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385185,"byte_end":385208,"line_start":165,"line_end":165,"column_start":12,"column_end":35},"name":"timestamp_subsec_millis","qualname":"<DateTime<Tz>>::timestamp_subsec_millis","value":"pub fn timestamp_subsec_millis(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of milliseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of milliseconds since the last second boundary","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384923,"byte_end":384992,"line_start":159,"line_end":159,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":384997,"byte_end":385000,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385005,"byte_end":385064,"line_start":161,"line_end":161,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385069,"byte_end":385072,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of milliseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385077,"byte_end":385159,"line_start":163,"line_end":163,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385164,"byte_end":385173,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385550,"byte_end":385573,"line_start":175,"line_end":175,"column_start":12,"column_end":35},"name":"timestamp_subsec_micros","qualname":"<DateTime<Tz>>::timestamp_subsec_micros","value":"pub fn timestamp_subsec_micros(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of microseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of microseconds since the last second boundary","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385284,"byte_end":385353,"line_start":169,"line_end":169,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385358,"byte_end":385361,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385366,"byte_end":385429,"line_start":171,"line_end":171,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385434,"byte_end":385437,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of microseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385442,"byte_end":385524,"line_start":173,"line_end":173,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385529,"byte_end":385538,"line_start":174,"line_end":174,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":865},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385917,"byte_end":385939,"line_start":185,"line_end":185,"column_start":12,"column_end":34},"name":"timestamp_subsec_nanos","qualname":"<DateTime<Tz>>::timestamp_subsec_nanos","value":"pub fn timestamp_subsec_nanos(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the last second boundary","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the last second boundary","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385649,"byte_end":385717,"line_start":179,"line_end":179,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385722,"byte_end":385725,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ warning: in event of a leap second, this may exceed 999_999_999","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385730,"byte_end":385797,"line_start":181,"line_end":181,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385802,"byte_end":385805,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ note: this is not the number of nanoseconds since January 1, 1970 0:00:00 UTC","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385810,"byte_end":385891,"line_start":183,"line_end":183,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":385896,"byte_end":385905,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386084,"byte_end":386090,"line_start":191,"line_end":191,"column_start":12,"column_end":18},"name":"offset","qualname":"<DateTime<Tz>>::offset","value":"pub fn offset(&Self) -> &Tz::Offset","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated offset from UTC.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated offset from UTC.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386014,"byte_end":386058,"line_start":189,"line_end":189,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386063,"byte_end":386072,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":867},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386211,"byte_end":386219,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"timezone","qualname":"<DateTime<Tz>>::timezone","value":"pub fn timezone(&Self) -> Tz","parent":null,"children":[],"decl_id":null,"docs":" Retrieves an associated time zone.\n","sig":null,"attributes":[{"value":"/ Retrieves an associated time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386147,"byte_end":386185,"line_start":195,"line_end":195,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386190,"byte_end":386199,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386449,"byte_end":386462,"line_start":204,"line_end":204,"column_start":12,"column_end":25},"name":"with_timezone","qualname":"<DateTime<Tz>>::with_timezone","value":"pub fn with_timezone<Tz2: TimeZone>(&Self, &Tz2) -> DateTime<Tz2>","parent":null,"children":[],"decl_id":null,"docs":" Changes the associated time zone.\n This does not change the actual `DateTime` (but will change the string representation).\n","sig":null,"attributes":[{"value":"/ Changes the associated time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386290,"byte_end":386327,"line_start":201,"line_end":201,"column_start":5,"column_end":42}},{"value":"/ This does not change the actual `DateTime` (but will change the string representation).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386332,"byte_end":386423,"line_start":202,"line_end":202,"column_start":5,"column_end":96}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386428,"byte_end":386437,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386715,"byte_end":386733,"line_start":212,"line_end":212,"column_start":12,"column_end":30},"name":"checked_add_signed","qualname":"<DateTime<Tz>>::checked_add_signed","value":"pub fn checked_add_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Adds given `Duration` to the current date and time.","sig":null,"attributes":[{"value":"/ Adds given `Duration` to the current date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386570,"byte_end":386625,"line_start":208,"line_end":208,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386630,"byte_end":386633,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386638,"byte_end":386689,"line_start":210,"line_end":210,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386694,"byte_end":386703,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387099,"byte_end":387117,"line_start":222,"line_end":222,"column_start":12,"column_end":30},"name":"checked_sub_signed","qualname":"<DateTime<Tz>>::checked_sub_signed","value":"pub fn checked_sub_signed(Self, OldDuration) -> Option<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Subtracts given `Duration` from the current date and time.","sig":null,"attributes":[{"value":"/ Subtracts given `Duration` from the current date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":386947,"byte_end":387009,"line_start":218,"line_end":218,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387014,"byte_end":387017,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when it will result in overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387022,"byte_end":387073,"line_start":220,"line_end":220,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387078,"byte_end":387087,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387546,"byte_end":387567,"line_start":232,"line_end":232,"column_start":12,"column_end":33},"name":"signed_duration_since","qualname":"<DateTime<Tz>>::signed_duration_since","value":"pub fn signed_duration_since<Tz2: TimeZone>(Self, DateTime<Tz2>)\n-> OldDuration","parent":null,"children":[],"decl_id":null,"docs":" Subtracts another `DateTime` from the current date and time.\n This does not overflow or underflow at all.\n","sig":null,"attributes":[{"value":"/ Subtracts another `DateTime` from the current date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387331,"byte_end":387395,"line_start":228,"line_end":228,"column_start":5,"column_end":69}},{"value":"/ This does not overflow or underflow at all.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387400,"byte_end":387447,"line_start":229,"line_end":229,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387525,"byte_end":387534,"line_start":231,"line_end":231,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387766,"byte_end":387775,"line_start":238,"line_end":238,"column_start":12,"column_end":21},"name":"naive_utc","qualname":"<DateTime<Tz>>::naive_utc","value":"pub fn naive_utc(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive UTC datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive UTC datetime.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387695,"byte_end":387740,"line_start":236,"line_end":236,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387745,"byte_end":387754,"line_start":237,"line_end":237,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":875},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387908,"byte_end":387919,"line_start":244,"line_end":244,"column_start":12,"column_end":23},"name":"naive_local","qualname":"<DateTime<Tz>>::naive_local","value":"pub fn naive_local(&Self) -> NaiveDateTime","parent":null,"children":[],"decl_id":null,"docs":" Returns a view to the naive local datetime.\n","sig":null,"attributes":[{"value":"/ Returns a view to the naive local datetime.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387835,"byte_end":387882,"line_start":242,"line_end":242,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":387887,"byte_end":387896,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":893},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391311,"byte_end":391329,"line_start":327,"line_end":327,"column_start":12,"column_end":30},"name":"parse_from_rfc2822","qualname":"<DateTime<FixedOffset>>::parse_from_rfc2822","value":"pub fn parse_from_rfc2822(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\n then returns a new `DateTime` with a parsed `FixedOffset`.\n","sig":null,"attributes":[{"value":"/ Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391147,"byte_end":391232,"line_start":325,"line_end":325,"column_start":5,"column_end":90}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391237,"byte_end":391299,"line_start":326,"line_end":326,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":895},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391954,"byte_end":391972,"line_start":339,"line_end":339,"column_start":12,"column_end":30},"name":"parse_from_rfc3339","qualname":"<DateTime<FixedOffset>>::parse_from_rfc3339","value":"pub fn parse_from_rfc3339(&str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\n then returns a new `DateTime` with a parsed `FixedOffset`.","sig":null,"attributes":[{"value":"/ Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391585,"byte_end":391678,"line_start":334,"line_end":334,"column_start":5,"column_end":98}},{"value":"/ then returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391683,"byte_end":391745,"line_start":335,"line_end":335,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391750,"byte_end":391753,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ Why isn't this named `parse_from_iso8601`? That's because ISO 8601 allows some freedom","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391758,"byte_end":391848,"line_start":337,"line_end":337,"column_start":5,"column_end":95}},{"value":"/ over the syntax and RFC 3339 exercises that freedom to rigidly define a fixed format.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391853,"byte_end":391942,"line_start":338,"line_end":338,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":897},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393180,"byte_end":393194,"line_start":366,"line_end":366,"column_start":12,"column_end":26},"name":"parse_from_str","qualname":"<DateTime<FixedOffset>>::parse_from_str","value":"pub fn parse_from_str(&str, &str) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Parses a string with the specified format string and\n returns a new `DateTime` with a parsed `FixedOffset`.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.","sig":null,"attributes":[{"value":"/ Parses a string with the specified format string and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392228,"byte_end":392284,"line_start":346,"line_end":346,"column_start":5,"column_end":61}},{"value":"/ returns a new `DateTime` with a parsed `FixedOffset`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392289,"byte_end":392346,"line_start":347,"line_end":347,"column_start":5,"column_end":62}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392351,"byte_end":392420,"line_start":348,"line_end":348,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392425,"byte_end":392463,"line_start":349,"line_end":349,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392468,"byte_end":392471,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ See also `Offset::datetime_from_str` which gives a local `DateTime` on specific time zone.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392476,"byte_end":392570,"line_start":351,"line_end":351,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392575,"byte_end":392578,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ Note that this method *requires a timezone* in the string. See","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392583,"byte_end":392649,"line_start":353,"line_end":353,"column_start":5,"column_end":71}},{"value":"/ [`NaiveDateTime::parse_from_str`](./naive/struct.NaiveDateTime.html#method.parse_from_str)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392654,"byte_end":392748,"line_start":354,"line_end":354,"column_start":5,"column_end":99}},{"value":"/ for a version that does not require a timezone in the to-be-parsed str.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392753,"byte_end":392828,"line_start":355,"line_end":355,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392833,"byte_end":392836,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392841,"byte_end":392854,"line_start":357,"line_end":357,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392859,"byte_end":392862,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392867,"byte_end":392878,"line_start":359,"line_end":359,"column_start":5,"column_end":16}},{"value":"/ use chrono::{DateTime, FixedOffset, TimeZone};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392883,"byte_end":392933,"line_start":360,"line_end":360,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392938,"byte_end":392941,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ let dt = DateTime::parse_from_str(","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392946,"byte_end":392984,"line_start":362,"line_end":362,"column_start":5,"column_end":43}},{"value":"/     \"1983 Apr 13 12:09:14.274 +0000\", \"%Y %b %d %H:%M:%S%.3f %z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":392989,"byte_end":393059,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(dt, Ok(FixedOffset::east(0).ymd(1983, 4, 13).and_hms_milli(12, 9, 14, 274)));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393064,"byte_end":393156,"line_start":364,"line_end":364,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393161,"byte_end":393168,"line_start":365,"line_end":365,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393615,"byte_end":393625,"line_start":376,"line_end":376,"column_start":12,"column_end":22},"name":"to_rfc2822","qualname":"<DateTime<Tz>>::to_rfc2822","value":"pub fn to_rfc2822(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393459,"byte_end":393545,"line_start":374,"line_end":374,"column_start":5,"column_end":91}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393550,"byte_end":393603,"line_start":375,"line_end":375,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":902},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393957,"byte_end":393967,"line_start":383,"line_end":383,"column_start":12,"column_end":22},"name":"to_rfc3339","qualname":"<DateTime<Tz>>::to_rfc3339","value":"pub fn to_rfc3339(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.\n","sig":null,"attributes":[{"value":"/ Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393793,"byte_end":393887,"line_start":381,"line_end":381,"column_start":5,"column_end":99}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393892,"byte_end":393945,"line_start":382,"line_end":382,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":904},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395430,"byte_end":395445,"line_start":413,"line_end":413,"column_start":12,"column_end":27},"name":"to_rfc3339_opts","qualname":"<DateTime<Tz>>::to_rfc3339_opts","value":"pub fn to_rfc3339_opts(&Self, SecondsFormat, bool) -> String","parent":null,"children":[],"decl_id":null,"docs":" Return an RFC 3339 and ISO 8601 date and time string with subseconds\n formatted as per a `SecondsFormat`. If passed `use_z` true and the\n timezone is UTC (offset 0), use 'Z', as per\n [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).\n If passed `use_z` false, use\n [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","sig":null,"attributes":[{"value":"/ Return an RFC 3339 and ISO 8601 date and time string with subseconds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394135,"byte_end":394207,"line_start":388,"line_end":388,"column_start":5,"column_end":77}},{"value":"/ formatted as per a `SecondsFormat`. If passed `use_z` true and the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394212,"byte_end":394282,"line_start":389,"line_end":389,"column_start":5,"column_end":75}},{"value":"/ timezone is UTC (offset 0), use 'Z', as per","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394287,"byte_end":394334,"line_start":390,"line_end":390,"column_start":5,"column_end":52}},{"value":"/ [Fixed::TimezoneOffsetColonZ](format/enum.Fixed.html#variant.TimezoneOffsetColonZ).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394339,"byte_end":394426,"line_start":391,"line_end":391,"column_start":5,"column_end":92}},{"value":"/ If passed `use_z` false, use","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394431,"byte_end":394463,"line_start":392,"line_end":392,"column_start":5,"column_end":37}},{"value":"/ [Fixed::TimezoneOffsetColon](format/enum.Fixed.html#variant.TimezoneOffsetColon).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394468,"byte_end":394553,"line_start":393,"line_end":393,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394558,"byte_end":394561,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394566,"byte_end":394580,"line_start":395,"line_end":395,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394585,"byte_end":394588,"line_start":396,"line_end":396,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394593,"byte_end":394604,"line_start":397,"line_end":397,"column_start":5,"column_end":16}},{"value":"/ # use chrono::{DateTime, FixedOffset, SecondsFormat, TimeZone, Utc};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394609,"byte_end":394681,"line_start":398,"line_end":398,"column_start":5,"column_end":77}},{"value":"/ let dt = Utc.ymd(2018, 1, 26).and_hms_micro(18, 30, 9, 453_829);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394686,"byte_end":394754,"line_start":399,"line_end":399,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, false),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394759,"byte_end":394823,"line_start":400,"line_end":400,"column_start":5,"column_end":69}},{"value":"/            \"2018-01-26T18:30:09.453+00:00\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394828,"byte_end":394876,"line_start":401,"line_end":401,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Millis, true),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394881,"byte_end":394944,"line_start":402,"line_end":402,"column_start":5,"column_end":68}},{"value":"/            \"2018-01-26T18:30:09.453Z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394949,"byte_end":394992,"line_start":403,"line_end":403,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":394997,"byte_end":395058,"line_start":404,"line_end":404,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T18:30:09Z\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395063,"byte_end":395102,"line_start":405,"line_end":405,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395107,"byte_end":395110,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ let pst = FixedOffset::east(8 * 60 * 60);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395115,"byte_end":395160,"line_start":407,"line_end":407,"column_start":5,"column_end":50}},{"value":"/ let dt = pst.ymd(2018, 1, 26).and_hms_micro(10, 30, 9, 453_829);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395165,"byte_end":395233,"line_start":408,"line_end":408,"column_start":5,"column_end":73}},{"value":"/ assert_eq!(dt.to_rfc3339_opts(SecondsFormat::Secs, true),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395238,"byte_end":395299,"line_start":409,"line_end":409,"column_start":5,"column_end":66}},{"value":"/            \"2018-01-26T10:30:09+08:00\");","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395304,"byte_end":395348,"line_start":410,"line_end":410,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395353,"byte_end":395360,"line_start":411,"line_end":411,"column_start":5,"column_end":12}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":395365,"byte_end":395418,"line_start":412,"line_end":412,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397204,"byte_end":397221,"line_start":466,"line_end":466,"column_start":12,"column_end":29},"name":"format_with_items","qualname":"<DateTime<Tz>>::format_with_items","value":"pub fn format_with_items<'a, I, B>(&Self, I) -> DelayedFormat<I> where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified formatting items.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397045,"byte_end":397120,"line_start":463,"line_end":463,"column_start":5,"column_end":80}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397125,"byte_end":397178,"line_start":464,"line_end":464,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397183,"byte_end":397192,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":913},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397762,"byte_end":397768,"line_start":477,"line_end":477,"column_start":12,"column_end":18},"name":"format","qualname":"<DateTime<Tz>>::format","value":"pub fn format<'a>(&Self, &'a str) -> DelayedFormat<StrftimeItems>","parent":null,"children":[],"decl_id":null,"docs":" Formats the combined date and time with the specified format string.\n See the [`format::strftime` module](./format/strftime/index.html)\n on the supported escape sequences.\n","sig":null,"attributes":[{"value":"/ Formats the combined date and time with the specified format string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397489,"byte_end":397561,"line_start":472,"line_end":472,"column_start":5,"column_end":77}},{"value":"/ See the [`format::strftime` module](./format/strftime/index.html)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397566,"byte_end":397635,"line_start":473,"line_end":473,"column_start":5,"column_end":74}},{"value":"/ on the supported escape sequences.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397640,"byte_end":397678,"line_start":474,"line_end":474,"column_start":5,"column_end":43}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397683,"byte_end":397736,"line_start":475,"line_end":475,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397741,"byte_end":397750,"line_start":476,"line_end":476,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1012},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"format","qualname":"::format","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","parent":null,"children":[{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015},{"krate":0,"index":1016},{"krate":0,"index":1017},{"krate":0,"index":1018},{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1025},{"krate":0,"index":1026},{"krate":0,"index":1027},{"krate":0,"index":1028},{"krate":0,"index":1029},{"krate":0,"index":1030},{"krate":0,"index":1031},{"krate":0,"index":1032},{"krate":0,"index":1033},{"krate":0,"index":1034},{"krate":0,"index":1608},{"krate":0,"index":1615},{"krate":0,"index":1612},{"krate":0,"index":1613},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1617},{"krate":0,"index":1634},{"krate":0,"index":1632},{"krate":0,"index":1629},{"krate":0,"index":1630},{"krate":0,"index":1626},{"krate":0,"index":1627},{"krate":0,"index":1624},{"krate":0,"index":1635},{"krate":0,"index":1688},{"krate":0,"index":1684},{"krate":0,"index":1685},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1679},{"krate":0,"index":1035},{"krate":0,"index":1037},{"krate":0,"index":1039},{"krate":0,"index":1041},{"krate":0,"index":1042},{"krate":0,"index":1690},{"krate":0,"index":1737},{"krate":0,"index":1733},{"krate":0,"index":1734},{"krate":0,"index":1730},{"krate":0,"index":1731},{"krate":0,"index":1728},{"krate":0,"index":1739},{"krate":0,"index":1750},{"krate":0,"index":1748},{"krate":0,"index":1744},{"krate":0,"index":1745},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1752},{"krate":0,"index":1769},{"krate":0,"index":1767},{"krate":0,"index":1764},{"krate":0,"index":1765},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1771},{"krate":0,"index":1808},{"krate":0,"index":1802},{"krate":0,"index":1804},{"krate":0,"index":1797},{"krate":0,"index":1799},{"krate":0,"index":1794},{"krate":0,"index":1811},{"krate":0,"index":1824},{"krate":0,"index":1822},{"krate":0,"index":1818},{"krate":0,"index":1819},{"krate":0,"index":1815},{"krate":0,"index":1816},{"krate":0,"index":1814},{"krate":0,"index":1826},{"krate":0,"index":1850},{"krate":0,"index":1848},{"krate":0,"index":1845},{"krate":0,"index":1846},{"krate":0,"index":1842},{"krate":0,"index":1843},{"krate":0,"index":1841},{"krate":0,"index":1051},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1057},{"krate":0,"index":1059},{"krate":0,"index":1060},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1064},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1121},{"krate":0,"index":1190},{"krate":0,"index":1234},{"krate":0,"index":1267},{"krate":0,"index":1902},{"krate":0,"index":1908},{"krate":0,"index":1291},{"krate":0,"index":1298},{"krate":0,"index":1303}],"decl_id":null,"docs":" Formatting (and parsing) utilities for date and time.","sig":null,"attributes":[{"value":"/ Formatting (and parsing) utilities for date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":465691,"byte_end":465748,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":465749,"byte_end":465752,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ This module provides the common types and routines to implement,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":465753,"byte_end":465821,"line_start":6,"line_end":6,"column_start":1,"column_end":69}},{"value":"/ for example, [`DateTime::format`](../struct.DateTime.html#method.format) or","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":465822,"byte_end":465901,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/ [`DateTime::parse_from_str`](../struct.DateTime.html#method.parse_from_str) methods.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":465902,"byte_end":465990,"line_start":8,"line_end":8,"column_start":1,"column_end":89}},{"value":"/ For most cases you should use these high-level interfaces.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":465991,"byte_end":466053,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466054,"byte_end":466057,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Internally the formatting and parsing shares the same abstract **formatting items**,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466058,"byte_end":466146,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ which are just an [`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html) of","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466147,"byte_end":466240,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ the [`Item`](./enum.Item.html) type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466241,"byte_end":466281,"line_start":13,"line_end":13,"column_start":1,"column_end":41}},{"value":"/ They are generated from more readable **format strings**;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466282,"byte_end":466343,"line_start":14,"line_end":14,"column_start":1,"column_end":62}},{"value":"/ currently Chrono supports [one built-in syntax closely resembling","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466344,"byte_end":466413,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ C's `strftime` format](./strftime/index.html).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466414,"byte_end":466464,"line_start":16,"line_end":16,"column_start":1,"column_end":51}},{"value":"allow(ellipsis_inclusive_range_patterns)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":466466,"byte_end":466510,"line_start":18,"line_end":18,"column_start":1,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1618},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467478,"byte_end":467482,"line_start":52,"line_end":52,"column_start":5,"column_end":9},"name":"None","qualname":"::format::Pad::None","value":"Pad::None","parent":{"krate":0,"index":1617},"children":[],"decl_id":null,"docs":" No padding.\n","sig":null,"attributes":[{"value":"/ No padding.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467458,"byte_end":467473,"line_start":51,"line_end":51,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1620},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467516,"byte_end":467520,"line_start":54,"line_end":54,"column_start":5,"column_end":9},"name":"Zero","qualname":"::format::Pad::Zero","value":"Pad::Zero","parent":{"krate":0,"index":1617},"children":[],"decl_id":null,"docs":" Zero (`0`) padding.\n","sig":null,"attributes":[{"value":"/ Zero (`0`) padding.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467488,"byte_end":467511,"line_start":53,"line_end":53,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1622},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467549,"byte_end":467554,"line_start":56,"line_end":56,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Pad::Space","value":"Pad::Space","parent":{"krate":0,"index":1617},"children":[],"decl_id":null,"docs":" Space padding.\n","sig":null,"attributes":[{"value":"/ Space padding.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467526,"byte_end":467544,"line_start":55,"line_end":55,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1617},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467448,"byte_end":467451,"line_start":50,"line_end":50,"column_start":10,"column_end":13},"name":"Pad","qualname":"::format::Pad","value":"pub enum Pad {\n\n    /// No padding.\n    None,\n\n    /// Zero (`0`) padding.\n    Zero,\n\n    /// Space padding.\n    Space,\n}","parent":null,"children":[{"krate":0,"index":1618},{"krate":0,"index":1620},{"krate":0,"index":1622}],"decl_id":null,"docs":" Padding characters for numeric items.\n","sig":null,"attributes":[{"value":"/ Padding characters for numeric items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467352,"byte_end":467393,"line_start":48,"line_end":48,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1636},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468450,"byte_end":468454,"line_start":76,"line_end":76,"column_start":5,"column_end":9},"name":"Year","qualname":"::format::Numeric::Year","value":"Numeric::Year","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Full Gregorian year (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Full Gregorian year (FW=4, PW=∞).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468327,"byte_end":468366,"line_start":74,"line_end":74,"column_start":5,"column_end":42}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468371,"byte_end":468445,"line_start":75,"line_end":75,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1638},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468556,"byte_end":468566,"line_start":78,"line_end":78,"column_start":5,"column_end":15},"name":"YearDiv100","qualname":"::format::Numeric::YearDiv100","value":"Numeric::YearDiv100","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468460,"byte_end":468551,"line_start":77,"line_end":77,"column_start":5,"column_end":96}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1640},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468637,"byte_end":468647,"line_start":80,"line_end":80,"column_start":5,"column_end":15},"name":"YearMod100","qualname":"::format::Numeric::YearMod100","value":"Numeric::YearMod100","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Gregorian year modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468572,"byte_end":468632,"line_start":79,"line_end":79,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1642},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468782,"byte_end":468789,"line_start":83,"line_end":83,"column_start":5,"column_end":12},"name":"IsoYear","qualname":"::format::Numeric::IsoYear","value":"Numeric::IsoYear","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Year in the ISO week date (FW=4, PW=∞).\n May accept years before 1 BCE or after 9999 CE, given an initial sign.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date (FW=4, PW=∞).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468653,"byte_end":468698,"line_start":81,"line_end":81,"column_start":5,"column_end":48}},{"value":"/ May accept years before 1 BCE or after 9999 CE, given an initial sign.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468703,"byte_end":468777,"line_start":82,"line_end":82,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1644},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468887,"byte_end":468900,"line_start":85,"line_end":85,"column_start":5,"column_end":18},"name":"IsoYearDiv100","qualname":"::format::Numeric::IsoYearDiv100","value":"Numeric::IsoYearDiv100","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468795,"byte_end":468882,"line_start":84,"line_end":84,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1646},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468983,"byte_end":468996,"line_start":87,"line_end":87,"column_start":5,"column_end":18},"name":"IsoYearMod100","qualname":"::format::Numeric::IsoYearMod100","value":"Numeric::IsoYearMod100","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n","sig":null,"attributes":[{"value":"/ Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468906,"byte_end":468978,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1648},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469027,"byte_end":469032,"line_start":89,"line_end":89,"column_start":5,"column_end":10},"name":"Month","qualname":"::format::Numeric::Month","value":"Numeric::Month","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Month (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469002,"byte_end":469022,"line_start":88,"line_end":88,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1650},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469074,"byte_end":469077,"line_start":91,"line_end":91,"column_start":5,"column_end":8},"name":"Day","qualname":"::format::Numeric::Day","value":"Numeric::Day","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Day of the month (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Day of the month (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469038,"byte_end":469069,"line_start":90,"line_end":90,"column_start":5,"column_end":36}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1652},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469170,"byte_end":469181,"line_start":93,"line_end":93,"column_start":5,"column_end":16},"name":"WeekFromSun","qualname":"::format::Numeric::WeekFromSun","value":"Numeric::WeekFromSun","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469083,"byte_end":469165,"line_start":92,"line_end":92,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1654},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469274,"byte_end":469285,"line_start":95,"line_end":95,"column_start":5,"column_end":16},"name":"WeekFromMon","qualname":"::format::Numeric::WeekFromMon","value":"Numeric::WeekFromMon","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469187,"byte_end":469269,"line_start":94,"line_end":94,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1656},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469343,"byte_end":469350,"line_start":97,"line_end":97,"column_start":5,"column_end":12},"name":"IsoWeek","qualname":"::format::Numeric::IsoWeek","value":"Numeric::IsoWeek","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Week number in the ISO week date (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Week number in the ISO week date (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469291,"byte_end":469338,"line_start":96,"line_end":96,"column_start":5,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1658},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469426,"byte_end":469440,"line_start":99,"line_end":99,"column_start":5,"column_end":19},"name":"NumDaysFromSun","qualname":"::format::Numeric::NumDaysFromSun","value":"Numeric::NumDaysFromSun","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469356,"byte_end":469421,"line_start":98,"line_end":98,"column_start":5,"column_end":70}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1660},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469514,"byte_end":469528,"line_start":101,"line_end":101,"column_start":5,"column_end":19},"name":"WeekdayFromMon","qualname":"::format::Numeric::WeekdayFromMon","value":"Numeric::WeekdayFromMon","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n","sig":null,"attributes":[{"value":"/ Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469446,"byte_end":469509,"line_start":100,"line_end":100,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1662},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469569,"byte_end":469576,"line_start":103,"line_end":103,"column_start":5,"column_end":12},"name":"Ordinal","qualname":"::format::Numeric::Ordinal","value":"Numeric::Ordinal","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Day of the year (FW=PW=3).\n","sig":null,"attributes":[{"value":"/ Day of the year (FW=PW=3).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469534,"byte_end":469564,"line_start":102,"line_end":102,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1664},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469635,"byte_end":469639,"line_start":105,"line_end":105,"column_start":5,"column_end":9},"name":"Hour","qualname":"::format::Numeric::Hour","value":"Numeric::Hour","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Hour number in the 24-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 24-hour clocks (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469582,"byte_end":469630,"line_start":104,"line_end":104,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1666},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469698,"byte_end":469704,"line_start":107,"line_end":107,"column_start":5,"column_end":11},"name":"Hour12","qualname":"::format::Numeric::Hour12","value":"Numeric::Hour12","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Hour number in the 12-hour clocks (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ Hour number in the 12-hour clocks (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469645,"byte_end":469693,"line_start":106,"line_end":106,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1668},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469777,"byte_end":469783,"line_start":109,"line_end":109,"column_start":5,"column_end":11},"name":"Minute","qualname":"::format::Numeric::Minute","value":"Numeric::Minute","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" The number of minutes since the last whole hour (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of minutes since the last whole hour (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469710,"byte_end":469772,"line_start":108,"line_end":108,"column_start":5,"column_end":67}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1670},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469858,"byte_end":469864,"line_start":111,"line_end":111,"column_start":5,"column_end":11},"name":"Second","qualname":"::format::Numeric::Second","value":"Numeric::Second","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" The number of seconds since the last whole minute (FW=PW=2).\n","sig":null,"attributes":[{"value":"/ The number of seconds since the last whole minute (FW=PW=2).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469789,"byte_end":469853,"line_start":110,"line_end":110,"column_start":5,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1672},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470067,"byte_end":470077,"line_start":115,"line_end":115,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Numeric::Nanosecond","value":"Numeric::Nanosecond","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the last whole second (FW=PW=9).\n Note that this is *not* left-aligned;\n see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the last whole second (FW=PW=9).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469870,"byte_end":469938,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ Note that this is *not* left-aligned;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469943,"byte_end":469984,"line_start":113,"line_end":113,"column_start":5,"column_end":46}},{"value":"/ see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":469989,"byte_end":470062,"line_start":114,"line_end":114,"column_start":5,"column_end":78}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1674},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470257,"byte_end":470266,"line_start":118,"line_end":118,"column_start":5,"column_end":14},"name":"Timestamp","qualname":"::format::Numeric::Timestamp","value":"Numeric::Timestamp","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n For formatting, it assumes UTC upon the absence of time zone offset.\n","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470083,"byte_end":470175,"line_start":116,"line_end":116,"column_start":5,"column_end":95}},{"value":"/ For formatting, it assumes UTC upon the absence of time zone offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470180,"byte_end":470252,"line_start":117,"line_end":117,"column_start":5,"column_end":77}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1676},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470485,"byte_end":470493,"line_start":124,"line_end":124,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Numeric::Internal","value":"Numeric::Internal(InternalNumeric)","parent":{"krate":0,"index":1635},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470273,"byte_end":470296,"line_start":120,"line_end":120,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470301,"byte_end":470304,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470309,"byte_end":470385,"line_start":122,"line_end":122,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470390,"byte_end":470480,"line_start":123,"line_end":123,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1635},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468313,"byte_end":468320,"line_start":73,"line_end":73,"column_start":10,"column_end":17},"name":"Numeric","qualname":"::format::Numeric","value":"pub enum Numeric {\n\n    /// Full Gregorian year (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    Year,\n\n    /// Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.\n    YearDiv100,\n\n    /// Gregorian year modulo 100 (FW=PW=2). Cannot be negative.\n    YearMod100,\n\n    /// Year in the ISO week date (FW=4, PW=∞).\n    /// May accept years before 1 BCE or after 9999 CE, given an initial sign.\n    IsoYear,\n\n    /// Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.\n    IsoYearDiv100,\n\n    /// Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.\n    IsoYearMod100,\n\n    /// Month (FW=PW=2).\n    Month,\n\n    /// Day of the month (FW=PW=2).\n    Day,\n\n    /// Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).\n    WeekFromSun,\n\n    /// Week number, where the week 1 starts at the first Monday of January (FW=PW=2).\n    WeekFromMon,\n\n    /// Week number in the ISO week date (FW=PW=2).\n    IsoWeek,\n\n    /// Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).\n    NumDaysFromSun,\n\n    /// Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).\n    WeekdayFromMon,\n\n    /// Day of the year (FW=PW=3).\n    Ordinal,\n\n    /// Hour number in the 24-hour clocks (FW=PW=2).\n    Hour,\n\n    /// Hour number in the 12-hour clocks (FW=PW=2).\n    Hour12,\n\n    /// The number of minutes since the last whole hour (FW=PW=2).\n    Minute,\n\n    /// The number of seconds since the last whole minute (FW=PW=2).\n    Second,\n\n    /// The number of nanoseconds since the last whole second (FW=PW=9).\n    /// Note that this is *not* left-aligned;\n    /// see also [`Fixed::Nanosecond`](./enum.Fixed.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// The number of non-leap seconds since the midnight UTC on January 1, 1970 (FW=1, PW=∞).\n    /// For formatting, it assumes UTC upon the absence of time zone offset.\n    Timestamp,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalNumeric),\n}","parent":null,"children":[{"krate":0,"index":1636},{"krate":0,"index":1638},{"krate":0,"index":1640},{"krate":0,"index":1642},{"krate":0,"index":1644},{"krate":0,"index":1646},{"krate":0,"index":1648},{"krate":0,"index":1650},{"krate":0,"index":1652},{"krate":0,"index":1654},{"krate":0,"index":1656},{"krate":0,"index":1658},{"krate":0,"index":1660},{"krate":0,"index":1662},{"krate":0,"index":1664},{"krate":0,"index":1666},{"krate":0,"index":1668},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676}],"decl_id":null,"docs":" Numeric item types.\n They have associated formatting width (FW) and parsing width (PW).","sig":null,"attributes":[{"value":"/ Numeric item types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467559,"byte_end":467582,"line_start":59,"line_end":59,"column_start":1,"column_end":24}},{"value":"/ They have associated formatting width (FW) and parsing width (PW).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467583,"byte_end":467653,"line_start":60,"line_end":60,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467654,"byte_end":467657,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ The **formatting width** is the minimal width to be formatted.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467658,"byte_end":467724,"line_start":62,"line_end":62,"column_start":1,"column_end":67}},{"value":"/ If the number is too short, and the padding is not [`Pad::None`](./enum.Pad.html#variant.None),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467725,"byte_end":467824,"line_start":63,"line_end":63,"column_start":1,"column_end":100}},{"value":"/ then it is left-padded.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467825,"byte_end":467852,"line_start":64,"line_end":64,"column_start":1,"column_end":28}},{"value":"/ If the number is too long or (in some cases) negative, it is printed as is.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467853,"byte_end":467932,"line_start":65,"line_end":65,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467933,"byte_end":467936,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ The **parsing width** is the maximal width to be scanned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467937,"byte_end":467998,"line_start":67,"line_end":67,"column_start":1,"column_end":62}},{"value":"/ The parser only tries to consume from one to given number of digits (greedily).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":467999,"byte_end":468082,"line_start":68,"line_end":68,"column_start":1,"column_end":84}},{"value":"/ It also trims the preceding whitespace if any.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468083,"byte_end":468133,"line_start":69,"line_end":69,"column_start":1,"column_end":51}},{"value":"/ It cannot parse the negative number, so some date and time cannot be formatted then","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468134,"byte_end":468221,"line_start":70,"line_end":70,"column_start":1,"column_end":88}},{"value":"/ parsed with the same formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":468222,"byte_end":468264,"line_start":71,"line_end":71,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":1035},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470601,"byte_end":470616,"line_start":128,"line_end":128,"column_start":12,"column_end":27},"name":"InternalNumeric","qualname":"::format::InternalNumeric","value":"InternalNumeric {  }","parent":null,"children":[{"krate":0,"index":1036}],"decl_id":null,"docs":" An opaque type representing numeric item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing numeric item types for internal uses only.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470515,"byte_end":470589,"line_start":127,"line_end":127,"column_start":1,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1691},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471415,"byte_end":471429,"line_start":162,"line_end":162,"column_start":5,"column_end":19},"name":"ShortMonthName","qualname":"::format::Fixed::ShortMonthName","value":"Fixed::ShortMonthName","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Abbreviated month names.","sig":null,"attributes":[{"value":"/ Abbreviated month names.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471282,"byte_end":471310,"line_start":159,"line_end":159,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471315,"byte_end":471318,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471323,"byte_end":471410,"line_start":161,"line_end":161,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1693},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471562,"byte_end":471575,"line_start":166,"line_end":166,"column_start":5,"column_end":18},"name":"LongMonthName","qualname":"::format::Fixed::LongMonthName","value":"Fixed::LongMonthName","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Full month names.","sig":null,"attributes":[{"value":"/ Full month names.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471435,"byte_end":471456,"line_start":163,"line_end":163,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471461,"byte_end":471464,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471469,"byte_end":471557,"line_start":165,"line_end":165,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1695},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471724,"byte_end":471740,"line_start":170,"line_end":170,"column_start":5,"column_end":21},"name":"ShortWeekdayName","qualname":"::format::Fixed::ShortWeekdayName","value":"Fixed::ShortWeekdayName","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Abbreviated day of the week names.","sig":null,"attributes":[{"value":"/ Abbreviated day of the week names.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471581,"byte_end":471619,"line_start":167,"line_end":167,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471624,"byte_end":471627,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Prints a three-letter-long name in the title case, reads the same name in any case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471632,"byte_end":471719,"line_start":169,"line_end":169,"column_start":5,"column_end":92}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1697},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471883,"byte_end":471898,"line_start":174,"line_end":174,"column_start":5,"column_end":20},"name":"LongWeekdayName","qualname":"::format::Fixed::LongWeekdayName","value":"Fixed::LongWeekdayName","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Full day of the week names.","sig":null,"attributes":[{"value":"/ Full day of the week names.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471746,"byte_end":471777,"line_start":171,"line_end":171,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471782,"byte_end":471785,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Prints a full name in the title case, reads either a short or full name in any case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471790,"byte_end":471878,"line_start":173,"line_end":173,"column_start":5,"column_end":93}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1699},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471976,"byte_end":471985,"line_start":178,"line_end":178,"column_start":5,"column_end":14},"name":"LowerAmPm","qualname":"::format::Fixed::LowerAmPm","value":"Fixed::LowerAmPm","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471904,"byte_end":471914,"line_start":175,"line_end":175,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471919,"byte_end":471922,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Prints in lower case, reads in any case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471927,"byte_end":471971,"line_start":177,"line_end":177,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1701},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472063,"byte_end":472072,"line_start":182,"line_end":182,"column_start":5,"column_end":14},"name":"UpperAmPm","qualname":"::format::Fixed::UpperAmPm","value":"Fixed::UpperAmPm","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" AM/PM.","sig":null,"attributes":[{"value":"/ AM/PM.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471991,"byte_end":472001,"line_start":179,"line_end":179,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472006,"byte_end":472009,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ Prints in upper case, reads in any case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472014,"byte_end":472058,"line_start":181,"line_end":181,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1703},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472319,"byte_end":472329,"line_start":186,"line_end":186,"column_start":5,"column_end":15},"name":"Nanosecond","qualname":"::format::Fixed::Nanosecond","value":"Fixed::Nanosecond","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" An optional dot plus one or more digits for left-aligned nanoseconds.\n May print nothing, 3, 6 or 9 digits according to the available accuracy.\n See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n","sig":null,"attributes":[{"value":"/ An optional dot plus one or more digits for left-aligned nanoseconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472078,"byte_end":472151,"line_start":183,"line_end":183,"column_start":5,"column_end":78}},{"value":"/ May print nothing, 3, 6 or 9 digits according to the available accuracy.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472156,"byte_end":472232,"line_start":184,"line_end":184,"column_start":5,"column_end":81}},{"value":"/ See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472237,"byte_end":472314,"line_start":185,"line_end":185,"column_start":5,"column_end":82}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1705},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472419,"byte_end":472430,"line_start":188,"line_end":188,"column_start":5,"column_end":16},"name":"Nanosecond3","qualname":"::format::Fixed::Nanosecond3","value":"Fixed::Nanosecond3","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472335,"byte_end":472414,"line_start":187,"line_end":187,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1707},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472520,"byte_end":472531,"line_start":190,"line_end":190,"column_start":5,"column_end":16},"name":"Nanosecond6","qualname":"::format::Fixed::Nanosecond6","value":"Fixed::Nanosecond6","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472436,"byte_end":472515,"line_start":189,"line_end":189,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1709},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472621,"byte_end":472632,"line_start":192,"line_end":192,"column_start":5,"column_end":16},"name":"Nanosecond9","qualname":"::format::Fixed::Nanosecond9","value":"Fixed::Nanosecond9","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n","sig":null,"attributes":[{"value":"/ Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472537,"byte_end":472616,"line_start":191,"line_end":191,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1711},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472753,"byte_end":472765,"line_start":196,"line_end":196,"column_start":5,"column_end":17},"name":"TimezoneName","qualname":"::format::Fixed::TimezoneName","value":"Fixed::TimezoneName","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Timezone name.","sig":null,"attributes":[{"value":"/ Timezone name.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472638,"byte_end":472656,"line_start":193,"line_end":193,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472661,"byte_end":472664,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ It does not support parsing, its use in the parser is an immediate failure.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472669,"byte_end":472748,"line_start":195,"line_end":195,"column_start":5,"column_end":84}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1713},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473096,"byte_end":473115,"line_start":202,"line_end":202,"column_start":5,"column_end":24},"name":"TimezoneOffsetColon","qualname":"::format::Fixed::TimezoneOffsetColon","value":"Fixed::TimezoneOffsetColon","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472771,"byte_end":472844,"line_start":197,"line_end":197,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472849,"byte_end":472852,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472857,"byte_end":472949,"line_start":199,"line_end":199,"column_start":5,"column_end":97}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":472954,"byte_end":473006,"line_start":200,"line_end":200,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473011,"byte_end":473091,"line_start":201,"line_end":201,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1715},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473503,"byte_end":473523,"line_start":209,"line_end":209,"column_start":5,"column_end":25},"name":"TimezoneOffsetColonZ","qualname":"::format::Fixed::TimezoneOffsetColonZ","value":"Fixed::TimezoneOffsetColonZ","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473121,"byte_end":473189,"line_start":203,"line_end":203,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473194,"byte_end":473197,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473202,"byte_end":473294,"line_start":205,"line_end":205,"column_start":5,"column_end":97}},{"value":"/ and `Z` can be either in upper case or in lower case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473299,"byte_end":473356,"line_start":206,"line_end":206,"column_start":5,"column_end":62}},{"value":"/ The offset is limited from `-24:00` to `+24:00`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473361,"byte_end":473413,"line_start":207,"line_end":207,"column_start":5,"column_end":57}},{"value":"/ which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473418,"byte_end":473498,"line_start":208,"line_end":208,"column_start":5,"column_end":85}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1717},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473662,"byte_end":473676,"line_start":212,"line_end":212,"column_start":5,"column_end":19},"name":"TimezoneOffset","qualname":"::format::Fixed::TimezoneOffset","value":"Fixed::TimezoneOffset","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473529,"byte_end":473615,"line_start":210,"line_end":210,"column_start":5,"column_end":91}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473620,"byte_end":473657,"line_start":211,"line_end":211,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1719},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473817,"byte_end":473832,"line_start":215,"line_end":215,"column_start":5,"column_end":20},"name":"TimezoneOffsetZ","qualname":"::format::Fixed::TimezoneOffsetZ","value":"Fixed::TimezoneOffsetZ","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n Parsing allows an optional colon.\n","sig":null,"attributes":[{"value":"/ Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473682,"byte_end":473770,"line_start":213,"line_end":213,"column_start":5,"column_end":93}},{"value":"/ Parsing allows an optional colon.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473775,"byte_end":473812,"line_start":214,"line_end":214,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473925,"byte_end":473932,"line_start":217,"line_end":217,"column_start":5,"column_end":12},"name":"RFC2822","qualname":"::format::Fixed::RFC2822","value":"Fixed::RFC2822","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n","sig":null,"attributes":[{"value":"/ RFC 2822 date and time syntax. Commonly used for email and MIME date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473838,"byte_end":473920,"line_start":216,"line_end":216,"column_start":5,"column_end":87}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1723},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473988,"byte_end":473995,"line_start":219,"line_end":219,"column_start":5,"column_end":12},"name":"RFC3339","qualname":"::format::Fixed::RFC3339","value":"Fixed::RFC3339","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" RFC 3339 & ISO 8601 date and time syntax.\n","sig":null,"attributes":[{"value":"/ RFC 3339 & ISO 8601 date and time syntax.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":473938,"byte_end":473983,"line_start":218,"line_end":218,"column_start":5,"column_end":50}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474214,"byte_end":474222,"line_start":225,"line_end":225,"column_start":5,"column_end":13},"name":"Internal","qualname":"::format::Fixed::Internal","value":"Fixed::Internal(InternalFixed)","parent":{"krate":0,"index":1690},"children":[],"decl_id":null,"docs":" Internal uses only.","sig":null,"attributes":[{"value":"/ Internal uses only.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474002,"byte_end":474025,"line_start":221,"line_end":221,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474030,"byte_end":474033,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ This item exists so that one can add additional internal-only formatting","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474038,"byte_end":474114,"line_start":223,"line_end":223,"column_start":5,"column_end":81}},{"value":"/ without breaking major compatibility (as enum variants cannot be selectively private).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474119,"byte_end":474209,"line_start":224,"line_end":224,"column_start":5,"column_end":95}}]},{"kind":"Enum","id":{"krate":0,"index":1690},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471270,"byte_end":471275,"line_start":158,"line_end":158,"column_start":10,"column_end":15},"name":"Fixed","qualname":"::format::Fixed","value":"pub enum Fixed {\n\n    /// Abbreviated month names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortMonthName,\n\n    /// Full month names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongMonthName,\n\n    /// Abbreviated day of the week names.\n    ///\n    /// Prints a three-letter-long name in the title case, reads the same name in any case.\n    ShortWeekdayName,\n\n    /// Full day of the week names.\n    ///\n    /// Prints a full name in the title case, reads either a short or full name in any case.\n    LongWeekdayName,\n\n    /// AM/PM.\n    ///\n    /// Prints in lower case, reads in any case.\n    LowerAmPm,\n\n    /// AM/PM.\n    ///\n    /// Prints in upper case, reads in any case.\n    UpperAmPm,\n\n    /// An optional dot plus one or more digits for left-aligned nanoseconds.\n    /// May print nothing, 3, 6 or 9 digits according to the available accuracy.\n    /// See also [`Numeric::Nanosecond`](./enum.Numeric.html#variant.Nanosecond).\n    Nanosecond,\n\n    /// Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 3.\n    Nanosecond3,\n\n    /// Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 6.\n    Nanosecond6,\n\n    /// Same to [`Nanosecond`](#variant.Nanosecond) but the accuracy is fixed to 9.\n    Nanosecond9,\n\n    /// Timezone name.\n    ///\n    /// It does not support parsing, its use in the parser is an immediate failure.\n    TimezoneName,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespace.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColon,\n\n    /// Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).\n    ///\n    /// In the parser, the colon can be omitted and/or surrounded with any amount of whitespace,\n    /// and `Z` can be either in upper case or in lower case.\n    /// The offset is limited from `-24:00` to `+24:00`,\n    /// which is same to [`FixedOffset`](../offset/struct.FixedOffset.html)'s range.\n    TimezoneOffsetColonZ,\n\n    /// Same to [`TimezoneOffsetColon`](#variant.TimezoneOffsetColon) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffset,\n\n    /// Same to [`TimezoneOffsetColonZ`](#variant.TimezoneOffsetColonZ) but prints no colon.\n    /// Parsing allows an optional colon.\n    TimezoneOffsetZ,\n\n    /// RFC 2822 date and time syntax. Commonly used for email and MIME date and time.\n    RFC2822,\n\n    /// RFC 3339 & ISO 8601 date and time syntax.\n    RFC3339,\n\n    /// Internal uses only.\n    ///\n    /// This item exists so that one can add additional internal-only formatting\n    /// without breaking major compatibility (as enum variants cannot be selectively private).\n    Internal(InternalFixed),\n}","parent":null,"children":[{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1715},{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1725}],"decl_id":null,"docs":" Fixed-format item types.","sig":null,"attributes":[{"value":"/ Fixed-format item types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471047,"byte_end":471075,"line_start":153,"line_end":153,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471076,"byte_end":471079,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ They have their own rules of formatting and parsing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471080,"byte_end":471136,"line_start":155,"line_end":155,"column_start":1,"column_end":57}},{"value":"/ Otherwise noted, they print in the specified cases but parse case-insensitively.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":471137,"byte_end":471221,"line_start":156,"line_end":156,"column_start":1,"column_end":85}}]},{"kind":"Struct","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474372,"byte_end":474385,"line_start":230,"line_end":230,"column_start":12,"column_end":25},"name":"InternalFixed","qualname":"::format::InternalFixed","value":"InternalFixed {  }","parent":null,"children":[{"krate":0,"index":1740}],"decl_id":null,"docs":" An opaque type representing fixed-format item types for internal uses only.\n","sig":null,"attributes":[{"value":"/ An opaque type representing fixed-format item types for internal uses only.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":474242,"byte_end":474321,"line_start":228,"line_end":228,"column_start":1,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475401,"byte_end":475408,"line_start":257,"line_end":257,"column_start":5,"column_end":12},"name":"Literal","qualname":"::format::Item::Literal","value":"Item::Literal(&'a str)","parent":{"krate":0,"index":1771},"children":[],"decl_id":null,"docs":" A literally printed and parsed text.\n","sig":null,"attributes":[{"value":"/ A literally printed and parsed text.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475356,"byte_end":475396,"line_start":256,"line_end":256,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1776},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475546,"byte_end":475558,"line_start":260,"line_end":260,"column_start":5,"column_end":17},"name":"OwnedLiteral","qualname":"::format::Item::OwnedLiteral","value":"Item::OwnedLiteral(Box<str>)","parent":{"krate":0,"index":1771},"children":[],"decl_id":null,"docs":" Same to `Literal` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same to `Literal` but with the string owned by the item.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475423,"byte_end":475483,"line_start":258,"line_end":258,"column_start":5,"column_end":65}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475488,"byte_end":475541,"line_start":259,"line_end":259,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475646,"byte_end":475651,"line_start":262,"line_end":262,"column_start":5,"column_end":10},"name":"Space","qualname":"::format::Item::Space","value":"Item::Space(&'a str)","parent":{"krate":0,"index":1771},"children":[],"decl_id":null,"docs":" Whitespace. Prints literally but reads zero or more whitespace.\n","sig":null,"attributes":[{"value":"/ Whitespace. Prints literally but reads zero or more whitespace.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475574,"byte_end":475641,"line_start":261,"line_end":261,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475787,"byte_end":475797,"line_start":265,"line_end":265,"column_start":5,"column_end":15},"name":"OwnedSpace","qualname":"::format::Item::OwnedSpace","value":"Item::OwnedSpace(Box<str>)","parent":{"krate":0,"index":1771},"children":[],"decl_id":null,"docs":" Same to `Space` but with the string owned by the item.\n","sig":null,"attributes":[{"value":"/ Same to `Space` but with the string owned by the item.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475666,"byte_end":475724,"line_start":263,"line_end":263,"column_start":5,"column_end":63}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475729,"byte_end":475782,"line_start":264,"line_end":264,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1785},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475976,"byte_end":475983,"line_start":268,"line_end":268,"column_start":5,"column_end":12},"name":"Numeric","qualname":"::format::Item::Numeric","value":"Item::Numeric(Numeric, Pad)","parent":{"krate":0,"index":1771},"children":[],"decl_id":null,"docs":" Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n the parser simply ignores any padded whitespace and zeroes.\n","sig":null,"attributes":[{"value":"/ Numeric item. Can be optionally padded to the maximal length (if any) when formatting;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475813,"byte_end":475903,"line_start":266,"line_end":266,"column_start":5,"column_end":95}},{"value":"/ the parser simply ignores any padded whitespace and zeroes.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475908,"byte_end":475971,"line_start":267,"line_end":267,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1789},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476030,"byte_end":476035,"line_start":270,"line_end":270,"column_start":5,"column_end":10},"name":"Fixed","qualname":"::format::Item::Fixed","value":"Item::Fixed(Fixed)","parent":{"krate":0,"index":1771},"children":[],"decl_id":null,"docs":" Fixed-format item.\n","sig":null,"attributes":[{"value":"/ Fixed-format item.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476003,"byte_end":476025,"line_start":269,"line_end":269,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1792},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476124,"byte_end":476129,"line_start":272,"line_end":272,"column_start":5,"column_end":10},"name":"Error","qualname":"::format::Item::Error","value":"Item::Error","parent":{"krate":0,"index":1771},"children":[],"decl_id":null,"docs":" Issues a formatting error. Used to signal an invalid format string.\n","sig":null,"attributes":[{"value":"/ Issues a formatting error. Used to signal an invalid format string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476048,"byte_end":476119,"line_start":271,"line_end":271,"column_start":5,"column_end":76}}]},{"kind":"Enum","id":{"krate":0,"index":1771},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475341,"byte_end":475345,"line_start":255,"line_end":255,"column_start":10,"column_end":14},"name":"Item","qualname":"::format::Item","value":"pub enum Item<'a> {\n\n    /// A literally printed and parsed text.\n    Literal(&'a str),\n\n    /// Same to `Literal` but with the string owned by the item.\n    #[cfg(any(feature = \"alloc\", feature = \"std\", test))]\n    OwnedLiteral(Box<str>),\n\n    /// Whitespace. Prints literally but reads zero or more whitespace.\n    Space(&'a str),\n\n    /// Same to `Space` but with the string owned by the item.\n    #[cfg(any(feature = \"alloc\", feature = \"std\", test))]\n    OwnedSpace(Box<str>),\n\n    /// Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\n    /// the parser simply ignores any padded whitespace and zeroes.\n    Numeric(Numeric, Pad),\n\n    /// Fixed-format item.\n    Fixed(Fixed),\n\n    /// Issues a formatting error. Used to signal an invalid format string.\n    Error,\n}","parent":null,"children":[{"krate":0,"index":1773},{"krate":0,"index":1776},{"krate":0,"index":1779},{"krate":0,"index":1782},{"krate":0,"index":1785},{"krate":0,"index":1789},{"krate":0,"index":1792}],"decl_id":null,"docs":" A single formatting item. This is used for both formatting and parsing.\n","sig":null,"attributes":[{"value":"/ A single formatting item. This is used for both formatting and parsing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":475217,"byte_end":475292,"line_start":253,"line_end":253,"column_start":1,"column_end":76}}]},{"kind":"Struct","id":{"krate":0,"index":1811},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476748,"byte_end":476758,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"ParseError","qualname":"::format::ParseError","value":"","parent":null,"children":[],"decl_id":null,"docs":" An error from the `parse` function.\n","sig":null,"attributes":[{"value":"/ An error from the `parse` function.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":476652,"byte_end":476691,"line_start":283,"line_end":283,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":1051},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":477994,"byte_end":478005,"line_start":319,"line_end":319,"column_start":10,"column_end":21},"name":"ParseResult","qualname":"::format::ParseResult","value":"Result<T, ParseError>","parent":null,"children":[],"decl_id":null,"docs":" Same to `Result<T, ParseError>`.\n","sig":null,"attributes":[{"value":"/ Same to `Result<T, ParseError>`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":477948,"byte_end":477984,"line_start":318,"line_end":318,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1066},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":479633,"byte_end":479639,"line_start":360,"line_end":360,"column_start":8,"column_end":14},"name":"format","qualname":"::format::format","value":"pub fn format<'a, I,\n              B>(&mut fmt::Formatter, Option<&NaiveDate>, Option<&NaiveTime>,\n                 Option<&(String, FixedOffset)>, I) -> fmt::Result where\nI: Iterator<Item = B> + Clone, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to format given arguments with given formatting items.\n Internally used by `DelayedFormat`.\n","sig":null,"attributes":[{"value":"/ Tries to format given arguments with given formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":479467,"byte_end":479531,"line_start":357,"line_end":357,"column_start":1,"column_end":65}},{"value":"/ Internally used by `DelayedFormat`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":479532,"byte_end":479571,"line_start":358,"line_end":358,"column_start":1,"column_end":40}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":479572,"byte_end":479625,"line_start":359,"line_end":359,"column_start":1,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":1852},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496129,"byte_end":496135,"line_start":27,"line_end":27,"column_start":12,"column_end":18},"name":"Parsed","qualname":"::format::parsed::Parsed","value":"Parsed { year, year_div_100, year_mod_100, isoyear, isoyear_div_100, isoyear_mod_100, month, week_from_sun, week_from_mon, isoweek, weekday, ordinal, day, hour_div_12, hour_mod_12, minute, second, nanosecond, timestamp, offset }","parent":null,"children":[{"krate":0,"index":1853},{"krate":0,"index":1854},{"krate":0,"index":1855},{"krate":0,"index":1856},{"krate":0,"index":1857},{"krate":0,"index":1858},{"krate":0,"index":1859},{"krate":0,"index":1860},{"krate":0,"index":1861},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1864},{"krate":0,"index":1865},{"krate":0,"index":1866},{"krate":0,"index":1867},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1870},{"krate":0,"index":1871},{"krate":0,"index":1872},{"krate":0,"index":1873}],"decl_id":null,"docs":" Parsed parts of date and time. There are two classes of methods:","sig":null,"attributes":[{"value":"/ Parsed parts of date and time. There are two classes of methods:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":495611,"byte_end":495679,"line_start":18,"line_end":18,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":495680,"byte_end":495683,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - `set_*` methods try to set given field(s) while checking for the consistency.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":495684,"byte_end":495767,"line_start":20,"line_end":20,"column_start":1,"column_end":84}},{"value":"/   It may or may not check for the range constraint immediately (for efficiency reasons).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":495768,"byte_end":495860,"line_start":21,"line_end":21,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":495861,"byte_end":495864,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ - `to_*` methods try to make a concrete date and time value out of set fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":495865,"byte_end":495947,"line_start":23,"line_end":23,"column_start":1,"column_end":83}},{"value":"/   It fully checks any remaining out-of-range conditions and inconsistent/impossible fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":495948,"byte_end":496043,"line_start":24,"line_end":24,"column_start":1,"column_end":96}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496044,"byte_end":496082,"line_start":25,"line_end":25,"column_start":1,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1853},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496312,"byte_end":496316,"line_start":32,"line_end":32,"column_start":9,"column_end":13},"name":"year","qualname":"::format::parsed::Parsed::year","value":"std::option::Option<i32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Year.","sig":null,"attributes":[{"value":"/ Year.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496142,"byte_end":496151,"line_start":28,"line_end":28,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496156,"byte_end":496159,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`year_div_100`](#structfield.year_div_100)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496164,"byte_end":496239,"line_start":30,"line_end":30,"column_start":5,"column_end":80}},{"value":"/ and [`year_mod_100`](#structfield.year_mod_100) fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496244,"byte_end":496303,"line_start":31,"line_end":31,"column_start":5,"column_end":64}}]},{"kind":"Field","id":{"krate":0,"index":1854},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496620,"byte_end":496632,"line_start":39,"line_end":39,"column_start":9,"column_end":21},"name":"year_div_100","qualname":"::format::parsed::Parsed::year_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Year divided by 100. Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year divided by 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496336,"byte_end":496404,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496409,"byte_end":496412,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496417,"byte_end":496474,"line_start":36,"line_end":36,"column_start":5,"column_end":62}},{"value":"/ [`year_mod_100`](#structfield.year_mod_100) is present,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496479,"byte_end":496538,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ it is inferred to 19 when `year_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496543,"byte_end":496611,"line_start":38,"line_end":38,"column_start":5,"column_end":73}}]},{"kind":"Field","id":{"krate":0,"index":1855},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496725,"byte_end":496737,"line_start":42,"line_end":42,"column_start":9,"column_end":21},"name":"year_mod_100","qualname":"::format::parsed::Parsed::year_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Year modulo 100. Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year modulo 100. Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496652,"byte_end":496716,"line_start":41,"line_end":41,"column_start":5,"column_end":69}}]},{"kind":"Field","id":{"krate":0,"index":1856},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497004,"byte_end":497011,"line_start":48,"line_end":48,"column_start":9,"column_end":16},"name":"isoyear","qualname":"::format::parsed::Parsed::isoyear","value":"std::option::Option<i32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496757,"byte_end":496831,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496836,"byte_end":496839,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ This can be negative unlike [`isoyear_div_100`](#structfield.isoyear_div_100) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496844,"byte_end":496929,"line_start":46,"line_end":46,"column_start":5,"column_end":90}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":496934,"byte_end":496995,"line_start":47,"line_end":47,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1857},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497398,"byte_end":497413,"line_start":56,"line_end":56,"column_start":9,"column_end":24},"name":"isoyear_div_100","qualname":"::format::parsed::Parsed::isoyear_div_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.\n Implies that the year is >= 1 BCE when set.","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), divided by 100.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497031,"byte_end":497121,"line_start":50,"line_end":50,"column_start":5,"column_end":95}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497126,"byte_end":497173,"line_start":51,"line_end":51,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497178,"byte_end":497181,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Due to the common usage, if this field is missing but","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497186,"byte_end":497243,"line_start":53,"line_end":53,"column_start":5,"column_end":62}},{"value":"/ [`isoyear_mod_100`](#structfield.isoyear_mod_100) is present,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497248,"byte_end":497313,"line_start":54,"line_end":54,"column_start":5,"column_end":70}},{"value":"/ it is inferred to 19 when `isoyear_mod_100 >= 70` and 20 otherwise.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497318,"byte_end":497389,"line_start":55,"line_end":55,"column_start":5,"column_end":76}}]},{"kind":"Field","id":{"krate":0,"index":1858},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497580,"byte_end":497595,"line_start":60,"line_end":60,"column_start":9,"column_end":24},"name":"isoyear_mod_100","qualname":"::format::parsed::Parsed::isoyear_mod_100","value":"std::option::Option<i32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.\n Implies that the year is >= 1 BCE when set.\n","sig":null,"attributes":[{"value":"/ Year in the [ISO week date](../naive/struct.NaiveDate.html#week-date), modulo 100.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497433,"byte_end":497519,"line_start":58,"line_end":58,"column_start":5,"column_end":91}},{"value":"/ Implies that the year is >= 1 BCE when set.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497524,"byte_end":497571,"line_start":59,"line_end":59,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1859},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497642,"byte_end":497647,"line_start":63,"line_end":63,"column_start":9,"column_end":14},"name":"month","qualname":"::format::parsed::Parsed::month","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Month (1--12).\n","sig":null,"attributes":[{"value":"/ Month (1--12).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497615,"byte_end":497633,"line_start":62,"line_end":62,"column_start":5,"column_end":23}}]},{"kind":"Field","id":{"krate":0,"index":1860},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497802,"byte_end":497815,"line_start":67,"line_end":67,"column_start":9,"column_end":22},"name":"week_from_sun","qualname":"::format::parsed::Parsed::week_from_sun","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Sunday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Sunday of January","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497667,"byte_end":497738,"line_start":65,"line_end":65,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497743,"byte_end":497793,"line_start":66,"line_end":66,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1861},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497970,"byte_end":497983,"line_start":71,"line_end":71,"column_start":9,"column_end":22},"name":"week_from_mon","qualname":"::format::parsed::Parsed::week_from_mon","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Week number, where the week 1 starts at the first Monday of January\n (0--53, 1--53 or 1--52 depending on the year).\n","sig":null,"attributes":[{"value":"/ Week number, where the week 1 starts at the first Monday of January","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497835,"byte_end":497906,"line_start":69,"line_end":69,"column_start":5,"column_end":76}},{"value":"/ (0--53, 1--53 or 1--52 depending on the year).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":497911,"byte_end":497961,"line_start":70,"line_end":70,"column_start":5,"column_end":55}}]},{"kind":"Field","id":{"krate":0,"index":1862},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498123,"byte_end":498130,"line_start":75,"line_end":75,"column_start":9,"column_end":16},"name":"isoweek","qualname":"::format::parsed::Parsed::isoweek","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" [ISO week number](../naive/struct.NaiveDate.html#week-date)\n (1--52 or 1--53 depending on the year).\n","sig":null,"attributes":[{"value":"/ [ISO week number](../naive/struct.NaiveDate.html#week-date)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498003,"byte_end":498066,"line_start":73,"line_end":73,"column_start":5,"column_end":68}},{"value":"/ (1--52 or 1--53 depending on the year).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498071,"byte_end":498114,"line_start":74,"line_end":74,"column_start":5,"column_end":48}}]},{"kind":"Field","id":{"krate":0,"index":1863},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498179,"byte_end":498186,"line_start":78,"line_end":78,"column_start":9,"column_end":16},"name":"weekday","qualname":"::format::parsed::Parsed::weekday","value":"std::option::Option<Weekday>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Day of the week.\n","sig":null,"attributes":[{"value":"/ Day of the week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498150,"byte_end":498170,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Field","id":{"krate":0,"index":1864},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498280,"byte_end":498287,"line_start":81,"line_end":81,"column_start":9,"column_end":16},"name":"ordinal","qualname":"::format::parsed::Parsed::ordinal","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Day of the year (1--365 or 1--366 depending on the year).\n","sig":null,"attributes":[{"value":"/ Day of the year (1--365 or 1--366 depending on the year).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498210,"byte_end":498271,"line_start":80,"line_end":80,"column_start":5,"column_end":66}}]},{"kind":"Field","id":{"krate":0,"index":1865},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498391,"byte_end":498394,"line_start":84,"line_end":84,"column_start":9,"column_end":12},"name":"day","qualname":"::format::parsed::Parsed::day","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).\n","sig":null,"attributes":[{"value":"/ Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498307,"byte_end":498382,"line_start":83,"line_end":83,"column_start":5,"column_end":80}}]},{"kind":"Field","id":{"krate":0,"index":1866},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498495,"byte_end":498506,"line_start":87,"line_end":87,"column_start":9,"column_end":20},"name":"hour_div_12","qualname":"::format::parsed::Parsed::hour_div_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.\n","sig":null,"attributes":[{"value":"/ Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498414,"byte_end":498486,"line_start":86,"line_end":86,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1867},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498569,"byte_end":498580,"line_start":90,"line_end":90,"column_start":9,"column_end":20},"name":"hour_mod_12","qualname":"::format::parsed::Parsed::hour_mod_12","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Hour number modulo 12 (0--11).\n","sig":null,"attributes":[{"value":"/ Hour number modulo 12 (0--11).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498526,"byte_end":498560,"line_start":89,"line_end":89,"column_start":5,"column_end":39}}]},{"kind":"Field","id":{"krate":0,"index":1868},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498635,"byte_end":498641,"line_start":93,"line_end":93,"column_start":9,"column_end":15},"name":"minute","qualname":"::format::parsed::Parsed::minute","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Minute number (0--59).\n","sig":null,"attributes":[{"value":"/ Minute number (0--59).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498600,"byte_end":498626,"line_start":92,"line_end":92,"column_start":5,"column_end":31}}]},{"kind":"Field","id":{"krate":0,"index":1869},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498725,"byte_end":498731,"line_start":96,"line_end":96,"column_start":9,"column_end":15},"name":"second","qualname":"::format::parsed::Parsed::second","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Second number (0--60, accounting for leap seconds).\n","sig":null,"attributes":[{"value":"/ Second number (0--60, accounting for leap seconds).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498661,"byte_end":498716,"line_start":95,"line_end":95,"column_start":5,"column_end":60}}]},{"kind":"Field","id":{"krate":0,"index":1870},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498830,"byte_end":498840,"line_start":99,"line_end":99,"column_start":9,"column_end":19},"name":"nanosecond","qualname":"::format::parsed::Parsed::nanosecond","value":"std::option::Option<u32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" The number of nanoseconds since the whole second (0--999,999,999).\n","sig":null,"attributes":[{"value":"/ The number of nanoseconds since the whole second (0--999,999,999).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498751,"byte_end":498821,"line_start":98,"line_end":98,"column_start":5,"column_end":75}}]},{"kind":"Field","id":{"krate":0,"index":1871},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499043,"byte_end":499052,"line_start":104,"line_end":104,"column_start":9,"column_end":18},"name":"timestamp","qualname":"::format::parsed::Parsed::timestamp","value":"std::option::Option<i64>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" The number of non-leap seconds since the midnight UTC on January 1, 1970.","sig":null,"attributes":[{"value":"/ The number of non-leap seconds since the midnight UTC on January 1, 1970.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498860,"byte_end":498937,"line_start":101,"line_end":101,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498942,"byte_end":498945,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ This can be off by one if [`second`](#structfield.second) is 60 (a leap second).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":498950,"byte_end":499034,"line_start":103,"line_end":103,"column_start":5,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1872},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499131,"byte_end":499137,"line_start":107,"line_end":107,"column_start":9,"column_end":15},"name":"offset","qualname":"::format::parsed::Parsed::offset","value":"std::option::Option<i32>","parent":{"krate":0,"index":1852},"children":[],"decl_id":null,"docs":" Offset from the local time to UTC, in seconds.\n","sig":null,"attributes":[{"value":"/ Offset from the local time to UTC, in seconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499072,"byte_end":499122,"line_start":106,"line_end":106,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1149},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500242,"byte_end":500245,"line_start":140,"line_end":140,"column_start":12,"column_end":15},"name":"new","qualname":"<Parsed>::new","value":"pub fn new() -> Parsed","parent":null,"children":[],"decl_id":null,"docs":" Returns the initial value of parsed parts.\n","sig":null,"attributes":[{"value":"/ Returns the initial value of parsed parts.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500184,"byte_end":500230,"line_start":139,"line_end":139,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1150},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500395,"byte_end":500403,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"set_year","qualname":"<Parsed>::set_year","value":"pub fn set_year(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year`](#structfield.year) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year`](#structfield.year) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500297,"byte_end":500369,"line_start":144,"line_end":144,"column_start":5,"column_end":77}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500374,"byte_end":500383,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1151},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500652,"byte_end":500668,"line_start":152,"line_end":152,"column_start":12,"column_end":28},"name":"set_year_div_100","qualname":"<Parsed>::set_year_div_100","value":"pub fn set_year_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_div_100`](#structfield.year_div_100) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500538,"byte_end":500626,"line_start":150,"line_end":150,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500631,"byte_end":500640,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1152},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500976,"byte_end":500992,"line_start":159,"line_end":159,"column_start":12,"column_end":28},"name":"set_year_mod_100","qualname":"<Parsed>::set_year_mod_100","value":"pub fn set_year_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`year_mod_100`](#structfield.year_mod_100) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500862,"byte_end":500950,"line_start":157,"line_end":157,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500955,"byte_end":500964,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1153},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501290,"byte_end":501301,"line_start":166,"line_end":166,"column_start":12,"column_end":23},"name":"set_isoyear","qualname":"<Parsed>::set_isoyear","value":"pub fn set_isoyear(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear`](#structfield.isoyear) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear`](#structfield.isoyear) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501186,"byte_end":501264,"line_start":164,"line_end":164,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501269,"byte_end":501278,"line_start":165,"line_end":165,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1154},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501559,"byte_end":501578,"line_start":172,"line_end":172,"column_start":12,"column_end":31},"name":"set_isoyear_div_100","qualname":"<Parsed>::set_isoyear_div_100","value":"pub fn set_isoyear_div_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_div_100`](#structfield.isoyear_div_100) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501439,"byte_end":501533,"line_start":170,"line_end":170,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501538,"byte_end":501547,"line_start":171,"line_end":171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1155},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501895,"byte_end":501914,"line_start":179,"line_end":179,"column_start":12,"column_end":31},"name":"set_isoyear_mod_100","qualname":"<Parsed>::set_isoyear_mod_100","value":"pub fn set_isoyear_mod_100(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoyear_mod_100`](#structfield.isoyear_mod_100) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501775,"byte_end":501869,"line_start":177,"line_end":177,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":501874,"byte_end":501883,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1156},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502211,"byte_end":502220,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"set_month","qualname":"<Parsed>::set_month","value":"pub fn set_month(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`month`](#structfield.month) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`month`](#structfield.month) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502111,"byte_end":502185,"line_start":184,"line_end":184,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502190,"byte_end":502199,"line_start":185,"line_end":185,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1157},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502472,"byte_end":502489,"line_start":192,"line_end":192,"column_start":12,"column_end":29},"name":"set_week_from_sun","qualname":"<Parsed>::set_week_from_sun","value":"pub fn set_week_from_sun(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_sun`](#structfield.week_from_sun) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502356,"byte_end":502446,"line_start":190,"line_end":190,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502451,"byte_end":502460,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1158},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502749,"byte_end":502766,"line_start":198,"line_end":198,"column_start":12,"column_end":29},"name":"set_week_from_mon","qualname":"<Parsed>::set_week_from_mon","value":"pub fn set_week_from_mon(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`week_from_mon`](#structfield.week_from_mon) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502633,"byte_end":502723,"line_start":196,"line_end":196,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502728,"byte_end":502737,"line_start":197,"line_end":197,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1159},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503014,"byte_end":503025,"line_start":204,"line_end":204,"column_start":12,"column_end":23},"name":"set_isoweek","qualname":"<Parsed>::set_isoweek","value":"pub fn set_isoweek(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`isoweek`](#structfield.isoweek) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`isoweek`](#structfield.isoweek) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502910,"byte_end":502988,"line_start":202,"line_end":202,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":502993,"byte_end":503002,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1160},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503267,"byte_end":503278,"line_start":210,"line_end":210,"column_start":12,"column_end":23},"name":"set_weekday","qualname":"<Parsed>::set_weekday","value":"pub fn set_weekday(&mut Self, Weekday) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`weekday`](#structfield.weekday) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`weekday`](#structfield.weekday) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503163,"byte_end":503241,"line_start":208,"line_end":208,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503246,"byte_end":503255,"line_start":209,"line_end":209,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1161},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503494,"byte_end":503505,"line_start":216,"line_end":216,"column_start":12,"column_end":23},"name":"set_ordinal","qualname":"<Parsed>::set_ordinal","value":"pub fn set_ordinal(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`ordinal`](#structfield.ordinal) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`ordinal`](#structfield.ordinal) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503390,"byte_end":503468,"line_start":214,"line_end":214,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503473,"byte_end":503482,"line_start":215,"line_end":215,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1162},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503739,"byte_end":503746,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"set_day","qualname":"<Parsed>::set_day","value":"pub fn set_day(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`day`](#structfield.day) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`day`](#structfield.day) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503643,"byte_end":503713,"line_start":220,"line_end":220,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503718,"byte_end":503727,"line_start":221,"line_end":221,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1163},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504032,"byte_end":504040,"line_start":229,"line_end":229,"column_start":12,"column_end":20},"name":"set_ampm","qualname":"<Parsed>::set_ampm","value":"pub fn set_ampm(&mut Self, bool) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.\n (`false` for AM, `true` for PM)\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_div_12`](#structfield.hour_div_12) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503880,"byte_end":503966,"line_start":226,"line_end":226,"column_start":5,"column_end":91}},{"value":"/ (`false` for AM, `true` for PM)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":503971,"byte_end":504006,"line_start":227,"line_end":227,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504011,"byte_end":504020,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1164},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504313,"byte_end":504323,"line_start":236,"line_end":236,"column_start":12,"column_end":22},"name":"set_hour12","qualname":"<Parsed>::set_hour12","value":"pub fn set_hour12(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from\n given hour number in 12-hour clocks.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`hour_mod_12`](#structfield.hour_mod_12) field from","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504169,"byte_end":504242,"line_start":233,"line_end":233,"column_start":5,"column_end":78}},{"value":"/ given hour number in 12-hour clocks.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504247,"byte_end":504287,"line_start":234,"line_end":234,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504292,"byte_end":504301,"line_start":235,"line_end":235,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1165},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504680,"byte_end":504688,"line_start":244,"line_end":244,"column_start":12,"column_end":20},"name":"set_hour","qualname":"<Parsed>::set_hour","value":"pub fn set_hour(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set both [`hour_div_12`](#structfield.hour_div_12) and\n [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set both [`hour_div_12`](#structfield.hour_div_12) and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504512,"byte_end":504579,"line_start":241,"line_end":241,"column_start":5,"column_end":72}},{"value":"/ [`hour_mod_12`](#structfield.hour_mod_12) fields from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504584,"byte_end":504654,"line_start":242,"line_end":242,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504659,"byte_end":504668,"line_start":243,"line_end":243,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1166},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505032,"byte_end":505042,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"set_minute","qualname":"<Parsed>::set_minute","value":"pub fn set_minute(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`minute`](#structfield.minute) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`minute`](#structfield.minute) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":504930,"byte_end":505006,"line_start":251,"line_end":251,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505011,"byte_end":505020,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1167},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505281,"byte_end":505291,"line_start":259,"line_end":259,"column_start":12,"column_end":22},"name":"set_second","qualname":"<Parsed>::set_second","value":"pub fn set_second(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`second`](#structfield.second) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`second`](#structfield.second) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505179,"byte_end":505255,"line_start":257,"line_end":257,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505260,"byte_end":505269,"line_start":258,"line_end":258,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1168},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505538,"byte_end":505552,"line_start":265,"line_end":265,"column_start":12,"column_end":26},"name":"set_nanosecond","qualname":"<Parsed>::set_nanosecond","value":"pub fn set_nanosecond(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`nanosecond`](#structfield.nanosecond) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505428,"byte_end":505512,"line_start":263,"line_end":263,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505517,"byte_end":505526,"line_start":264,"line_end":264,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505801,"byte_end":505814,"line_start":271,"line_end":271,"column_start":12,"column_end":25},"name":"set_timestamp","qualname":"<Parsed>::set_timestamp","value":"pub fn set_timestamp(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`timestamp`](#structfield.timestamp) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`timestamp`](#structfield.timestamp) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505693,"byte_end":505775,"line_start":269,"line_end":269,"column_start":5,"column_end":87}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505780,"byte_end":505789,"line_start":270,"line_end":270,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1170},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506026,"byte_end":506036,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"set_offset","qualname":"<Parsed>::set_offset","value":"pub fn set_offset(&mut Self, i64) -> ParseResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Tries to set the [`offset`](#structfield.offset) field from given value.\n","sig":null,"attributes":[{"value":"/ Tries to set the [`offset`](#structfield.offset) field from given value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":505924,"byte_end":506000,"line_start":275,"line_end":275,"column_start":5,"column_end":81}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506005,"byte_end":506014,"line_start":276,"line_end":276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1171},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506680,"byte_end":506693,"line_start":292,"line_end":292,"column_start":12,"column_end":25},"name":"to_naive_date","qualname":"<Parsed>::to_naive_date","value":"pub fn to_naive_date(&Self) -> ParseResult<NaiveDate>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date out of given fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506173,"byte_end":506225,"line_start":281,"line_end":281,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506230,"byte_end":506233,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the date from given subset of fields:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506238,"byte_end":506312,"line_start":283,"line_end":283,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506317,"byte_end":506320,"line_start":284,"line_end":284,"column_start":5,"column_end":8}},{"value":"/ - Year, month, day.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506325,"byte_end":506348,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ - Year, day of the year (ordinal).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506353,"byte_end":506391,"line_start":286,"line_end":286,"column_start":5,"column_end":43}},{"value":"/ - Year, week number counted from Sunday or Monday, day of the week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506396,"byte_end":506467,"line_start":287,"line_end":287,"column_start":5,"column_end":76}},{"value":"/ - ISO week date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506472,"byte_end":506492,"line_start":288,"line_end":288,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506497,"byte_end":506500,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Gregorian year and ISO week date year can have their century number (`*_div_100`) omitted,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506505,"byte_end":506599,"line_start":290,"line_end":290,"column_start":5,"column_end":99}},{"value":"/ the two-digit year is used to guess the century number then.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":506604,"byte_end":506668,"line_start":291,"line_end":291,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1179},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515681,"byte_end":515694,"line_start":477,"line_end":477,"column_start":12,"column_end":25},"name":"to_naive_time","qualname":"<Parsed>::to_naive_time","value":"pub fn to_naive_time(&Self) -> ParseResult<NaiveTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed naive time out of given fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515278,"byte_end":515330,"line_start":468,"line_end":468,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515335,"byte_end":515338,"line_start":469,"line_end":469,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the time from given subset of fields:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515343,"byte_end":515417,"line_start":470,"line_end":470,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515422,"byte_end":515425,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ - Hour, minute. (second and nanosecond assumed to be 0)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515430,"byte_end":515489,"line_start":472,"line_end":472,"column_start":5,"column_end":64}},{"value":"/ - Hour, minute, second. (nanosecond assumed to be 0)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515494,"byte_end":515550,"line_start":473,"line_end":473,"column_start":5,"column_end":61}},{"value":"/ - Hour, minute, second, nanosecond.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515555,"byte_end":515594,"line_start":474,"line_end":474,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515599,"byte_end":515602,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ It is able to handle leap seconds when given second is 60.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":515607,"byte_end":515669,"line_start":476,"line_end":476,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1180},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517477,"byte_end":517506,"line_start":519,"line_end":519,"column_start":12,"column_end":41},"name":"to_naive_datetime_with_offset","qualname":"<Parsed>::to_naive_datetime_with_offset","value":"pub fn to_naive_datetime_with_offset(&Self, i32) -> ParseResult<NaiveDateTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed naive date and time out of given fields,\n except for the [`offset`](#structfield.offset) field (assumed to have a given value).\n This is required for parsing a local time or other known-timezone inputs.","sig":null,"attributes":[{"value":"/ Returns a parsed naive date and time out of given fields,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":516992,"byte_end":517053,"line_start":512,"line_end":512,"column_start":5,"column_end":66}},{"value":"/ except for the [`offset`](#structfield.offset) field (assumed to have a given value).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517058,"byte_end":517147,"line_start":513,"line_end":513,"column_start":5,"column_end":94}},{"value":"/ This is required for parsing a local time or other known-timezone inputs.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517152,"byte_end":517229,"line_start":514,"line_end":514,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517234,"byte_end":517237,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517242,"byte_end":517305,"line_start":516,"line_end":516,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517310,"byte_end":517396,"line_start":517,"line_end":517,"column_start":5,"column_end":91}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":517401,"byte_end":517465,"line_start":518,"line_end":518,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1185},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":520873,"byte_end":520888,"line_start":589,"line_end":589,"column_start":12,"column_end":27},"name":"to_fixed_offset","qualname":"<Parsed>::to_fixed_offset","value":"pub fn to_fixed_offset(&Self) -> ParseResult<FixedOffset>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed fixed time zone offset out of given fields.\n","sig":null,"attributes":[{"value":"/ Returns a parsed fixed time zone offset out of given fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":520797,"byte_end":520861,"line_start":588,"line_end":588,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521360,"byte_end":521371,"line_start":599,"line_end":599,"column_start":12,"column_end":23},"name":"to_datetime","qualname":"<Parsed>::to_datetime","value":"pub fn to_datetime(&Self) -> ParseResult<DateTime<FixedOffset>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521009,"byte_end":521079,"line_start":593,"line_end":593,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521084,"byte_end":521087,"line_start":594,"line_end":594,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521092,"byte_end":521155,"line_start":595,"line_end":595,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521160,"byte_end":521246,"line_start":596,"line_end":596,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521251,"byte_end":521279,"line_start":597,"line_end":597,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521284,"byte_end":521348,"line_start":598,"line_end":598,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1187},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522399,"byte_end":522424,"line_start":619,"line_end":619,"column_start":12,"column_end":37},"name":"to_datetime_with_timezone","qualname":"<Parsed>::to_datetime_with_timezone","value":"pub fn to_datetime_with_timezone<Tz: TimeZone>(&Self, &Tz)\n-> ParseResult<DateTime<Tz>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a parsed timezone-aware date and time out of given fields,\n with an additional `TimeZone` used to interpret and validate the local date.","sig":null,"attributes":[{"value":"/ Returns a parsed timezone-aware date and time out of given fields,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521842,"byte_end":521912,"line_start":610,"line_end":610,"column_start":5,"column_end":75}},{"value":"/ with an additional `TimeZone` used to interpret and validate the local date.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":521917,"byte_end":521997,"line_start":611,"line_end":611,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522002,"byte_end":522005,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ This method is able to determine the combined date and time","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522010,"byte_end":522073,"line_start":613,"line_end":613,"column_start":5,"column_end":68}},{"value":"/ from date and time fields or a single [`timestamp`](#structfield.timestamp) field,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522078,"byte_end":522164,"line_start":614,"line_end":614,"column_start":5,"column_end":91}},{"value":"/ plus a time zone offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522169,"byte_end":522197,"line_start":615,"line_end":615,"column_start":5,"column_end":33}},{"value":"/ Either way those fields have to be consistent to each other.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522202,"byte_end":522266,"line_start":616,"line_end":616,"column_start":5,"column_end":69}},{"value":"/ If parsed fields include an UTC offset, it also has to be consistent to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522271,"byte_end":522346,"line_start":617,"line_end":617,"column_start":5,"column_end":80}},{"value":"/ [`offset`](#structfield.offset).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":522351,"byte_end":522387,"line_start":618,"line_end":618,"column_start":5,"column_end":41}}]},{"kind":"Function","id":{"krate":0,"index":1259},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569534,"byte_end":569539,"line_start":208,"line_end":208,"column_start":8,"column_end":13},"name":"parse","qualname":"::format::parse::parse","value":"pub fn parse<'a, I, B>(&mut Parsed, &str, I) -> ParseResult<()> where\nI: Iterator<Item = B>, B: Borrow<Item>","parent":null,"children":[],"decl_id":null,"docs":" Tries to parse given string into `parsed` with given formatting items.\n Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\n There should be no trailing string after parsing;\n use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","sig":null,"attributes":[{"value":"/ Tries to parse given string into `parsed` with given formatting items.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568631,"byte_end":568705,"line_start":192,"line_end":192,"column_start":1,"column_end":75}},{"value":"/ Returns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568706,"byte_end":568802,"line_start":193,"line_end":193,"column_start":1,"column_end":97}},{"value":"/ There should be no trailing string after parsing;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568803,"byte_end":568856,"line_start":194,"line_end":194,"column_start":1,"column_end":54}},{"value":"/ use a stray [`Item::Space`](./enum.Item.html#variant.Space) to trim whitespaces.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568857,"byte_end":568941,"line_start":195,"line_end":195,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568942,"byte_end":568945,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ This particular date and time parser is:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568946,"byte_end":568990,"line_start":197,"line_end":197,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568991,"byte_end":568994,"line_start":198,"line_end":198,"column_start":1,"column_end":4}},{"value":"/ - Greedy. It will consume the longest possible prefix.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":568995,"byte_end":569053,"line_start":199,"line_end":199,"column_start":1,"column_end":59}},{"value":"/   For example, `April` is always consumed entirely when the long month name is requested;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569054,"byte_end":569147,"line_start":200,"line_end":200,"column_start":1,"column_end":94}},{"value":"/   it equally accepts `Apr`, but prefers the longer prefix in this case.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569148,"byte_end":569223,"line_start":201,"line_end":201,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569224,"byte_end":569227,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ - Padding-agnostic (for numeric items).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569228,"byte_end":569271,"line_start":203,"line_end":203,"column_start":1,"column_end":44}},{"value":"/   The [`Pad`](./enum.Pad.html) field is completely ignored,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569272,"byte_end":569335,"line_start":204,"line_end":204,"column_start":1,"column_end":64}},{"value":"/   so one can prepend any number of whitespace then any number of zeroes before numbers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569336,"byte_end":569427,"line_start":205,"line_end":205,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569428,"byte_end":569431,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/ - (Still) obeying the intrinsic parsing width. This allows, for example, parsing `HHMMSS`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parse.rs","byte_start":569432,"byte_end":569526,"line_start":207,"line_end":207,"column_start":1,"column_end":95}}]},{"kind":"Mod","id":{"krate":0,"index":1267},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"strftime","qualname":"::format::strftime","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","parent":null,"children":[{"krate":0,"index":1268},{"krate":0,"index":1269},{"krate":0,"index":1270},{"krate":0,"index":1271},{"krate":0,"index":1272},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1883},{"krate":0,"index":1890},{"krate":0,"index":1887},{"krate":0,"index":1275},{"krate":0,"index":1280},{"krate":0,"index":1281}],"decl_id":null,"docs":"`strftime`/`strptime`-inspired date and time formatting syntax.","sig":null,"attributes":[{"value":"*\n`strftime`/`strptime`-inspired date and time formatting syntax.\n\n## Specifiers\n\nThe following specifiers are available both to formatting and parsing.\n\n| Spec. | Example  | Description                                                                |\n|-------|----------|----------------------------------------------------------------------------|\n|       |          | **DATE SPECIFIERS:**                                                       |\n| `%Y`  | `2001`   | The full proleptic Gregorian year, zero-padded to 4 digits. [^1]           |\n| `%C`  | `20`     | The proleptic Gregorian year divided by 100, zero-padded to 2 digits. [^2] |\n| `%y`  | `01`     | The proleptic Gregorian year modulo 100, zero-padded to 2 digits. [^2]     |\n|       |          |                                                                            |\n| `%m`  | `07`     | Month number (01--12), zero-padded to 2 digits.                            |\n| `%b`  | `Jul`    | Abbreviated month name. Always 3 letters.                                  |\n| `%B`  | `July`   | Full month name. Also accepts corresponding abbreviation in parsing.       |\n| `%h`  | `Jul`    | Same to `%b`.                                                              |\n|       |          |                                                                            |\n| `%d`  | `08`     | Day number (01--31), zero-padded to 2 digits.                              |\n| `%e`  | ` 8`     | Same to `%d` but space-padded. Same to `%_d`.                              |\n|       |          |                                                                            |\n| `%a`  | `Sun`    | Abbreviated weekday name. Always 3 letters.                                |\n| `%A`  | `Sunday` | Full weekday name. Also accepts corresponding abbreviation in parsing.     |\n| `%w`  | `0`      | Sunday = 0, Monday = 1, ..., Saturday = 6.                                 |\n| `%u`  | `7`      | Monday = 1, Tuesday = 2, ..., Sunday = 7. (ISO 8601)                       |\n|       |          |                                                                            |\n| `%U`  | `28`     | Week number starting with Sunday (00--53), zero-padded to 2 digits. [^3]   |\n| `%W`  | `27`     | Same to `%U`, but week 1 starts with the first Monday in that year instead.|\n|       |          |                                                                            |\n| `%G`  | `2001`   | Same to `%Y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%g`  | `01`     | Same to `%y` but uses the year number in ISO 8601 week date. [^4]          |\n| `%V`  | `27`     | Same to `%U` but uses the week number in ISO 8601 week date (01--53). [^4] |\n|       |          |                                                                            |\n| `%j`  | `189`    | Day of the year (001--366), zero-padded to 3 digits.                       |\n|       |          |                                                                            |\n| `%D`  | `07/08/01`    | Month-day-year format. Same to `%m/%d/%y`.                            |\n| `%x`  | `07/08/01`    | Same to `%D`.                                                         |\n| `%F`  | `2001-07-08`  | Year-month-day format (ISO 8601). Same to `%Y-%m-%d`.                 |\n| `%v`  | ` 8-Jul-2001` | Day-month-year format. Same to `%e-%b-%Y`.                            |\n|       |          |                                                                            |\n|       |          | **TIME SPECIFIERS:**                                                       |\n| `%H`  | `00`     | Hour number (00--23), zero-padded to 2 digits.                             |\n| `%k`  | ` 0`     | Same to `%H` but space-padded. Same to `%_H`.                              |\n| `%I`  | `12`     | Hour number in 12-hour clocks (01--12), zero-padded to 2 digits.           |\n| `%l`  | `12`     | Same to `%I` but space-padded. Same to `%_I`.                              |\n|       |          |                                                                            |\n| `%P`  | `am`     | `am` or `pm` in 12-hour clocks.                                            |\n| `%p`  | `AM`     | `AM` or `PM` in 12-hour clocks.                                            |\n|       |          |                                                                            |\n| `%M`  | `34`     | Minute number (00--59), zero-padded to 2 digits.                           |\n| `%S`  | `60`     | Second number (00--60), zero-padded to 2 digits. [^5]                      |\n| `%f`  | `026490000`   | The fractional seconds (in nanoseconds) since last whole second. [^8] |\n| `%.f` | `.026490`| Similar to `.%f` but left-aligned. These all consume the leading dot. [^8] |\n| `%.3f`| `.026`        | Similar to `.%f` but left-aligned but fixed to a length of 3. [^8]    |\n| `%.6f`| `.026490`     | Similar to `.%f` but left-aligned but fixed to a length of 6. [^8]    |\n| `%.9f`| `.026490000`  | Similar to `.%f` but left-aligned but fixed to a length of 9. [^8]    |\n| `%3f` | `026`         | Similar to `%.3f` but without the leading dot. [^8]                   |\n| `%6f` | `026490`      | Similar to `%.6f` but without the leading dot. [^8]                   |\n| `%9f` | `026490000`   | Similar to `%.9f` but without the leading dot. [^8]                   |\n|       |               |                                                                       |\n| `%R`  | `00:34`       | Hour-minute format. Same to `%H:%M`.                                  |\n| `%T`  | `00:34:60`    | Hour-minute-second format. Same to `%H:%M:%S`.                        |\n| `%X`  | `00:34:60`    | Same to `%T`.                                                         |\n| `%r`  | `12:34:60 AM` | Hour-minute-second format in 12-hour clocks. Same to `%I:%M:%S %p`.   |\n|       |          |                                                                            |\n|       |          | **TIME ZONE SPECIFIERS:**                                                  |\n| `%Z`  | `ACST`   | *Formatting only:* Local time zone name.                                   |\n| `%z`  | `+0930`  | Offset from the local time to UTC (with UTC being `+0000`).                |\n| `%:z` | `+09:30` | Same to `%z` but with a colon.                                             |\n| `%#z` | `+09`    | *Parsing only:* Same to `%z` but allows minutes to be missing or present.  |\n|       |          |                                                                            |\n|       |          | **DATE & TIME SPECIFIERS:**                                                |\n|`%c`|`Sun Jul  8 00:34:60 2001`|`ctime` date & time format. Same to `%a %b %e %T %Y` sans `\\n`.|\n| `%+`  | `2001-07-08T00:34:60.026490+09:30` | ISO 8601 / RFC 3339 date & time format. [^6]     |\n|       |               |                                                                       |\n| `%s`  | `994518299`   | UNIX timestamp, the number of seconds since 1970-01-01 00:00 UTC. [^7]|\n|       |          |                                                                            |\n|       |          | **SPECIAL SPECIFIERS:**                                                    |\n| `%t`  |          | Literal tab (`\\t`).                                                        |\n| `%n`  |          | Literal newline (`\\n`).                                                    |\n| `%%`  |          | Literal percent sign.                                                      |\n\nIt is possible to override the default padding behavior of numeric specifiers `%?`.\nThis is not allowed for other specifiers and will result in the `BAD_FORMAT` error.\n\nModifier | Description\n-------- | -----------\n`%-?`    | Suppresses any padding including spaces and zeroes. (e.g. `%j` = `012`, `%-j` = `12`)\n`%_?`    | Uses spaces as a padding. (e.g. `%j` = `012`, `%_j` = ` 12`)\n`%0?`    | Uses zeroes as a padding. (e.g. `%e` = ` 9`, `%0e` = `09`)\n\nNotes:\n\n[^1]: `%Y`:\n   Negative years are allowed in formatting but not in parsing.\n\n[^2]: `%C`, `%y`:\n   This is floor division, so 100 BCE (year number -99) will print `-1` and `99` respectively.\n\n[^3]: `%U`:\n   Week 1 starts with the first Sunday in that year.\n   It is possible to have week 0 for days before the first Sunday.\n\n[^4]: `%G`, `%g`, `%V`:\n   Week 1 is the first week with at least 4 days in that year.\n   Week 0 does not exist, so this should be used with `%G` or `%g`.\n\n[^5]: `%S`:\n   It accounts for leap seconds, so `60` is possible.\n\n[^6]: `%+`: Same as `%Y-%m-%dT%H:%M:%S%.f%:z`, i.e. 0, 3, 6 or 9 fractional\n   digits for seconds and colons in the time zone offset.\n   <br>\n   <br>\n   The typical `strftime` implementations have different (and locale-dependent)\n   formats for this specifier. While Chrono's format for `%+` is far more\n   stable, it is best to avoid this specifier if you want to control the exact\n   output.\n\n[^7]: `%s`:\n   This is not padded and can be negative.\n   For the purpose of Chrono, it only accounts for non-leap seconds\n   so it slightly differs from ISO C `strftime` behavior.\n\n[^8]: `%f`, `%.f`, `%.3f`, `%.6f`, `%.9f`, `%3f`, `%6f`, `%9f`:\n   <br>\n   The default `%f` is right-aligned and always zero-padded to 9 digits\n   for the compatibility with glibc and others,\n   so it always counts the number of nanoseconds since the last whole second.\n   E.g. 7ms after the last second will print `007000000`,\n   and parsing `7000000` will yield the same.\n   <br>\n   <br>\n   The variant `%.f` is left-aligned and print 0, 3, 6 or 9 fractional digits\n   according to the precision.\n   E.g. 70ms after the last second under `%.f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can print or read nothing if the fractional part is zero or\n   the next character is not `.`.\n   <br>\n   <br>\n   The variant `%.3f`, `%.6f` and `%.9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`.\n   E.g. 70ms after the last second under `%.3f` will print `.070` (note: not `.07`),\n   and parsing `.07`, `.070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero or\n   the next character is not `.` however will print with the specified length.\n   <br>\n   <br>\n   The variant `%3f`, `%6f` and `%9f` are left-aligned and print 3, 6 or 9 fractional digits\n   according to the number preceding `f`, but without the leading dot.\n   E.g. 70ms after the last second under `%3f` will print `070` (note: not `07`),\n   and parsing `07`, `070000` etc. will yield the same.\n   Note that they can read nothing if the fractional part is zero.\n\n*/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":599727,"byte_end":610407,"line_start":4,"line_end":160,"column_start":1,"column_end":3}}]},{"kind":"Struct","id":{"krate":0,"index":1883},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610575,"byte_end":610588,"line_start":166,"line_end":166,"column_start":12,"column_end":25},"name":"StrftimeItems","qualname":"::format::strftime::StrftimeItems","value":"StrftimeItems {  }","parent":null,"children":[{"krate":0,"index":1885},{"krate":0,"index":1886}],"decl_id":null,"docs":" Parsing iterator for `strftime`-like format strings.\n","sig":null,"attributes":[{"value":"/ Parsing iterator for `strftime`-like format strings.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610483,"byte_end":610539,"line_start":164,"line_end":164,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1277},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":611064,"byte_end":611067,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<StrftimeItems>::new","value":"pub fn new(&'a str) -> StrftimeItems","parent":null,"children":[],"decl_id":null,"docs":" Creates a new parsing iterator from the `strftime`-like format string.\n","sig":null,"attributes":[{"value":"/ Creates a new parsing iterator from the `strftime`-like format string.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610978,"byte_end":611052,"line_start":176,"line_end":176,"column_start":5,"column_end":79}}]},{"kind":"Struct","id":{"krate":0,"index":1902},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492642,"byte_end":492655,"line_start":623,"line_end":623,"column_start":12,"column_end":25},"name":"DelayedFormat","qualname":"::format::DelayedFormat","value":"DelayedFormat {  }","parent":null,"children":[{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1906},{"krate":0,"index":1907}],"decl_id":null,"docs":" A *temporary* object which can be used as an argument to `format!` or others.\n This is normally constructed via `format` methods of each date and time type.\n","sig":null,"attributes":[{"value":"/ A *temporary* object which can be used as an argument to `format!` or others.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492396,"byte_end":492477,"line_start":619,"line_end":619,"column_start":1,"column_end":82}},{"value":"/ This is normally constructed via `format` methods of each date and time type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492478,"byte_end":492559,"line_start":620,"line_end":620,"column_start":1,"column_end":82}},{"value":"cfg(any(feature = \"alloc\", feature = \"std\", test))","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492560,"byte_end":492613,"line_start":621,"line_end":621,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1295},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493179,"byte_end":493182,"line_start":637,"line_end":637,"column_start":12,"column_end":15},"name":"new","qualname":"<DelayedFormat<I>>::new","value":"pub fn new(Option<NaiveDate>, Option<NaiveTime>, I) -> DelayedFormat<I>","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493102,"byte_end":493167,"line_start":636,"line_end":636,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1296},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493442,"byte_end":493457,"line_start":642,"line_end":642,"column_start":12,"column_end":27},"name":"new_with_offset","qualname":"<DelayedFormat<I>>::new_with_offset","value":"pub fn new_with_offset<Off>(Option<NaiveDate>, Option<NaiveTime>, &Off, I)\n-> DelayedFormat<I> where Off: Offset + fmt::Display","parent":null,"children":[],"decl_id":null,"docs":" Makes a new `DelayedFormat` value out of local date and time and UTC offset.\n","sig":null,"attributes":[{"value":"/ Makes a new `DelayedFormat` value out of local date and time and UTC offset.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493350,"byte_end":493430,"line_start":641,"line_end":641,"column_start":5,"column_end":85}}]},{"kind":"Trait","id":{"krate":0,"index":1312},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625951,"byte_end":625962,"line_start":14,"line_end":14,"column_start":11,"column_end":22},"name":"SubsecRound","qualname":"::round::SubsecRound","value":"SubsecRound","parent":null,"children":[{"krate":0,"index":1313},{"krate":0,"index":1314}],"decl_id":null,"docs":" Extension trait for subsecond rounding or truncation to a maximum number\n of digits. Rounding can be used to decrease the error variance when\n serializing/persisting to lower precision. Truncation is the default\n behavior in Chrono display formatting.  Either can be used to guarantee\n equality (e.g. for testing) when round-tripping through a lower precision\n format.\n","sig":null,"attributes":[{"value":"/ Extension trait for subsecond rounding or truncation to a maximum number","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625553,"byte_end":625629,"line_start":8,"line_end":8,"column_start":1,"column_end":77}},{"value":"/ of digits. Rounding can be used to decrease the error variance when","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625630,"byte_end":625701,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/ serializing/persisting to lower precision. Truncation is the default","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625702,"byte_end":625774,"line_start":10,"line_end":10,"column_start":1,"column_end":73}},{"value":"/ behavior in Chrono display formatting.  Either can be used to guarantee","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625775,"byte_end":625850,"line_start":11,"line_end":11,"column_start":1,"column_end":76}},{"value":"/ equality (e.g. for testing) when round-tripping through a lower precision","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625851,"byte_end":625928,"line_start":12,"line_end":12,"column_start":1,"column_end":78}},{"value":"/ format.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625929,"byte_end":625940,"line_start":13,"line_end":13,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1313},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626492,"byte_end":626505,"line_start":26,"line_end":26,"column_start":8,"column_end":21},"name":"round_subsecs","qualname":"::round::SubsecRound::round_subsecs","value":"pub fn round_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1312},"children":[],"decl_id":null,"docs":" Return a copy rounded to the specified number of subsecond digits. With\n 9 or more digits, self is returned unmodified. Halfway values are\n rounded up (away from zero).","sig":null,"attributes":[{"value":"/ Return a copy rounded to the specified number of subsecond digits. With","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":625969,"byte_end":626044,"line_start":15,"line_end":15,"column_start":5,"column_end":80}},{"value":"/ 9 or more digits, self is returned unmodified. Halfway values are","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626049,"byte_end":626118,"line_start":16,"line_end":16,"column_start":5,"column_end":74}},{"value":"/ rounded up (away from zero).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626123,"byte_end":626155,"line_start":17,"line_end":17,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626160,"byte_end":626163,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626168,"byte_end":626181,"line_start":19,"line_end":19,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626186,"byte_end":626198,"line_start":20,"line_end":20,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626203,"byte_end":626270,"line_start":21,"line_end":21,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626275,"byte_end":626338,"line_start":22,"line_end":22,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.round_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626343,"byte_end":626405,"line_start":23,"line_end":23,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.round_subsecs(1).nanosecond(), 200_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626410,"byte_end":626472,"line_start":24,"line_end":24,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626477,"byte_end":626484,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1314},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":627008,"byte_end":627021,"line_start":38,"line_end":38,"column_start":8,"column_end":21},"name":"trunc_subsecs","qualname":"::round::SubsecRound::trunc_subsecs","value":"pub fn trunc_subsecs(Self, u16) -> Self","parent":{"krate":0,"index":1312},"children":[],"decl_id":null,"docs":" Return a copy truncated to the specified number of subsecond\n digits. With 9 or more digits, self is returned unmodified.","sig":null,"attributes":[{"value":"/ Return a copy truncated to the specified number of subsecond","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626539,"byte_end":626603,"line_start":28,"line_end":28,"column_start":5,"column_end":69}},{"value":"/ digits. With 9 or more digits, self is returned unmodified.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626608,"byte_end":626671,"line_start":29,"line_end":29,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626676,"byte_end":626679,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626684,"byte_end":626697,"line_start":31,"line_end":31,"column_start":5,"column_end":18}},{"value":"/ ``` rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626702,"byte_end":626714,"line_start":32,"line_end":32,"column_start":5,"column_end":17}},{"value":"/ # use chrono::{DateTime, SubsecRound, Timelike, TimeZone, Utc};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626719,"byte_end":626786,"line_start":33,"line_end":33,"column_start":5,"column_end":72}},{"value":"/ let dt = Utc.ymd(2018, 1, 11).and_hms_milli(12, 0, 0, 154);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626791,"byte_end":626854,"line_start":34,"line_end":34,"column_start":5,"column_end":68}},{"value":"/ assert_eq!(dt.trunc_subsecs(2).nanosecond(), 150_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626859,"byte_end":626921,"line_start":35,"line_end":35,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(dt.trunc_subsecs(1).nanosecond(), 100_000_000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626926,"byte_end":626988,"line_start":36,"line_end":36,"column_start":5,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":626993,"byte_end":627000,"line_start":37,"line_end":37,"column_start":5,"column_end":12}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1912},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23950,"byte_end":23953,"line_start":570,"line_end":570,"column_start":5,"column_end":8},"name":"Mon","qualname":"::Weekday::Mon","value":"Weekday::Mon","parent":{"krate":0,"index":1911},"children":[],"decl_id":null,"docs":" Monday.\n","sig":null,"attributes":[{"value":"/ Monday.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23934,"byte_end":23945,"line_start":569,"line_end":569,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1915},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23980,"byte_end":23983,"line_start":572,"line_end":572,"column_start":5,"column_end":8},"name":"Tue","qualname":"::Weekday::Tue","value":"Weekday::Tue","parent":{"krate":0,"index":1911},"children":[],"decl_id":null,"docs":" Tuesday.\n","sig":null,"attributes":[{"value":"/ Tuesday.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23963,"byte_end":23975,"line_start":571,"line_end":571,"column_start":5,"column_end":17}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1918},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24012,"byte_end":24015,"line_start":574,"line_end":574,"column_start":5,"column_end":8},"name":"Wed","qualname":"::Weekday::Wed","value":"Weekday::Wed","parent":{"krate":0,"index":1911},"children":[],"decl_id":null,"docs":" Wednesday.\n","sig":null,"attributes":[{"value":"/ Wednesday.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23993,"byte_end":24007,"line_start":573,"line_end":573,"column_start":5,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1921},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24043,"byte_end":24046,"line_start":576,"line_end":576,"column_start":5,"column_end":8},"name":"Thu","qualname":"::Weekday::Thu","value":"Weekday::Thu","parent":{"krate":0,"index":1911},"children":[],"decl_id":null,"docs":" Thursday.\n","sig":null,"attributes":[{"value":"/ Thursday.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24025,"byte_end":24038,"line_start":575,"line_end":575,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1924},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24072,"byte_end":24075,"line_start":578,"line_end":578,"column_start":5,"column_end":8},"name":"Fri","qualname":"::Weekday::Fri","value":"Weekday::Fri","parent":{"krate":0,"index":1911},"children":[],"decl_id":null,"docs":" Friday.\n","sig":null,"attributes":[{"value":"/ Friday.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24056,"byte_end":24067,"line_start":577,"line_end":577,"column_start":5,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1927},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24103,"byte_end":24106,"line_start":580,"line_end":580,"column_start":5,"column_end":8},"name":"Sat","qualname":"::Weekday::Sat","value":"Weekday::Sat","parent":{"krate":0,"index":1911},"children":[],"decl_id":null,"docs":" Saturday.\n","sig":null,"attributes":[{"value":"/ Saturday.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24085,"byte_end":24098,"line_start":579,"line_end":579,"column_start":5,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1930},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24132,"byte_end":24135,"line_start":582,"line_end":582,"column_start":5,"column_end":8},"name":"Sun","qualname":"::Weekday::Sun","value":"Weekday::Sun","parent":{"krate":0,"index":1911},"children":[],"decl_id":null,"docs":" Sunday.\n","sig":null,"attributes":[{"value":"/ Sunday.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24116,"byte_end":24127,"line_start":581,"line_end":581,"column_start":5,"column_end":16}}]},{"kind":"Enum","id":{"krate":0,"index":1911},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23920,"byte_end":23927,"line_start":568,"line_end":568,"column_start":10,"column_end":17},"name":"Weekday","qualname":"::Weekday","value":"pub enum Weekday {\n\n    /// Monday.\n    Mon = ,\n\n    /// Tuesday.\n    Tue = ,\n\n    /// Wednesday.\n    Wed = ,\n\n    /// Thursday.\n    Thu = ,\n\n    /// Friday.\n    Fri = ,\n\n    /// Saturday.\n    Sat = ,\n\n    /// Sunday.\n    Sun = ,\n}","parent":null,"children":[{"krate":0,"index":1912},{"krate":0,"index":1915},{"krate":0,"index":1918},{"krate":0,"index":1921},{"krate":0,"index":1924},{"krate":0,"index":1927},{"krate":0,"index":1930}],"decl_id":null,"docs":" The day of week.","sig":null,"attributes":[{"value":"/ The day of week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23525,"byte_end":23545,"line_start":561,"line_end":561,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23546,"byte_end":23549,"line_start":562,"line_end":562,"column_start":1,"column_end":4}},{"value":"/ The order of the days of week depends on the context.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23550,"byte_end":23607,"line_start":563,"line_end":563,"column_start":1,"column_end":58}},{"value":"/ (This is why this type does *not* implement `PartialOrd` or `Ord` traits.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23608,"byte_end":23686,"line_start":564,"line_end":564,"column_start":1,"column_end":79}},{"value":"/ One should prefer `*_from_monday` or `*_from_sunday` methods to get the correct result.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":23687,"byte_end":23778,"line_start":565,"line_end":565,"column_start":1,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24454,"byte_end":24458,"line_start":592,"line_end":592,"column_start":12,"column_end":16},"name":"succ","qualname":"<Weekday>::succ","value":"pub fn succ(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The next day in the week.","sig":null,"attributes":[{"value":"/ The next day in the week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24163,"byte_end":24192,"line_start":586,"line_end":586,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24197,"byte_end":24200,"line_start":587,"line_end":587,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24205,"byte_end":24276,"line_start":588,"line_end":588,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24281,"byte_end":24352,"line_start":589,"line_end":589,"column_start":5,"column_end":76}},{"value":"/ `w.succ()`: | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun` | `Mon`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24357,"byte_end":24428,"line_start":590,"line_end":590,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24433,"byte_end":24442,"line_start":591,"line_end":591,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25111,"byte_end":25115,"line_start":610,"line_end":610,"column_start":12,"column_end":16},"name":"pred","qualname":"<Weekday>::pred","value":"pub fn pred(&Self) -> Weekday","parent":null,"children":[],"decl_id":null,"docs":" The previous day in the week.","sig":null,"attributes":[{"value":"/ The previous day in the week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24816,"byte_end":24849,"line_start":604,"line_end":604,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24854,"byte_end":24857,"line_start":605,"line_end":605,"column_start":5,"column_end":8}},{"value":"/ `w`:        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24862,"byte_end":24933,"line_start":606,"line_end":606,"column_start":5,"column_end":76}},{"value":"/ ----------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24938,"byte_end":25009,"line_start":607,"line_end":607,"column_start":5,"column_end":76}},{"value":"/ `w.pred()`: | `Sun` | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25014,"byte_end":25085,"line_start":608,"line_end":608,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25090,"byte_end":25099,"line_start":609,"line_end":609,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25857,"byte_end":25875,"line_start":628,"line_end":628,"column_start":12,"column_end":30},"name":"number_from_monday","qualname":"<Weekday>::number_from_monday","value":"pub fn number_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 1. (ISO 8601 weekday number)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25473,"byte_end":25557,"line_start":622,"line_end":622,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25562,"byte_end":25565,"line_start":623,"line_end":623,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25570,"byte_end":25655,"line_start":624,"line_end":624,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25660,"byte_end":25745,"line_start":625,"line_end":625,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_monday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 7","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25750,"byte_end":25831,"line_start":626,"line_end":626,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":25836,"byte_end":25845,"line_start":627,"line_end":627,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26510,"byte_end":26528,"line_start":646,"line_end":646,"column_start":12,"column_end":30},"name":"number_from_sunday","qualname":"<Weekday>::number_from_sunday","value":"pub fn number_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 1.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26152,"byte_end":26210,"line_start":640,"line_end":640,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26215,"byte_end":26218,"line_start":641,"line_end":641,"column_start":5,"column_end":8}},{"value":"/ `w`:                      | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26223,"byte_end":26308,"line_start":642,"line_end":642,"column_start":5,"column_end":90}},{"value":"/ ------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26313,"byte_end":26398,"line_start":643,"line_end":643,"column_start":5,"column_end":90}},{"value":"/ `w.number_from_sunday()`: | 2     | 3     | 4     | 5     | 6     | 7     | 1","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26403,"byte_end":26484,"line_start":644,"line_end":644,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26489,"byte_end":26498,"line_start":645,"line_end":645,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27169,"byte_end":27189,"line_start":664,"line_end":664,"column_start":12,"column_end":32},"name":"num_days_from_monday","qualname":"<Weekday>::num_days_from_monday","value":"pub fn num_days_from_monday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Monday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Monday = 0.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26805,"byte_end":26863,"line_start":658,"line_end":658,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26868,"byte_end":26871,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26876,"byte_end":26963,"line_start":660,"line_end":660,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":26968,"byte_end":27055,"line_start":661,"line_end":661,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_monday()`: | 0     | 1     | 2     | 3     | 4     | 5     | 6","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27060,"byte_end":27143,"line_start":662,"line_end":662,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27148,"byte_end":27157,"line_start":663,"line_end":663,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27830,"byte_end":27850,"line_start":682,"line_end":682,"column_start":12,"column_end":32},"name":"num_days_from_sunday","qualname":"<Weekday>::num_days_from_sunday","value":"pub fn num_days_from_sunday(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns a day-of-week number starting from Sunday = 0.","sig":null,"attributes":[{"value":"/ Returns a day-of-week number starting from Sunday = 0.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27466,"byte_end":27524,"line_start":676,"line_end":676,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27529,"byte_end":27532,"line_start":677,"line_end":677,"column_start":5,"column_end":8}},{"value":"/ `w`:                        | `Mon` | `Tue` | `Wed` | `Thu` | `Fri` | `Sat` | `Sun`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27537,"byte_end":27624,"line_start":678,"line_end":678,"column_start":5,"column_end":92}},{"value":"/ --------------------------- | ----- | ----- | ----- | ----- | ----- | ----- | -----","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27629,"byte_end":27716,"line_start":679,"line_end":679,"column_start":5,"column_end":92}},{"value":"/ `w.num_days_from_sunday()`: | 1     | 2     | 3     | 4     | 5     | 6     | 0","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27721,"byte_end":27804,"line_start":680,"line_end":680,"column_start":5,"column_end":88}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":27809,"byte_end":27818,"line_start":681,"line_end":681,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1947},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":29689,"byte_end":29706,"line_start":746,"line_end":746,"column_start":12,"column_end":29},"name":"ParseWeekdayError","qualname":"::ParseWeekdayError","value":"ParseWeekdayError {  }","parent":null,"children":[{"krate":0,"index":1948}],"decl_id":null,"docs":" An error resulting from reading `Weekday` value with `FromStr`.\n","sig":null,"attributes":[{"value":"/ An error resulting from reading `Weekday` value with `FromStr`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":29582,"byte_end":29649,"line_start":744,"line_end":744,"column_start":1,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":1335},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32806,"byte_end":32814,"line_start":865,"line_end":865,"column_start":11,"column_end":19},"name":"Datelike","qualname":"::Datelike","value":"Datelike: Sized","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1347},{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1350},{"krate":0,"index":1351},{"krate":0,"index":1352},{"krate":0,"index":1353}],"decl_id":null,"docs":" The common set of methods for date component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for date component.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32746,"byte_end":32795,"line_start":864,"line_end":864,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32932,"byte_end":32936,"line_start":867,"line_end":867,"column_start":8,"column_end":12},"name":"year","qualname":"::Datelike::year","value":"pub fn year(&Self) -> i32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).\n","sig":null,"attributes":[{"value":"/ Returns the year number in the [calendar date](./naive/struct.NaiveDate.html#calendar-date).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32828,"byte_end":32924,"line_start":866,"line_end":866,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33145,"byte_end":33152,"line_start":872,"line_end":872,"column_start":8,"column_end":15},"name":"year_ce","qualname":"::Datelike::year_ce","value":"pub fn year_ce(&Self) -> (bool, u32)","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the absolute year number starting from 1 with a boolean flag,\n which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).\n","sig":null,"attributes":[{"value":"/ Returns the absolute year number starting from 1 with a boolean flag,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32957,"byte_end":33030,"line_start":869,"line_end":869,"column_start":5,"column_end":78}},{"value":"/ which is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33035,"byte_end":33123,"line_start":870,"line_end":870,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33128,"byte_end":33137,"line_start":871,"line_end":871,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33447,"byte_end":33452,"line_start":884,"line_end":884,"column_start":8,"column_end":13},"name":"month","qualname":"::Datelike::month","value":"pub fn month(&Self) -> u32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the month number starting from 1.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33340,"byte_end":33385,"line_start":881,"line_end":881,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33390,"byte_end":33393,"line_start":882,"line_end":882,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 12.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33398,"byte_end":33439,"line_start":883,"line_end":883,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33580,"byte_end":33586,"line_start":889,"line_end":889,"column_start":8,"column_end":14},"name":"month0","qualname":"::Datelike::month0","value":"pub fn month0(&Self) -> u32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the month number starting from 0.","sig":null,"attributes":[{"value":"/ Returns the month number starting from 0.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33473,"byte_end":33518,"line_start":886,"line_end":886,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33523,"byte_end":33526,"line_start":887,"line_end":887,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 11.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33531,"byte_end":33572,"line_start":888,"line_end":888,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33757,"byte_end":33760,"line_start":894,"line_end":894,"column_start":8,"column_end":11},"name":"day","qualname":"::Datelike::day","value":"pub fn day(&Self) -> u32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33607,"byte_end":33652,"line_start":891,"line_end":891,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33657,"byte_end":33660,"line_start":892,"line_end":892,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 31. (The last day of month differs by months.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33665,"byte_end":33749,"line_start":893,"line_end":893,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33931,"byte_end":33935,"line_start":899,"line_end":899,"column_start":8,"column_end":12},"name":"day0","qualname":"::Datelike::day0","value":"pub fn day0(&Self) -> u32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the day of month starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of month starting from 0.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33781,"byte_end":33826,"line_start":896,"line_end":896,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33831,"byte_end":33834,"line_start":897,"line_end":897,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 30. (The last day of month differs by months.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33839,"byte_end":33923,"line_start":898,"line_end":898,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34104,"byte_end":34111,"line_start":904,"line_end":904,"column_start":8,"column_end":15},"name":"ordinal","qualname":"::Datelike::ordinal","value":"pub fn ordinal(&Self) -> u32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 1.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":33956,"byte_end":34000,"line_start":901,"line_end":901,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34005,"byte_end":34008,"line_start":902,"line_end":902,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 1 to 366. (The last day of year differs by years.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34013,"byte_end":34096,"line_start":903,"line_end":903,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34280,"byte_end":34288,"line_start":909,"line_end":909,"column_start":8,"column_end":16},"name":"ordinal0","qualname":"::Datelike::ordinal0","value":"pub fn ordinal0(&Self) -> u32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the day of year starting from 0.","sig":null,"attributes":[{"value":"/ Returns the day of year starting from 0.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34132,"byte_end":34176,"line_start":906,"line_end":906,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34181,"byte_end":34184,"line_start":907,"line_end":907,"column_start":5,"column_end":8}},{"value":"/ The return value ranges from 0 to 365. (The last day of year differs by years.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34189,"byte_end":34272,"line_start":908,"line_end":908,"column_start":5,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34345,"byte_end":34352,"line_start":912,"line_end":912,"column_start":8,"column_end":15},"name":"weekday","qualname":"::Datelike::weekday","value":"pub fn weekday(&Self) -> Weekday","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the day of week.\n","sig":null,"attributes":[{"value":"/ Returns the day of week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34309,"byte_end":34337,"line_start":911,"line_end":911,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34410,"byte_end":34418,"line_start":915,"line_end":915,"column_start":8,"column_end":16},"name":"iso_week","qualname":"::Datelike::iso_week","value":"pub fn iso_week(&Self) -> IsoWeek","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Returns the ISO week.\n","sig":null,"attributes":[{"value":"/ Returns the ISO week.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34377,"byte_end":34402,"line_start":914,"line_end":914,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34576,"byte_end":34585,"line_start":920,"line_end":920,"column_start":8,"column_end":17},"name":"with_year","qualname":"::Datelike::with_year","value":"pub fn with_year(&Self, i32) -> Option<Self>","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Makes a new value with the year number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the year number changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34443,"byte_end":34494,"line_start":917,"line_end":917,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34499,"byte_end":34502,"line_start":918,"line_end":918,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34507,"byte_end":34568,"line_start":919,"line_end":919,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1347},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34778,"byte_end":34788,"line_start":925,"line_end":925,"column_start":8,"column_end":18},"name":"with_month","qualname":"::Datelike::with_month","value":"pub fn with_month(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 1) changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34626,"byte_end":34696,"line_start":922,"line_end":922,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34701,"byte_end":34704,"line_start":923,"line_end":923,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34709,"byte_end":34770,"line_start":924,"line_end":924,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34982,"byte_end":34993,"line_start":930,"line_end":930,"column_start":8,"column_end":19},"name":"with_month0","qualname":"::Datelike::with_month0","value":"pub fn with_month0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Makes a new value with the month number (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the month number (starting from 0) changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34830,"byte_end":34900,"line_start":927,"line_end":927,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34905,"byte_end":34908,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":34913,"byte_end":34974,"line_start":929,"line_end":929,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35188,"byte_end":35196,"line_start":935,"line_end":935,"column_start":8,"column_end":16},"name":"with_day","qualname":"::Datelike::with_day","value":"pub fn with_day(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 1) changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35036,"byte_end":35106,"line_start":932,"line_end":932,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35111,"byte_end":35114,"line_start":933,"line_end":933,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35119,"byte_end":35180,"line_start":934,"line_end":934,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1350},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35388,"byte_end":35397,"line_start":940,"line_end":940,"column_start":8,"column_end":17},"name":"with_day0","qualname":"::Datelike::with_day0","value":"pub fn with_day0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Makes a new value with the day of month (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of month (starting from 0) changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35236,"byte_end":35306,"line_start":937,"line_end":937,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35311,"byte_end":35314,"line_start":938,"line_end":938,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35319,"byte_end":35380,"line_start":939,"line_end":939,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1351},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35589,"byte_end":35601,"line_start":945,"line_end":945,"column_start":8,"column_end":20},"name":"with_ordinal","qualname":"::Datelike::with_ordinal","value":"pub fn with_ordinal(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 1) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 1) changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35438,"byte_end":35507,"line_start":942,"line_end":942,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35512,"byte_end":35515,"line_start":943,"line_end":943,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35520,"byte_end":35581,"line_start":944,"line_end":944,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35796,"byte_end":35809,"line_start":950,"line_end":950,"column_start":8,"column_end":21},"name":"with_ordinal0","qualname":"::Datelike::with_ordinal0","value":"pub fn with_ordinal0(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Makes a new value with the day of year (starting from 0) changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the day of year (starting from 0) changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35645,"byte_end":35714,"line_start":947,"line_end":947,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35719,"byte_end":35722,"line_start":948,"line_end":948,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35727,"byte_end":35788,"line_start":949,"line_end":949,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1353},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36368,"byte_end":36384,"line_start":964,"line_end":964,"column_start":8,"column_end":24},"name":"num_days_from_ce","qualname":"::Datelike::num_days_from_ce","value":"pub fn num_days_from_ce(&Self) -> i32","parent":{"krate":0,"index":1335},"children":[],"decl_id":null,"docs":" Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","sig":null,"attributes":[{"value":"/ Counts the days in the proleptic Gregorian calendar, with January 1, Year 1 (CE) as day 1.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35854,"byte_end":35948,"line_start":952,"line_end":952,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35953,"byte_end":35956,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35961,"byte_end":35975,"line_start":954,"line_end":954,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35980,"byte_end":35983,"line_start":955,"line_end":955,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":35988,"byte_end":35995,"line_start":956,"line_end":956,"column_start":5,"column_end":12}},{"value":"/ use chrono::{NaiveDate, Datelike};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36000,"byte_end":36038,"line_start":957,"line_end":957,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36043,"byte_end":36046,"line_start":958,"line_end":958,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1970, 1, 1).num_days_from_ce(), 719_163);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36051,"byte_end":36127,"line_start":959,"line_end":959,"column_start":5,"column_end":81}},{"value":"/ assert_eq!(NaiveDate::from_ymd(2, 1, 1).num_days_from_ce(), 366);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36132,"byte_end":36201,"line_start":960,"line_end":960,"column_start":5,"column_end":74}},{"value":"/ assert_eq!(NaiveDate::from_ymd(1, 1, 1).num_days_from_ce(), 1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36206,"byte_end":36273,"line_start":961,"line_end":961,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(NaiveDate::from_ymd(0, 1, 1).num_days_from_ce(), -365);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36278,"byte_end":36348,"line_start":962,"line_end":962,"column_start":5,"column_end":75}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36353,"byte_end":36360,"line_start":963,"line_end":963,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":1354},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36919,"byte_end":36927,"line_start":980,"line_end":980,"column_start":11,"column_end":19},"name":"Timelike","qualname":"::Timelike","value":"Timelike: Sized","parent":null,"children":[{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357},{"krate":0,"index":1358},{"krate":0,"index":1359},{"krate":0,"index":1360},{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364}],"decl_id":null,"docs":" The common set of methods for time component.\n","sig":null,"attributes":[{"value":"/ The common set of methods for time component.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36859,"byte_end":36908,"line_start":979,"line_end":979,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1355},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36990,"byte_end":36994,"line_start":982,"line_end":982,"column_start":8,"column_end":12},"name":"hour","qualname":"::Timelike::hour","value":"pub fn hour(&Self) -> u32","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Returns the hour number from 0 to 23.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 0 to 23.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36941,"byte_end":36982,"line_start":981,"line_end":981,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1356},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37145,"byte_end":37151,"line_start":987,"line_end":987,"column_start":8,"column_end":14},"name":"hour12","qualname":"::Timelike::hour12","value":"pub fn hour12(&Self) -> (bool, u32)","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Returns the hour number from 1 to 12 with a boolean flag,\n which is false for AM and true for PM.\n","sig":null,"attributes":[{"value":"/ Returns the hour number from 1 to 12 with a boolean flag,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37015,"byte_end":37076,"line_start":984,"line_end":984,"column_start":5,"column_end":66}},{"value":"/ which is false for AM and true for PM.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37081,"byte_end":37123,"line_start":985,"line_end":985,"column_start":5,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37128,"byte_end":37137,"line_start":986,"line_end":986,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1357},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37395,"byte_end":37401,"line_start":997,"line_end":997,"column_start":8,"column_end":14},"name":"minute","qualname":"::Timelike::minute","value":"pub fn minute(&Self) -> u32","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Returns the minute number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the minute number from 0 to 59.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37344,"byte_end":37387,"line_start":996,"line_end":996,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1358},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37473,"byte_end":37479,"line_start":1000,"line_end":1000,"column_start":8,"column_end":14},"name":"second","qualname":"::Timelike::second","value":"pub fn second(&Self) -> u32","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Returns the second number from 0 to 59.\n","sig":null,"attributes":[{"value":"/ Returns the second number from 0 to 59.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37422,"byte_end":37465,"line_start":999,"line_end":999,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1359},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37722,"byte_end":37732,"line_start":1005,"line_end":1005,"column_start":8,"column_end":18},"name":"nanosecond","qualname":"::Timelike::nanosecond","value":"pub fn nanosecond(&Self) -> u32","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Returns the number of nanoseconds since the whole non-leap second.\n The range from 1,000,000,000 to 1,999,999,999 represents\n the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).\n","sig":null,"attributes":[{"value":"/ Returns the number of nanoseconds since the whole non-leap second.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37500,"byte_end":37570,"line_start":1002,"line_end":1002,"column_start":5,"column_end":75}},{"value":"/ The range from 1,000,000,000 to 1,999,999,999 represents","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37575,"byte_end":37635,"line_start":1003,"line_end":1003,"column_start":5,"column_end":65}},{"value":"/ the [leap second](./naive/struct.NaiveTime.html#leap-second-handling).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37640,"byte_end":37714,"line_start":1004,"line_end":1004,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":1360},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37886,"byte_end":37895,"line_start":1010,"line_end":1010,"column_start":8,"column_end":17},"name":"with_hour","qualname":"::Timelike::with_hour","value":"pub fn with_hour(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Makes a new value with the hour number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the hour number changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37753,"byte_end":37804,"line_start":1007,"line_end":1007,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37809,"byte_end":37812,"line_start":1008,"line_end":1008,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37817,"byte_end":37878,"line_start":1009,"line_end":1009,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38071,"byte_end":38082,"line_start":1015,"line_end":1015,"column_start":8,"column_end":19},"name":"with_minute","qualname":"::Timelike::with_minute","value":"pub fn with_minute(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Makes a new value with the minute number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the minute number changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37936,"byte_end":37989,"line_start":1012,"line_end":1012,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":37994,"byte_end":37997,"line_start":1013,"line_end":1013,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38002,"byte_end":38063,"line_start":1014,"line_end":1014,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38369,"byte_end":38380,"line_start":1022,"line_end":1022,"column_start":8,"column_end":19},"name":"with_second","qualname":"::Timelike::with_second","value":"pub fn with_second(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Makes a new value with the second number changed.","sig":null,"attributes":[{"value":"/ Makes a new value with the second number changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38122,"byte_end":38175,"line_start":1017,"line_end":1017,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38180,"byte_end":38183,"line_start":1018,"line_end":1018,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38188,"byte_end":38249,"line_start":1019,"line_end":1019,"column_start":5,"column_end":66}},{"value":"/ As with the [`second`](#tymethod.second) method,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38254,"byte_end":38306,"line_start":1020,"line_end":1020,"column_start":5,"column_end":57}},{"value":"/ the input range is restricted to 0 through 59.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38311,"byte_end":38361,"line_start":1021,"line_end":1021,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38713,"byte_end":38728,"line_start":1029,"line_end":1029,"column_start":8,"column_end":23},"name":"with_nanosecond","qualname":"::Timelike::with_nanosecond","value":"pub fn with_nanosecond(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Makes a new value with nanoseconds since the whole non-leap second changed.","sig":null,"attributes":[{"value":"/ Makes a new value with nanoseconds since the whole non-leap second changed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38420,"byte_end":38499,"line_start":1024,"line_end":1024,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38504,"byte_end":38507,"line_start":1025,"line_end":1025,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the resulting value would be invalid.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38512,"byte_end":38573,"line_start":1026,"line_end":1026,"column_start":5,"column_end":66}},{"value":"/ As with the [`nanosecond`](#tymethod.nanosecond) method,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38578,"byte_end":38638,"line_start":1027,"line_end":1027,"column_start":5,"column_end":65}},{"value":"/ the input range can exceed 1,000,000,000 for leap seconds.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38643,"byte_end":38705,"line_start":1028,"line_end":1028,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38857,"byte_end":38882,"line_start":1033,"line_end":1033,"column_start":8,"column_end":33},"name":"num_seconds_from_midnight","qualname":"::Timelike::num_seconds_from_midnight","value":"pub fn num_seconds_from_midnight(&Self) -> u32","parent":{"krate":0,"index":1354},"children":[],"decl_id":null,"docs":" Returns the number of non-leap seconds past the last midnight.\n","sig":null,"attributes":[{"value":"/ Returns the number of non-leap seconds past the last midnight.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38769,"byte_end":38835,"line_start":1031,"line_end":1031,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":38840,"byte_end":38849,"line_start":1032,"line_end":1032,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43122,"byte_end":43133,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44314,"byte_end":44325,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47541,"byte_end":47552,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62901,"byte_end":62912,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65469,"byte_end":65480,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66032,"byte_end":66043,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66112,"byte_end":66123,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66617,"byte_end":66628,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67377,"byte_end":67386,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":160},{"krate":0,"index":161}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67574,"byte_end":67583,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67772,"byte_end":67785,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":166},{"krate":0,"index":167}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67981,"byte_end":67994,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":169},{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68205,"byte_end":68213,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":173},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68425,"byte_end":68433,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":177},{"krate":0,"index":178}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72312,"byte_end":72317,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":199},{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":73158,"byte_end":73163,"line_start":107,"line_end":107,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77392,"byte_end":77395,"line_start":36,"line_end":36,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78404,"byte_end":78407,"line_start":60,"line_end":60,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":233},{"krate":0,"index":234},{"krate":0,"index":235},{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78891,"byte_end":78894,"line_start":76,"line_end":76,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78978,"byte_end":78981,"line_start":80,"line_end":80,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":79085,"byte_end":79088,"line_start":84,"line_end":84,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":85279,"byte_end":85288,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":86065,"byte_end":86074,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":94467,"byte_end":94469,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":96503,"byte_end":96505,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":313}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":97049,"byte_end":97052,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":98925,"byte_end":98928,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":328}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":116870,"byte_end":116879,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":372},{"krate":0,"index":373},{"krate":0,"index":374},{"krate":0,"index":375},{"krate":0,"index":376},{"krate":0,"index":377},{"krate":0,"index":378},{"krate":0,"index":379},{"krate":0,"index":380},{"krate":0,"index":381},{"krate":0,"index":382},{"krate":0,"index":383},{"krate":0,"index":384},{"krate":0,"index":385},{"krate":0,"index":387},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":397},{"krate":0,"index":398},{"krate":0,"index":399},{"krate":0,"index":400},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150569,"byte_end":150578,"line_start":969,"line_end":969,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":162910,"byte_end":162919,"line_start":1336,"line_end":1336,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":163138,"byte_end":163147,"line_start":1345,"line_end":1345,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":436}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164558,"byte_end":164567,"line_start":1378,"line_end":1378,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":438},{"krate":0,"index":439}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164786,"byte_end":164795,"line_start":1387,"line_end":1387,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":166051,"byte_end":166060,"line_start":1421,"line_end":1421,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":167049,"byte_end":167058,"line_start":1452,"line_end":1452,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168313,"byte_end":168322,"line_start":1487,"line_end":1487,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168912,"byte_end":168921,"line_start":1507,"line_end":1507,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197758,"byte_end":197765,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":200307,"byte_end":200314,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209171,"byte_end":209180,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":514},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233449,"byte_end":233458,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":518},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":522},{"krate":0,"index":523},{"krate":0,"index":524},{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":240672,"byte_end":240681,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243688,"byte_end":243697,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":531},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243878,"byte_end":243887,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":534}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246486,"byte_end":246495,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246676,"byte_end":246685,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":539}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":249220,"byte_end":249229,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":541},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":250613,"byte_end":250622,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":252471,"byte_end":252480,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":253240,"byte_end":253249,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":548},{"krate":0,"index":549}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274042,"byte_end":274055,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300483,"byte_end":300496,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":611},{"krate":0,"index":612},{"krate":0,"index":613},{"krate":0,"index":614},{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":311552,"byte_end":311565,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":635},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":639},{"krate":0,"index":641},{"krate":0,"index":643},{"krate":0,"index":645}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":317826,"byte_end":317839,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320454,"byte_end":320467,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":651},{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320698,"byte_end":320711,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":654}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323218,"byte_end":323231,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323462,"byte_end":323475,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":325413,"byte_end":325426,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":326630,"byte_end":326643,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":327735,"byte_end":327748,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":328486,"byte_end":328499,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367186,"byte_end":367190,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":708},{"krate":0,"index":709},{"krate":0,"index":710},{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":723},{"krate":0,"index":725},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":729},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":737}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375308,"byte_end":375312,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":748}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":376154,"byte_end":376158,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":763},{"krate":0,"index":765},{"krate":0,"index":767},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":773}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377849,"byte_end":377853,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377933,"byte_end":377937,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378042,"byte_end":378046,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":782}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378154,"byte_end":378158,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378202,"byte_end":378206,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378358,"byte_end":378362,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378485,"byte_end":378489,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378616,"byte_end":378620,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378844,"byte_end":378848,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379069,"byte_end":379073,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":805},{"krate":0,"index":806}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379258,"byte_end":379262,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379436,"byte_end":379440,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381978,"byte_end":381986,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":857},{"krate":0,"index":858},{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":875}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388106,"byte_end":388114,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388618,"byte_end":388626,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389036,"byte_end":389044,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389494,"byte_end":389502,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":883}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389948,"byte_end":389956,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":390392,"byte_end":390400,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":887}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391119,"byte_end":391127,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":897}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393409,"byte_end":393417,"line_start":373,"line_end":373,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":900},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":909},{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397929,"byte_end":397937,"line_start":482,"line_end":482,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":917},{"krate":0,"index":918},{"krate":0,"index":919},{"krate":0,"index":920},{"krate":0,"index":921},{"krate":0,"index":922},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":925},{"krate":0,"index":926},{"krate":0,"index":928},{"krate":0,"index":930},{"krate":0,"index":932},{"krate":0,"index":934},{"krate":0,"index":936},{"krate":0,"index":938}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":399650,"byte_end":399658,"line_start":529,"line_end":529,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":942},{"krate":0,"index":943},{"krate":0,"index":944},{"krate":0,"index":945},{"krate":0,"index":946},{"krate":0,"index":948},{"krate":0,"index":950},{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400634,"byte_end":400642,"line_start":557,"line_end":557,"column_start":29,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400722,"byte_end":400730,"line_start":558,"line_end":558,"column_start":36,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400839,"byte_end":400847,"line_start":560,"line_end":560,"column_start":64,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":961}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400967,"byte_end":400975,"line_start":564,"line_end":564,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401019,"byte_end":401027,"line_start":567,"line_end":567,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401191,"byte_end":401199,"line_start":573,"line_end":573,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401334,"byte_end":401342,"line_start":577,"line_end":577,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401473,"byte_end":401481,"line_start":581,"line_end":581,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401717,"byte_end":401725,"line_start":590,"line_end":590,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401962,"byte_end":401970,"line_start":599,"line_end":599,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":984},{"krate":0,"index":985}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402159,"byte_end":402167,"line_start":608,"line_end":608,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":988}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402341,"byte_end":402349,"line_start":614,"line_end":614,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":991}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402537,"byte_end":402545,"line_start":620,"line_end":620,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403731,"byte_end":403739,"line_start":647,"line_end":647,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403963,"byte_end":403971,"line_start":656,"line_end":656,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404216,"byte_end":404224,"line_start":665,"line_end":665,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1005}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404859,"byte_end":404867,"line_start":684,"line_end":684,"column_start":27,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1007}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":405066,"byte_end":405076,"line_start":691,"line_end":691,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470655,"byte_end":470670,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1038}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470760,"byte_end":470775,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470881,"byte_end":470896,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470922,"byte_end":470937,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478040,"byte_end":478050,"line_start":321,"line_end":321,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1054}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478671,"byte_end":478681,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1056}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478836,"byte_end":478846,"line_start":342,"line_end":342,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499669,"byte_end":499675,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500171,"byte_end":500177,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1149},{"krate":0,"index":1150},{"krate":0,"index":1151},{"krate":0,"index":1152},{"krate":0,"index":1153},{"krate":0,"index":1154},{"krate":0,"index":1155},{"krate":0,"index":1156},{"krate":0,"index":1157},{"krate":0,"index":1158},{"krate":0,"index":1159},{"krate":0,"index":1160},{"krate":0,"index":1161},{"krate":0,"index":1162},{"krate":0,"index":1163},{"krate":0,"index":1164},{"krate":0,"index":1165},{"krate":0,"index":1166},{"krate":0,"index":1167},{"krate":0,"index":1168},{"krate":0,"index":1169},{"krate":0,"index":1170},{"krate":0,"index":1171},{"krate":0,"index":1179},{"krate":0,"index":1180},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610954,"byte_end":610967,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":611286,"byte_end":611299,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1283},{"krate":0,"index":1284}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493079,"byte_end":493092,"line_start":635,"line_end":635,"column_start":60,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1295},{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493928,"byte_end":493941,"line_start":651,"line_end":651,"column_start":77,"column_end":90},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":494830,"byte_end":494837,"line_start":683,"line_end":683,"column_start":18,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1304},{"krate":0,"index":1305}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":627077,"byte_end":627078,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1317},{"krate":0,"index":1318}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24149,"byte_end":24156,"line_start":585,"line_end":585,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28147,"byte_end":28154,"line_start":695,"line_end":695,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28802,"byte_end":28809,"line_start":712,"line_end":712,"column_start":36,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1330},{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":29748,"byte_end":29765,"line_start":750,"line_end":750,"column_start":21,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1334}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":20633,"byte_end":20639,"line_start":472,"line_end":472,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":60}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":21805,"byte_end":21811,"line_start":510,"line_end":510,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":1012}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":492385,"byte_end":492393,"line_start":617,"line_end":617,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":1267}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":43122,"byte_end":43133,"line_start":41,"line_end":41,"column_start":9,"column_end":20},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":44314,"byte_end":44325,"line_start":76,"line_end":76,"column_start":20,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":47541,"byte_end":47552,"line_start":169,"line_end":169,"column_start":21,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":1365},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48014,"byte_end":48019,"line_start":183,"line_end":183,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48022,"byte_end":48027,"line_start":183,"line_end":183,"column_start":27,"column_end":32},"kind":"SuperTrait","from":{"krate":2,"index":1770},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48035,"byte_end":48040,"line_start":183,"line_end":183,"column_start":40,"column_end":45},"kind":"SuperTrait","from":{"krate":2,"index":6953},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48330,"byte_end":48335,"line_start":192,"line_end":192,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":95}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/mod.rs","byte_start":48338,"byte_end":48343,"line_start":192,"line_end":192,"column_start":29,"column_end":34},"kind":"SuperTrait","from":{"krate":2,"index":1770},"to":{"krate":0,"index":95}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":62901,"byte_end":62912,"line_start":27,"line_end":27,"column_start":6,"column_end":17},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":65469,"byte_end":65480,"line_start":101,"line_end":101,"column_start":19,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1399},"to":{"krate":0,"index":95}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66032,"byte_end":66043,"line_start":117,"line_end":117,"column_start":17,"column_end":28},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1399},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66112,"byte_end":66123,"line_start":121,"line_end":121,"column_start":21,"column_end":32},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":66617,"byte_end":66628,"line_start":135,"line_end":135,"column_start":23,"column_end":34},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1399},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67377,"byte_end":67386,"line_start":153,"line_end":153,"column_start":27,"column_end":36},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67574,"byte_end":67583,"line_start":162,"line_end":162,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67772,"byte_end":67785,"line_start":171,"line_end":171,"column_start":27,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":67981,"byte_end":67994,"line_start":180,"line_end":180,"column_start":27,"column_end":40},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68205,"byte_end":68213,"line_start":189,"line_end":189,"column_start":41,"column_end":49},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/fixed.rs","byte_start":68425,"byte_end":68433,"line_start":198,"line_end":198,"column_start":41,"column_end":49},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":72312,"byte_end":72317,"line_start":83,"line_end":83,"column_start":6,"column_end":11},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":1414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/local.rs","byte_start":73158,"byte_end":73163,"line_start":107,"line_end":107,"column_start":19,"column_end":24},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1414},"to":{"krate":0,"index":95}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":77392,"byte_end":77395,"line_start":36,"line_end":36,"column_start":6,"column_end":9},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":1421},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78404,"byte_end":78407,"line_start":60,"line_end":60,"column_start":19,"column_end":22},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":1421},"to":{"krate":0,"index":95}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78891,"byte_end":78894,"line_start":76,"line_end":76,"column_start":17,"column_end":20},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":1421},"to":{"krate":0,"index":93}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":78978,"byte_end":78981,"line_start":80,"line_end":80,"column_start":21,"column_end":24},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":1421},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/offset/utc.rs","byte_start":79085,"byte_end":79088,"line_start":84,"line_end":84,"column_start":23,"column_end":26},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":1421},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":85279,"byte_end":85288,"line_start":110,"line_end":110,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":1432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":86065,"byte_end":86074,"line_start":143,"line_end":143,"column_start":21,"column_end":30},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1432},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":94467,"byte_end":94469,"line_start":280,"line_end":280,"column_start":6,"column_end":8},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1445},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":96503,"byte_end":96505,"line_start":365,"line_end":365,"column_start":21,"column_end":23},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1445},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":97049,"byte_end":97052,"line_start":381,"line_end":381,"column_start":6,"column_end":9},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1461},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/internals.rs","byte_start":98925,"byte_end":98928,"line_start":462,"line_end":462,"column_start":21,"column_end":24},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1461},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":116870,"byte_end":116879,"line_start":129,"line_end":129,"column_start":6,"column_end":15},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":1477},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":150569,"byte_end":150578,"line_start":969,"line_end":969,"column_start":19,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1477},"to":{"krate":0,"index":1335}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":162910,"byte_end":162919,"line_start":1336,"line_end":1336,"column_start":27,"column_end":36},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":163138,"byte_end":163147,"line_start":1345,"line_end":1345,"column_start":33,"column_end":42},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":2177}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164558,"byte_end":164567,"line_start":1378,"line_end":1378,"column_start":27,"column_end":36},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":164786,"byte_end":164795,"line_start":1387,"line_end":1387,"column_start":33,"column_end":42},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":166051,"byte_end":166060,"line_start":1421,"line_end":1421,"column_start":25,"column_end":34},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":167049,"byte_end":167058,"line_start":1452,"line_end":1452,"column_start":21,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168313,"byte_end":168322,"line_start":1487,"line_end":1487,"column_start":23,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/date.rs","byte_start":168912,"byte_end":168921,"line_start":1507,"line_end":1507,"column_start":23,"column_end":32},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":1477},"to":{"krate":2,"index":9021}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":197758,"byte_end":197765,"line_start":46,"line_end":46,"column_start":6,"column_end":13},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1500},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/isoweek.rs","byte_start":200307,"byte_end":200314,"line_start":128,"line_end":128,"column_start":21,"column_end":28},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1500},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":209171,"byte_end":209180,"line_start":184,"line_end":184,"column_start":6,"column_end":15},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1520},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":233449,"byte_end":233458,"line_start":785,"line_end":785,"column_start":19,"column_end":28},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1520},"to":{"krate":0,"index":1354}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":240672,"byte_end":240681,"line_start":991,"line_end":991,"column_start":21,"column_end":30},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":7141}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243688,"byte_end":243697,"line_start":1056,"line_end":1056,"column_start":27,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":243878,"byte_end":243887,"line_start":1065,"line_end":1065,"column_start":33,"column_end":42},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2177}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246486,"byte_end":246495,"line_start":1126,"line_end":1126,"column_start":27,"column_end":36},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":246676,"byte_end":246685,"line_start":1135,"line_end":1135,"column_start":33,"column_end":42},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":249220,"byte_end":249229,"line_start":1193,"line_end":1193,"column_start":25,"column_end":34},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":250613,"byte_end":250622,"line_start":1230,"line_end":1230,"column_start":21,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":252471,"byte_end":252480,"line_start":1280,"line_end":1280,"column_start":23,"column_end":32},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/time.rs","byte_start":253240,"byte_end":253249,"line_start":1303,"line_end":1303,"column_start":23,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":1520},"to":{"krate":2,"index":9021}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":274042,"byte_end":274055,"line_start":60,"line_end":60,"column_start":6,"column_end":19},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1545},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":300483,"byte_end":300496,"line_start":698,"line_end":698,"column_start":19,"column_end":32},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1545},"to":{"krate":0,"index":1335}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":311552,"byte_end":311565,"line_start":1016,"line_end":1016,"column_start":19,"column_end":32},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1545},"to":{"krate":0,"index":1354}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":317826,"byte_end":317839,"line_start":1189,"line_end":1189,"column_start":21,"column_end":34},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":7141}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320454,"byte_end":320467,"line_start":1251,"line_end":1251,"column_start":27,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":320698,"byte_end":320711,"line_start":1260,"line_end":1260,"column_start":33,"column_end":46},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":2177}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323218,"byte_end":323231,"line_start":1321,"line_end":1321,"column_start":27,"column_end":40},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":323462,"byte_end":323475,"line_start":1330,"line_end":1330,"column_start":33,"column_end":46},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":2181}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":325413,"byte_end":325426,"line_start":1383,"line_end":1383,"column_start":29,"column_end":42},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":326630,"byte_end":326643,"line_start":1419,"line_end":1419,"column_start":21,"column_end":34},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":327735,"byte_end":327748,"line_start":1450,"line_end":1450,"column_start":23,"column_end":36},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/naive/datetime.rs","byte_start":328486,"byte_end":328499,"line_start":1472,"line_end":1472,"column_start":23,"column_end":36},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1545},"to":{"krate":2,"index":9021}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":367186,"byte_end":367190,"line_start":54,"line_end":54,"column_start":20,"column_end":24},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":1570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":375308,"byte_end":375312,"line_start":258,"line_end":258,"column_start":20,"column_end":24},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1570},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":376154,"byte_end":376158,"line_start":277,"line_end":277,"column_start":33,"column_end":37},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1570},"to":{"krate":0,"index":1335}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377849,"byte_end":377853,"line_start":325,"line_end":325,"column_start":29,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":2091}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":377933,"byte_end":377937,"line_start":326,"line_end":326,"column_start":36,"column_end":40},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":2081}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378042,"byte_end":378046,"line_start":328,"line_end":328,"column_start":60,"column_end":64},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":1798}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378154,"byte_end":378158,"line_start":332,"line_end":332,"column_start":27,"column_end":31},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":1803}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378202,"byte_end":378206,"line_start":335,"line_end":335,"column_start":35,"column_end":39},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":1841}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378358,"byte_end":378362,"line_start":341,"line_end":341,"column_start":28,"column_end":32},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":1830}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378485,"byte_end":378489,"line_start":345,"line_end":345,"column_start":35,"column_end":39},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":7141}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378616,"byte_end":378620,"line_start":349,"line_end":349,"column_start":41,"column_end":45},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":378844,"byte_end":378848,"line_start":358,"line_end":358,"column_start":41,"column_end":45},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379069,"byte_end":379073,"line_start":367,"line_end":367,"column_start":38,"column_end":42},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379258,"byte_end":379262,"line_start":376,"line_end":376,"column_start":35,"column_end":39},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/date.rs","byte_start":379436,"byte_end":379440,"line_start":382,"line_end":382,"column_start":37,"column_end":41},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":1570},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":381978,"byte_end":381986,"line_start":72,"line_end":72,"column_start":20,"column_end":28},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":1601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388106,"byte_end":388114,"line_start":250,"line_end":250,"column_start":30,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":388618,"byte_end":388626,"line_start":262,"line_end":262,"column_start":30,"column_end":38},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389036,"byte_end":389044,"line_start":272,"line_end":272,"column_start":38,"column_end":46},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389494,"byte_end":389502,"line_start":284,"line_end":284,"column_start":38,"column_end":46},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":389948,"byte_end":389956,"line_start":296,"line_end":296,"column_start":32,"column_end":40},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":390392,"byte_end":390400,"line_start":308,"line_end":308,"column_start":32,"column_end":40},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":391119,"byte_end":391127,"line_start":324,"line_end":324,"column_start":6,"column_end":14},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":393409,"byte_end":393417,"line_start":373,"line_end":373,"column_start":20,"column_end":28},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1601},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":397929,"byte_end":397937,"line_start":482,"line_end":482,"column_start":33,"column_end":41},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1601},"to":{"krate":0,"index":1335}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":399650,"byte_end":399658,"line_start":529,"line_end":529,"column_start":33,"column_end":41},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1601},"to":{"krate":0,"index":1354}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400634,"byte_end":400642,"line_start":557,"line_end":557,"column_start":29,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":2091}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400722,"byte_end":400730,"line_start":558,"line_end":558,"column_start":36,"column_end":44},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":2081}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400839,"byte_end":400847,"line_start":560,"line_end":560,"column_start":64,"column_end":72},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1798}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":400967,"byte_end":400975,"line_start":564,"line_end":564,"column_start":27,"column_end":35},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1803}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401019,"byte_end":401027,"line_start":567,"line_end":567,"column_start":35,"column_end":43},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1841}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401191,"byte_end":401199,"line_start":573,"line_end":573,"column_start":28,"column_end":36},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1830}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401334,"byte_end":401342,"line_start":577,"line_end":577,"column_start":35,"column_end":43},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":7141}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401473,"byte_end":401481,"line_start":581,"line_end":581,"column_start":41,"column_end":49},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":2146}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401717,"byte_end":401725,"line_start":590,"line_end":590,"column_start":41,"column_end":49},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":401962,"byte_end":401970,"line_start":599,"line_end":599,"column_start":42,"column_end":50},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":2151}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402159,"byte_end":402167,"line_start":608,"line_end":608,"column_start":35,"column_end":43},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402341,"byte_end":402349,"line_start":614,"line_end":614,"column_start":37,"column_end":45},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":402537,"byte_end":402545,"line_start":620,"line_end":620,"column_start":23,"column_end":31},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":9021}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403731,"byte_end":403739,"line_start":647,"line_end":647,"column_start":23,"column_end":31},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":9021}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":403963,"byte_end":403971,"line_start":656,"line_end":656,"column_start":23,"column_end":31},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":9021}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404216,"byte_end":404224,"line_start":665,"line_end":665,"column_start":27,"column_end":35},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":404859,"byte_end":404867,"line_start":684,"line_end":684,"column_start":27,"column_end":35},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1601},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/datetime.rs","byte_start":405066,"byte_end":405076,"line_start":691,"line_end":691,"column_start":43,"column_end":53},"kind":{"Impl":{"id":105}},"from":{"krate":1,"index":8335},"to":{"krate":2,"index":1997}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470655,"byte_end":470670,"line_start":132,"line_end":132,"column_start":16,"column_end":31},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":1770}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470760,"byte_end":470775,"line_start":138,"line_end":138,"column_start":20,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":1798}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470881,"byte_end":470896,"line_start":144,"line_end":144,"column_start":13,"column_end":28},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":1803}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":470922,"byte_end":470937,"line_start":147,"line_end":147,"column_start":21,"column_end":36},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1035},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478040,"byte_end":478050,"line_start":321,"line_end":321,"column_start":6,"column_end":16},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1811},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478671,"byte_end":478681,"line_start":335,"line_end":335,"column_start":23,"column_end":33},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1811},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":478836,"byte_end":478846,"line_start":342,"line_end":342,"column_start":16,"column_end":26},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1811},"to":{"krate":1,"index":1750}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":499669,"byte_end":499675,"line_start":125,"line_end":125,"column_start":18,"column_end":24},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1852},"to":{"krate":2,"index":2069}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/parsed.rs","byte_start":500171,"byte_end":500177,"line_start":138,"line_end":138,"column_start":6,"column_end":12},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1852},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":610954,"byte_end":610967,"line_start":175,"line_end":175,"column_start":10,"column_end":23},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/strftime.rs","byte_start":611286,"byte_end":611299,"line_start":185,"line_end":185,"column_start":23,"column_end":36},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1883},"to":{"krate":2,"index":5625}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493079,"byte_end":493092,"line_start":635,"line_end":635,"column_start":60,"column_end":73},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":493928,"byte_end":493941,"line_start":651,"line_end":651,"column_start":77,"column_end":90},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1902},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/format/mod.rs","byte_start":494830,"byte_end":494837,"line_start":683,"line_end":683,"column_start":18,"column_end":25},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1911},"to":{"krate":2,"index":9021}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/round.rs","byte_start":627077,"byte_end":627078,"line_start":41,"line_end":41,"column_start":25,"column_end":26},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1316},"to":{"krate":0,"index":1312}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":24149,"byte_end":24156,"line_start":585,"line_end":585,"column_start":6,"column_end":13},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1911},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28147,"byte_end":28154,"line_start":695,"line_end":695,"column_start":23,"column_end":30},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1911},"to":{"krate":2,"index":6958}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":28802,"byte_end":28809,"line_start":712,"line_end":712,"column_start":36,"column_end":43},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1911},"to":{"krate":19,"index":143}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":29748,"byte_end":29765,"line_start":750,"line_end":750,"column_start":21,"column_end":38},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1947},"to":{"krate":2,"index":6953}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":32816,"byte_end":32821,"line_start":865,"line_end":865,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":1335}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/chrono-0.4.10/src/lib.rs","byte_start":36929,"byte_end":36934,"line_start":980,"line_end":980,"column_start":21,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2086},"to":{"krate":0,"index":1354}}]}