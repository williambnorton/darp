{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11","program":"/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","num_traits","/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=12190786947b55b4","-C","extra-filename=-12190786947b55b4","--out-dir","/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps","-L","dependency=/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps","--cap-lints","allow","--cfg","has_i128","--error-format=json","--sysroot","/Users/wbn/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/wbn/Dropbox/Development/darp_rust/tokio_udp_rate_test-master/server/target/rls/debug/deps/libnum_traits-12190786947b55b4.rmeta"},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[5635461309796912735,8626325855074278394]},"crate_root":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src","external_crates":[{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[16348493018826829365,4805211970644213659]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[8279628881989909837,14733107812838978533]}},{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[17646096667663791084,12272231044852301253]}}],"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":472,"byte_end":19148,"line_start":11,"line_end":569,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":85},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1043,"byte_end":1050,"line_start":32,"line_end":32,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1831},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1136,"byte_end":1146,"line_start":35,"line_end":35,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":165},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1255,"byte_end":1259,"line_start":37,"line_end":37,"column_start":16,"column_end":20},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1261,"byte_end":1272,"line_start":37,"line_end":37,"column_start":22,"column_end":33},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":143},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1274,"byte_end":1287,"line_start":37,"line_end":37,"column_start":35,"column_end":48},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1289,"byte_end":1296,"line_start":37,"line_end":37,"column_start":50,"column_end":57},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":118},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1298,"byte_end":1309,"line_start":37,"line_end":37,"column_start":59,"column_end":70},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":266},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1333,"byte_end":1336,"line_start":38,"line_end":38,"column_start":22,"column_end":25},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1338,"byte_end":1342,"line_start":38,"line_end":38,"column_start":27,"column_end":31},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":255},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1344,"byte_end":1347,"line_start":38,"line_end":38,"column_start":33,"column_end":36},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":245},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1349,"byte_end":1353,"line_start":38,"line_end":38,"column_start":38,"column_end":42},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":282},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1369,"byte_end":1376,"line_start":39,"line_end":39,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1406,"byte_end":1416,"line_start":41,"line_end":41,"column_start":5,"column_end":15},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":317},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1418,"byte_end":1428,"line_start":41,"line_end":41,"column_start":17,"column_end":27},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":315},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1430,"byte_end":1440,"line_start":41,"line_end":41,"column_start":29,"column_end":39},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":322},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1442,"byte_end":1452,"line_start":41,"line_end":41,"column_start":41,"column_end":51},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":319},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1454,"byte_end":1464,"line_start":41,"line_end":41,"column_start":53,"column_end":63},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1466,"byte_end":1476,"line_start":41,"line_end":41,"column_start":65,"column_end":75},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":327},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1478,"byte_end":1488,"line_start":41,"line_end":41,"column_start":77,"column_end":87},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":313},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1490,"byte_end":1500,"line_start":41,"line_end":41,"column_start":89,"column_end":99},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":330},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1523,"byte_end":1526,"line_start":43,"line_end":43,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":348},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1551,"byte_end":1557,"line_start":44,"line_end":44,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":353},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1559,"byte_end":1571,"line_start":44,"line_end":44,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1599,"byte_end":1609,"line_start":45,"line_end":45,"column_start":26,"column_end":36},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":373},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1635,"byte_end":1646,"line_start":46,"line_end":46,"column_start":25,"column_end":36},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":377},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1648,"byte_end":1659,"line_start":46,"line_end":46,"column_start":38,"column_end":49},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":380},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1661,"byte_end":1672,"line_start":46,"line_end":46,"column_start":51,"column_end":62},"alias_span":null,"name":"WrappingShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":382},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1674,"byte_end":1685,"line_start":46,"line_end":46,"column_start":64,"column_end":75},"alias_span":null,"name":"WrappingShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":375},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1687,"byte_end":1698,"line_start":46,"line_end":46,"column_start":77,"column_end":88},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":412},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1715,"byte_end":1726,"line_start":47,"line_end":47,"column_start":15,"column_end":26},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":410},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1728,"byte_end":1731,"line_start":47,"line_end":47,"column_start":28,"column_end":31},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":405},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1733,"byte_end":1736,"line_start":47,"line_end":47,"column_start":33,"column_end":36},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":435},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1754,"byte_end":1757,"line_start":48,"line_end":48,"column_start":16,"column_end":19},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":437},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1759,"byte_end":1766,"line_start":48,"line_end":48,"column_start":21,"column_end":28},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":439},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1768,"byte_end":1774,"line_start":48,"line_end":48,"column_start":30,"column_end":36},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":420},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1776,"byte_end":1782,"line_start":48,"line_end":48,"column_start":38,"column_end":44},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1784,"byte_end":1792,"line_start":48,"line_end":48,"column_start":46,"column_end":54},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":472,"byte_end":19148,"line_start":11,"line_end":569,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":3848},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":65},{"krate":0,"index":96},{"krate":0,"index":180},{"krate":0,"index":240},{"krate":0,"index":268},{"krate":0,"index":300},{"krate":0,"index":399},{"krate":0,"index":415},{"krate":0,"index":445},{"krate":0,"index":448},{"krate":0,"index":451},{"krate":0,"index":455},{"krate":0,"index":457},{"krate":0,"index":460},{"krate":0,"index":463},{"krate":0,"index":467},{"krate":0,"index":469},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":3787},{"krate":0,"index":3790},{"krate":0,"index":3793},{"krate":0,"index":3796},{"krate":0,"index":3799},{"krate":0,"index":3802},{"krate":0,"index":3805},{"krate":0,"index":3808},{"krate":0,"index":3811},{"krate":0,"index":3814},{"krate":0,"index":3817},{"krate":0,"index":3820},{"krate":0,"index":481},{"krate":0,"index":3823},{"krate":0,"index":3828},{"krate":0,"index":3830},{"krate":0,"index":3832},{"krate":0,"index":485},{"krate":0,"index":3834},{"krate":0,"index":3840},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"/ Numeric traits for generic mathematics","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":472,"byte_end":514,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":515,"byte_end":518,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ ## Compatibility","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":519,"byte_end":539,"line_start":13,"line_end":13,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":540,"byte_end":543,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ The `num-traits` crate is tested for rustc 1.8 and greater.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":544,"byte_end":607,"line_start":15,"line_end":15,"column_start":1,"column_end":64}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":667,"byte_end":700,"line_start":18,"line_end":18,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":701,"byte_end":711,"line_start":19,"line_end":19,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":65},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":3944},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":494},{"krate":0,"index":497},{"krate":0,"index":500},{"krate":0,"index":503},{"krate":0,"index":506},{"krate":0,"index":509},{"krate":0,"index":512},{"krate":0,"index":515},{"krate":0,"index":518},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":527},{"krate":0,"index":89},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":556},{"krate":0,"index":578},{"krate":0,"index":599},{"krate":0,"index":619},{"krate":0,"index":638},{"krate":0,"index":656},{"krate":0,"index":673},{"krate":0,"index":689},{"krate":0,"index":704},{"krate":0,"index":718},{"krate":0,"index":731},{"krate":0,"index":743},{"krate":0,"index":754},{"krate":0,"index":764},{"krate":0,"index":773},{"krate":0,"index":781},{"krate":0,"index":788},{"krate":0,"index":794},{"krate":0,"index":799},{"krate":0,"index":803},{"krate":0,"index":806}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":85},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":20629,"byte_end":20636,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":86},{"krate":0,"index":87}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[{"value":"/ Numbers which have upper and lower bounds","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":20573,"byte_end":20618,"line_start":8,"line_end":8,"column_start":1,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":20772,"byte_end":20781,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the smallest finite number this type can represent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":20702,"byte_end":20764,"line_start":11,"line_end":11,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":20866,"byte_end":20875,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":85},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[{"value":"/ returns the largest finite number this type can represent","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":20797,"byte_end":20858,"line_start":13,"line_end":13,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":96},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":3976},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":809},{"krate":0,"index":824},{"krate":0,"index":839},{"krate":0,"index":854},{"krate":0,"index":869},{"krate":0,"index":884},{"krate":0,"index":899},{"krate":0,"index":914},{"krate":0,"index":929},{"krate":0,"index":944},{"krate":0,"index":959},{"krate":0,"index":974},{"krate":0,"index":989},{"krate":0,"index":1040},{"krate":0,"index":143},{"krate":0,"index":1091},{"krate":0,"index":1106},{"krate":0,"index":1121},{"krate":0,"index":1136},{"krate":0,"index":1151},{"krate":0,"index":1166},{"krate":0,"index":1181},{"krate":0,"index":1196},{"krate":0,"index":1211},{"krate":0,"index":1226},{"krate":0,"index":1241},{"krate":0,"index":1256},{"krate":0,"index":1271},{"krate":0,"index":1286},{"krate":0,"index":160},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":168},{"krate":0,"index":1329},{"krate":0,"index":1332},{"krate":0,"index":1335},{"krate":0,"index":1338},{"krate":0,"index":1341},{"krate":0,"index":1344},{"krate":0,"index":1347},{"krate":0,"index":1350},{"krate":0,"index":1353},{"krate":0,"index":1356},{"krate":0,"index":1359},{"krate":0,"index":1362},{"krate":0,"index":1365},{"krate":0,"index":1368},{"krate":0,"index":172},{"krate":0,"index":176},{"krate":0,"index":1371},{"krate":0,"index":1373},{"krate":0,"index":1375},{"krate":0,"index":1377},{"krate":0,"index":1379},{"krate":0,"index":1381},{"krate":0,"index":1383},{"krate":0,"index":1385},{"krate":0,"index":1387},{"krate":0,"index":1389},{"krate":0,"index":1391},{"krate":0,"index":1393},{"krate":0,"index":1395},{"krate":0,"index":1397},{"krate":0,"index":1399},{"krate":0,"index":1401},{"krate":0,"index":1403},{"krate":0,"index":1405},{"krate":0,"index":1407},{"krate":0,"index":1409},{"krate":0,"index":1411},{"krate":0,"index":1413},{"krate":0,"index":1415},{"krate":0,"index":1417},{"krate":0,"index":1419},{"krate":0,"index":1421},{"krate":0,"index":1423},{"krate":0,"index":1425},{"krate":0,"index":1427},{"krate":0,"index":1429},{"krate":0,"index":1431},{"krate":0,"index":1433},{"krate":0,"index":1435},{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1445},{"krate":0,"index":1447},{"krate":0,"index":1449},{"krate":0,"index":1451},{"krate":0,"index":1453},{"krate":0,"index":1455},{"krate":0,"index":1457},{"krate":0,"index":1459},{"krate":0,"index":1461},{"krate":0,"index":1463},{"krate":0,"index":1465},{"krate":0,"index":1467},{"krate":0,"index":1469},{"krate":0,"index":1471},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1477},{"krate":0,"index":1479},{"krate":0,"index":1481},{"krate":0,"index":1483},{"krate":0,"index":1485},{"krate":0,"index":1487},{"krate":0,"index":1489},{"krate":0,"index":1491},{"krate":0,"index":1493},{"krate":0,"index":1495},{"krate":0,"index":1497},{"krate":0,"index":1499},{"krate":0,"index":1501},{"krate":0,"index":1503},{"krate":0,"index":1505},{"krate":0,"index":1507},{"krate":0,"index":1509},{"krate":0,"index":1511},{"krate":0,"index":1513},{"krate":0,"index":1515},{"krate":0,"index":1517},{"krate":0,"index":1519},{"krate":0,"index":1521},{"krate":0,"index":1523},{"krate":0,"index":1525},{"krate":0,"index":1527},{"krate":0,"index":1529},{"krate":0,"index":1531},{"krate":0,"index":1533},{"krate":0,"index":1535},{"krate":0,"index":1537},{"krate":0,"index":1539},{"krate":0,"index":1541},{"krate":0,"index":1543},{"krate":0,"index":1545},{"krate":0,"index":1547},{"krate":0,"index":1549},{"krate":0,"index":1551},{"krate":0,"index":1553},{"krate":0,"index":1555},{"krate":0,"index":1557},{"krate":0,"index":1559},{"krate":0,"index":1561},{"krate":0,"index":1563},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1569},{"krate":0,"index":1571},{"krate":0,"index":1573},{"krate":0,"index":1575},{"krate":0,"index":1577},{"krate":0,"index":1579},{"krate":0,"index":1581},{"krate":0,"index":1583},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1589},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1595},{"krate":0,"index":1597},{"krate":0,"index":1599},{"krate":0,"index":1601},{"krate":0,"index":1603},{"krate":0,"index":1605},{"krate":0,"index":1607},{"krate":0,"index":1609},{"krate":0,"index":1611},{"krate":0,"index":1613},{"krate":0,"index":1615},{"krate":0,"index":1617},{"krate":0,"index":1619},{"krate":0,"index":1621},{"krate":0,"index":1623},{"krate":0,"index":1625},{"krate":0,"index":1627},{"krate":0,"index":1629},{"krate":0,"index":1631},{"krate":0,"index":1633},{"krate":0,"index":1635},{"krate":0,"index":1637},{"krate":0,"index":1639},{"krate":0,"index":1641},{"krate":0,"index":1643},{"krate":0,"index":1645},{"krate":0,"index":1647},{"krate":0,"index":1649},{"krate":0,"index":1651},{"krate":0,"index":1653},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1659},{"krate":0,"index":1661},{"krate":0,"index":1663},{"krate":0,"index":1665},{"krate":0,"index":1667},{"krate":0,"index":1669},{"krate":0,"index":1671},{"krate":0,"index":1673},{"krate":0,"index":1675},{"krate":0,"index":1677},{"krate":0,"index":1679},{"krate":0,"index":1681},{"krate":0,"index":1683},{"krate":0,"index":1685},{"krate":0,"index":1687},{"krate":0,"index":1689},{"krate":0,"index":1691},{"krate":0,"index":1693},{"krate":0,"index":1695},{"krate":0,"index":1697},{"krate":0,"index":1699},{"krate":0,"index":1701},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1707},{"krate":0,"index":1709},{"krate":0,"index":1711},{"krate":0,"index":1713},{"krate":0,"index":1715},{"krate":0,"index":1717},{"krate":0,"index":1719},{"krate":0,"index":1721},{"krate":0,"index":1723},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1729},{"krate":0,"index":1731},{"krate":0,"index":1733},{"krate":0,"index":1735},{"krate":0,"index":1737},{"krate":0,"index":1739},{"krate":0,"index":1741},{"krate":0,"index":1743},{"krate":0,"index":1745},{"krate":0,"index":1747},{"krate":0,"index":1749},{"krate":0,"index":1751},{"krate":0,"index":1753},{"krate":0,"index":1755},{"krate":0,"index":1757},{"krate":0,"index":1759},{"krate":0,"index":1761},{"krate":0,"index":1763},{"krate":0,"index":1765},{"krate":0,"index":1767},{"krate":0,"index":1769},{"krate":0,"index":1771},{"krate":0,"index":1773},{"krate":0,"index":1775},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781},{"krate":0,"index":1783},{"krate":0,"index":1785},{"krate":0,"index":1787},{"krate":0,"index":1789},{"krate":0,"index":1791},{"krate":0,"index":1793},{"krate":0,"index":1795},{"krate":0,"index":1797},{"krate":0,"index":1799},{"krate":0,"index":1801},{"krate":0,"index":1803},{"krate":0,"index":1805},{"krate":0,"index":1807},{"krate":0,"index":1809},{"krate":0,"index":1811},{"krate":0,"index":1813}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":118},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":23970,"byte_end":23981,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[{"value":"/ A generic trait for converting a value to a number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":23904,"byte_end":23959,"line_start":11,"line_end":11,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24140,"byte_end":24148,"line_start":16,"line_end":16,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"pub fn to_isize(&Self) -> Option<isize>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`. If the value cannot be\n represented by an `isize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `isize`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":23988,"byte_end":24058,"line_start":13,"line_end":13,"column_start":5,"column_end":75}},{"value":"/ represented by an `isize`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24063,"byte_end":24118,"line_start":14,"line_end":14,"column_start":5,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24123,"byte_end":24132,"line_start":15,"line_end":15,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24395,"byte_end":24400,"line_start":23,"line_end":23,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"pub fn to_i8(&Self) -> Option<i8>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`. If the value cannot be\n represented by an `i8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i8`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24249,"byte_end":24316,"line_start":20,"line_end":20,"column_start":5,"column_end":72}},{"value":"/ represented by an `i8`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24321,"byte_end":24373,"line_start":21,"line_end":21,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24378,"byte_end":24387,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24643,"byte_end":24649,"line_start":30,"line_end":30,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"pub fn to_i16(&Self) -> Option<i16>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`. If the value cannot be\n represented by an `i16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i16`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24495,"byte_end":24563,"line_start":27,"line_end":27,"column_start":5,"column_end":73}},{"value":"/ represented by an `i16`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24568,"byte_end":24621,"line_start":28,"line_end":28,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24626,"byte_end":24635,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24894,"byte_end":24900,"line_start":37,"line_end":37,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"pub fn to_i32(&Self) -> Option<i32>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`. If the value cannot be\n represented by an `i32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i32`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24746,"byte_end":24814,"line_start":34,"line_end":34,"column_start":5,"column_end":73}},{"value":"/ represented by an `i32`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24819,"byte_end":24872,"line_start":35,"line_end":35,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24877,"byte_end":24886,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25131,"byte_end":25137,"line_start":43,"line_end":43,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"pub fn to_i64(&Self) -> Option<i64>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`. If the value cannot be\n represented by an `i64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i64`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":24997,"byte_end":25065,"line_start":41,"line_end":41,"column_start":5,"column_end":73}},{"value":"/ represented by an `i64`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25070,"byte_end":25123,"line_start":42,"line_end":42,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25654,"byte_end":25661,"line_start":55,"line_end":55,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"pub fn to_i128(&Self) -> Option<i128>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`. If the value cannot be\n represented by an `i128` (`i64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `i128`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25166,"byte_end":25235,"line_start":45,"line_end":45,"column_start":5,"column_end":74}},{"value":"/ represented by an `i128` (`i64` under the default implementation), then","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25240,"byte_end":25315,"line_start":46,"line_end":46,"column_start":5,"column_end":80}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25320,"byte_end":25343,"line_start":47,"line_end":47,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25348,"byte_end":25351,"line_start":48,"line_end":48,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25356,"byte_end":25434,"line_start":49,"line_end":49,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25439,"byte_end":25442,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_i64()`. Types implementing","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25447,"byte_end":25525,"line_start":51,"line_end":51,"column_start":5,"column_end":83}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25530,"byte_end":25611,"line_start":52,"line_end":52,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25616,"byte_end":25625,"line_start":53,"line_end":53,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25630,"byte_end":25646,"line_start":54,"line_end":54,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25886,"byte_end":25894,"line_start":62,"line_end":62,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"pub fn to_usize(&Self) -> Option<usize>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`. If the value cannot be\n represented by a `usize`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `usize`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25736,"byte_end":25805,"line_start":59,"line_end":59,"column_start":5,"column_end":74}},{"value":"/ represented by a `usize`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25810,"byte_end":25864,"line_start":60,"line_end":60,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25869,"byte_end":25878,"line_start":61,"line_end":61,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26139,"byte_end":26144,"line_start":69,"line_end":69,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"pub fn to_u8(&Self) -> Option<u8>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u8`. If the value cannot be\n represented by a `u8`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u8`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":25995,"byte_end":26061,"line_start":66,"line_end":66,"column_start":5,"column_end":71}},{"value":"/ represented by a `u8`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26066,"byte_end":26117,"line_start":67,"line_end":67,"column_start":5,"column_end":56}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26122,"byte_end":26131,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":127},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26385,"byte_end":26391,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"pub fn to_u16(&Self) -> Option<u16>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u16`. If the value cannot be\n represented by a `u16`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u16`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26239,"byte_end":26306,"line_start":73,"line_end":73,"column_start":5,"column_end":72}},{"value":"/ represented by a `u16`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26311,"byte_end":26363,"line_start":74,"line_end":74,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26368,"byte_end":26377,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26634,"byte_end":26640,"line_start":83,"line_end":83,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"pub fn to_u32(&Self) -> Option<u32>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u32`. If the value cannot be\n represented by a `u32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u32`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26488,"byte_end":26555,"line_start":80,"line_end":80,"column_start":5,"column_end":72}},{"value":"/ represented by a `u32`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26560,"byte_end":26612,"line_start":81,"line_end":81,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26617,"byte_end":26626,"line_start":82,"line_end":82,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26869,"byte_end":26875,"line_start":89,"line_end":89,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"pub fn to_u64(&Self) -> Option<u64>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u64`. If the value cannot be\n represented by a `u64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u64`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26737,"byte_end":26804,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/ represented by a `u64`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26809,"byte_end":26861,"line_start":88,"line_end":88,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27391,"byte_end":27398,"line_start":101,"line_end":101,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"pub fn to_u128(&Self) -> Option<u128>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `u128`. If the value cannot be\n represented by a `u128` (`u64` under the default implementation), then\n `None` is returned.","sig":null,"attributes":[{"value":"/ Converts the value of `self` to a `u128`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26904,"byte_end":26972,"line_start":91,"line_end":91,"column_start":5,"column_end":73}},{"value":"/ represented by a `u128` (`u64` under the default implementation), then","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":26977,"byte_end":27051,"line_start":92,"line_end":92,"column_start":5,"column_end":79}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27056,"byte_end":27079,"line_start":93,"line_end":93,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27084,"byte_end":27087,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27092,"byte_end":27170,"line_start":95,"line_end":95,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27175,"byte_end":27178,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `to_u64()`.  Types implementing","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27183,"byte_end":27262,"line_start":97,"line_end":97,"column_start":5,"column_end":84}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27267,"byte_end":27348,"line_start":98,"line_end":98,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27353,"byte_end":27362,"line_start":99,"line_end":99,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27367,"byte_end":27383,"line_start":100,"line_end":100,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27621,"byte_end":27627,"line_start":108,"line_end":108,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"pub fn to_f32(&Self) -> Option<f32>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`. If the value cannot be\n represented by an `f32`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f32`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27473,"byte_end":27541,"line_start":105,"line_end":105,"column_start":5,"column_end":73}},{"value":"/ represented by an `f32`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27546,"byte_end":27599,"line_start":106,"line_end":106,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27604,"byte_end":27613,"line_start":107,"line_end":107,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27872,"byte_end":27878,"line_start":115,"line_end":115,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"pub fn to_f64(&Self) -> Option<f64>","parent":{"krate":0,"index":118},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`. If the value cannot be\n represented by an `f64`, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts the value of `self` to an `f64`. If the value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27724,"byte_end":27792,"line_start":112,"line_end":112,"column_start":5,"column_end":73}},{"value":"/ represented by an `f64`, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27797,"byte_end":27850,"line_start":113,"line_end":113,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":27855,"byte_end":27864,"line_start":114,"line_end":114,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":143},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36276,"byte_end":36289,"line_start":379,"line_end":379,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[{"value":"/ A generic trait for converting a number to a value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36210,"byte_end":36265,"line_start":378,"line_end":378,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36472,"byte_end":36482,"line_start":383,"line_end":383,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"pub fn from_isize(isize) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `isize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `isize` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36303,"byte_end":36375,"line_start":380,"line_end":380,"column_start":5,"column_end":77}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36380,"byte_end":36450,"line_start":381,"line_end":381,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36455,"byte_end":36464,"line_start":382,"line_end":382,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36741,"byte_end":36748,"line_start":390,"line_end":390,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"pub fn from_i8(i8) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `i8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i8` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36575,"byte_end":36644,"line_start":387,"line_end":387,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36649,"byte_end":36719,"line_start":388,"line_end":388,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36724,"byte_end":36733,"line_start":389,"line_end":389,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36999,"byte_end":37007,"line_start":397,"line_end":397,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"pub fn from_i16(i16) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `i16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i16` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36832,"byte_end":36902,"line_start":394,"line_end":394,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36907,"byte_end":36977,"line_start":395,"line_end":395,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36982,"byte_end":36991,"line_start":396,"line_end":396,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37259,"byte_end":37267,"line_start":404,"line_end":404,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"pub fn from_i32(i32) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `i32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i32` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37092,"byte_end":37162,"line_start":401,"line_end":401,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37167,"byte_end":37237,"line_start":402,"line_end":402,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37242,"byte_end":37251,"line_start":403,"line_end":403,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37505,"byte_end":37513,"line_start":410,"line_end":410,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"pub fn from_i64(i64) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `i64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `i64` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37352,"byte_end":37422,"line_start":408,"line_end":408,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37427,"byte_end":37497,"line_start":409,"line_end":409,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":149},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38003,"byte_end":38012,"line_start":421,"line_end":421,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"pub fn from_i128(i128) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `i128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `i128` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37544,"byte_end":37615,"line_start":412,"line_end":412,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37620,"byte_end":37690,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37695,"byte_end":37698,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37703,"byte_end":37781,"line_start":415,"line_end":415,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37786,"byte_end":37789,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_i64()`. Types implementing","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37794,"byte_end":37874,"line_start":417,"line_end":417,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37879,"byte_end":37960,"line_start":418,"line_end":418,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37965,"byte_end":37974,"line_start":419,"line_end":419,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":37979,"byte_end":37995,"line_start":420,"line_end":420,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":150},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38272,"byte_end":38282,"line_start":428,"line_end":428,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"pub fn from_usize(usize) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts a `usize` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `usize` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38104,"byte_end":38175,"line_start":425,"line_end":425,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38180,"byte_end":38250,"line_start":426,"line_end":426,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38255,"byte_end":38264,"line_start":427,"line_end":427,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38541,"byte_end":38548,"line_start":435,"line_end":435,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"pub fn from_u8(u8) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `u8` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u8` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38375,"byte_end":38444,"line_start":432,"line_end":432,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38449,"byte_end":38519,"line_start":433,"line_end":433,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38524,"byte_end":38533,"line_start":434,"line_end":434,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38799,"byte_end":38807,"line_start":442,"line_end":442,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"pub fn from_u16(u16) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `u16` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u16` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38632,"byte_end":38702,"line_start":439,"line_end":439,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38707,"byte_end":38777,"line_start":440,"line_end":440,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38782,"byte_end":38791,"line_start":441,"line_end":441,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39059,"byte_end":39067,"line_start":449,"line_end":449,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"pub fn from_u32(u32) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `u32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u32` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38892,"byte_end":38962,"line_start":446,"line_end":446,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":38967,"byte_end":39037,"line_start":447,"line_end":447,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39042,"byte_end":39051,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39305,"byte_end":39313,"line_start":455,"line_end":455,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"pub fn from_u64(u64) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `u64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts an `u64` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39152,"byte_end":39222,"line_start":453,"line_end":453,"column_start":5,"column_end":75}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39227,"byte_end":39297,"line_start":454,"line_end":454,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39803,"byte_end":39812,"line_start":466,"line_end":466,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"pub fn from_u128(u128) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts an `u128` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.","sig":null,"attributes":[{"value":"/ Converts an `u128` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39344,"byte_end":39415,"line_start":457,"line_end":457,"column_start":5,"column_end":76}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39420,"byte_end":39490,"line_start":458,"line_end":458,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39495,"byte_end":39498,"line_start":459,"line_end":459,"column_start":5,"column_end":8}},{"value":"/ This method is only available with feature `i128` enabled on Rust >= 1.26.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39503,"byte_end":39581,"line_start":460,"line_end":460,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39586,"byte_end":39589,"line_start":461,"line_end":461,"column_start":5,"column_end":8}},{"value":"/ The default implementation converts through `from_u64()`. Types implementing","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39594,"byte_end":39674,"line_start":462,"line_end":462,"column_start":5,"column_end":85}},{"value":"/ this trait should override this method if they can represent a greater range.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39679,"byte_end":39760,"line_start":463,"line_end":463,"column_start":5,"column_end":86}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39765,"byte_end":39774,"line_start":464,"line_end":464,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39779,"byte_end":39795,"line_start":465,"line_end":465,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":40070,"byte_end":40078,"line_start":473,"line_end":473,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"pub fn from_f32(f32) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts a `f32` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `f32` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39904,"byte_end":39973,"line_start":470,"line_end":470,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":39978,"byte_end":40048,"line_start":471,"line_end":471,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":40053,"byte_end":40062,"line_start":472,"line_end":472,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":157},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":40329,"byte_end":40337,"line_start":480,"line_end":480,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"pub fn from_f64(f64) -> Option<Self>","parent":{"krate":0,"index":143},"children":[],"decl_id":null,"docs":" Converts a `f64` to return an optional value of this type. If the\n value cannot be represented by this type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Converts a `f64` to return an optional value of this type. If the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":40163,"byte_end":40232,"line_start":477,"line_end":477,"column_start":5,"column_end":74}},{"value":"/ value cannot be represented by this type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":40237,"byte_end":40307,"line_start":478,"line_end":478,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":40312,"byte_end":40321,"line_start":479,"line_end":479,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":165},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44583,"byte_end":44587,"line_start":650,"line_end":650,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"pub fn cast<T: NumCast, U: NumCast>(T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"/ Cast from one machine scalar to another.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44370,"byte_end":44414,"line_start":639,"line_end":639,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44415,"byte_end":44418,"line_start":640,"line_end":640,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44419,"byte_end":44433,"line_start":641,"line_end":641,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44434,"byte_end":44437,"line_start":642,"line_end":642,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44438,"byte_end":44445,"line_start":643,"line_end":643,"column_start":1,"column_end":8}},{"value":"/ # use num_traits as num;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44446,"byte_end":44474,"line_start":644,"line_end":644,"column_start":1,"column_end":29}},{"value":"/ let twenty: f32 = num::cast(0x14).unwrap();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44475,"byte_end":44522,"line_start":645,"line_end":645,"column_start":1,"column_end":48}},{"value":"/ assert_eq!(twenty, 20f32);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44523,"byte_end":44553,"line_start":646,"line_end":646,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44554,"byte_end":44561,"line_start":647,"line_end":647,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44562,"byte_end":44565,"line_start":648,"line_end":648,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44566,"byte_end":44575,"line_start":649,"line_end":649,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":168},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44721,"byte_end":44728,"line_start":655,"line_end":655,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":169}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[{"value":"/ An interface for casting between machine scalars.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44657,"byte_end":44710,"line_start":654,"line_end":654,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44974,"byte_end":44978,"line_start":659,"line_end":659,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"pub fn from<T: ToPrimitive>(T) -> Option<Self>","parent":{"krate":0,"index":168},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait. If the source value cannot be\n represented by the target type, then `None` is returned.\n","sig":null,"attributes":[{"value":"/ Creates a number from another value that can be converted into","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44756,"byte_end":44822,"line_start":656,"line_end":656,"column_start":5,"column_end":71}},{"value":"/ a primitive via the `ToPrimitive` trait. If the source value cannot be","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44827,"byte_end":44901,"line_start":657,"line_end":657,"column_start":5,"column_end":79}},{"value":"/ represented by the target type, then `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44906,"byte_end":44966,"line_start":658,"line_end":658,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":176},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47114,"byte_end":47125,"line_start":734,"line_end":734,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":178}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait `AsPrimitive` should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[{"value":"/ A generic interface for casting between machine scalars with the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46006,"byte_end":46074,"line_start":699,"line_end":699,"column_start":1,"column_end":69}},{"value":"/ `as` operator, which admits narrowing and precision loss.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46075,"byte_end":46136,"line_start":700,"line_end":700,"column_start":1,"column_end":62}},{"value":"/ Implementers of this trait `AsPrimitive` should behave like a primitive","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46137,"byte_end":46212,"line_start":701,"line_end":701,"column_start":1,"column_end":76}},{"value":"/ numeric type (e.g. a newtype around another primitive), and the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46213,"byte_end":46280,"line_start":702,"line_end":702,"column_start":1,"column_end":68}},{"value":"/ intended conversion must never fail.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46281,"byte_end":46321,"line_start":703,"line_end":703,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46322,"byte_end":46325,"line_start":704,"line_end":704,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46326,"byte_end":46340,"line_start":705,"line_end":705,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46341,"byte_end":46344,"line_start":706,"line_end":706,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46345,"byte_end":46352,"line_start":707,"line_end":707,"column_start":1,"column_end":8}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46353,"byte_end":46387,"line_start":708,"line_end":708,"column_start":1,"column_end":35}},{"value":"/ let three: i32 = (3.14159265f32).as_();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46388,"byte_end":46431,"line_start":709,"line_end":709,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(three, 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46432,"byte_end":46457,"line_start":710,"line_end":710,"column_start":1,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46458,"byte_end":46465,"line_start":711,"line_end":711,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46466,"byte_end":46469,"line_start":712,"line_end":712,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46470,"byte_end":46482,"line_start":713,"line_end":713,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46483,"byte_end":46486,"line_start":714,"line_end":714,"column_start":1,"column_end":4}},{"value":"/ Currently, some uses of the `as` operator are not entirely safe.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46487,"byte_end":46555,"line_start":715,"line_end":715,"column_start":1,"column_end":69}},{"value":"/ In particular, it is undefined behavior if:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46556,"byte_end":46603,"line_start":716,"line_end":716,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46604,"byte_end":46607,"line_start":717,"line_end":717,"column_start":1,"column_end":4}},{"value":"/ - A truncated floating point value cannot fit in the target integer","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46608,"byte_end":46679,"line_start":718,"line_end":718,"column_start":1,"column_end":72}},{"value":"/   type ([#10184](https://github.com/rust-lang/rust/issues/10184));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46680,"byte_end":46750,"line_start":719,"line_end":719,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46751,"byte_end":46754,"line_start":720,"line_end":720,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46755,"byte_end":46768,"line_start":721,"line_end":721,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46769,"byte_end":46803,"line_start":722,"line_end":722,"column_start":1,"column_end":35}},{"value":"/ let x: u8 = (1.04E+17).as_(); // UB","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46804,"byte_end":46843,"line_start":723,"line_end":723,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46844,"byte_end":46851,"line_start":724,"line_end":724,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46852,"byte_end":46855,"line_start":725,"line_end":725,"column_start":1,"column_end":4}},{"value":"/ - Or a floating point value does not fit in another floating","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46856,"byte_end":46920,"line_start":726,"line_end":726,"column_start":1,"column_end":65}},{"value":"/   point type ([#15536](https://github.com/rust-lang/rust/issues/15536)).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46921,"byte_end":46997,"line_start":727,"line_end":727,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":46998,"byte_end":47001,"line_start":728,"line_end":728,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47002,"byte_end":47015,"line_start":729,"line_end":729,"column_start":1,"column_end":14}},{"value":"/ # use num_traits::AsPrimitive;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47016,"byte_end":47050,"line_start":730,"line_end":730,"column_start":1,"column_end":35}},{"value":"/ let x: f32 = (1e300f64).as_(); // UB","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47051,"byte_end":47091,"line_start":731,"line_end":731,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47092,"byte_end":47099,"line_start":732,"line_end":732,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47100,"byte_end":47103,"line_start":733,"line_end":733,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47244,"byte_end":47247,"line_start":739,"line_end":739,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"pub fn as_(Self) -> T","parent":{"krate":0,"index":176},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[{"value":"/ Convert a value to another, using the `as` operator.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47180,"byte_end":47236,"line_start":738,"line_end":738,"column_start":5,"column_end":61}}]},{"kind":"Mod","id":{"krate":0,"index":180},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","parent":null,"children":[{"krate":0,"index":181},{"krate":0,"index":182},{"krate":0,"index":183},{"krate":0,"index":184},{"krate":0,"index":185},{"krate":0,"index":186},{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":222},{"krate":0,"index":230},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":1831},{"krate":0,"index":1849},{"krate":0,"index":1867}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":192},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":48968,"byte_end":48977,"line_start":16,"line_end":16,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206},{"krate":0,"index":207},{"krate":0,"index":208},{"krate":0,"index":209},{"krate":0,"index":210},{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213},{"krate":0,"index":214},{"krate":0,"index":215},{"krate":0,"index":216},{"krate":0,"index":217},{"krate":0,"index":218},{"krate":0,"index":219},{"krate":0,"index":220},{"krate":0,"index":221}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[{"value":"/ Generic trait for floating point numbers that works with `no_std`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":48826,"byte_end":48896,"line_start":13,"line_end":13,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":48897,"byte_end":48900,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ This trait implements a subset of the `Float` trait.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":48901,"byte_end":48957,"line_start":15,"line_end":15,"column_start":1,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49374,"byte_end":49382,"line_start":32,"line_end":32,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"pub fn infinity() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[{"value":"/ Returns positive infinity.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49040,"byte_end":49070,"line_start":17,"line_end":17,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49075,"byte_end":49078,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49083,"byte_end":49097,"line_start":19,"line_end":19,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49102,"byte_end":49105,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49110,"byte_end":49117,"line_start":21,"line_end":21,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49122,"byte_end":49159,"line_start":22,"line_end":22,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49164,"byte_end":49188,"line_start":23,"line_end":23,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49193,"byte_end":49196,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49201,"byte_end":49235,"line_start":25,"line_end":25,"column_start":5,"column_end":39}},{"value":"/     assert!(T::infinity() == x);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49240,"byte_end":49276,"line_start":26,"line_end":26,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49281,"byte_end":49286,"line_start":27,"line_end":27,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49291,"byte_end":49294,"line_start":28,"line_end":28,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49299,"byte_end":49324,"line_start":29,"line_end":29,"column_start":5,"column_end":30}},{"value":"/ check(f64::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49329,"byte_end":49354,"line_start":30,"line_end":30,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49359,"byte_end":49366,"line_start":31,"line_end":31,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49745,"byte_end":49757,"line_start":49,"line_end":49,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"pub fn neg_infinity() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[{"value":"/ Returns negative infinity.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49399,"byte_end":49429,"line_start":34,"line_end":34,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49434,"byte_end":49437,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49442,"byte_end":49456,"line_start":36,"line_end":36,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49461,"byte_end":49464,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49469,"byte_end":49476,"line_start":38,"line_end":38,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49481,"byte_end":49518,"line_start":39,"line_end":39,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49523,"byte_end":49547,"line_start":40,"line_end":40,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49552,"byte_end":49555,"line_start":41,"line_end":41,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49560,"byte_end":49594,"line_start":42,"line_end":42,"column_start":5,"column_end":39}},{"value":"/     assert!(T::neg_infinity() == x);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49599,"byte_end":49639,"line_start":43,"line_end":43,"column_start":5,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49644,"byte_end":49649,"line_start":44,"line_end":44,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49654,"byte_end":49657,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49662,"byte_end":49691,"line_start":46,"line_end":46,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49696,"byte_end":49725,"line_start":47,"line_end":47,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49730,"byte_end":49737,"line_start":48,"line_end":48,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50067,"byte_end":50070,"line_start":66,"line_end":66,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"pub fn nan() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[{"value":"/ Returns NaN.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49774,"byte_end":49790,"line_start":51,"line_end":51,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49795,"byte_end":49798,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49803,"byte_end":49817,"line_start":53,"line_end":53,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49822,"byte_end":49825,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49830,"byte_end":49837,"line_start":55,"line_end":55,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49842,"byte_end":49879,"line_start":56,"line_end":56,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49884,"byte_end":49887,"line_start":57,"line_end":57,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>() {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49892,"byte_end":49922,"line_start":58,"line_end":58,"column_start":5,"column_end":35}},{"value":"/     let n = T::nan();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49927,"byte_end":49952,"line_start":59,"line_end":59,"column_start":5,"column_end":30}},{"value":"/     assert!(n != n);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49957,"byte_end":49981,"line_start":60,"line_end":60,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49986,"byte_end":49991,"line_start":61,"line_end":61,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49996,"byte_end":49999,"line_start":62,"line_end":62,"column_start":5,"column_end":8}},{"value":"/ check::<f32>();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50004,"byte_end":50023,"line_start":63,"line_end":63,"column_start":5,"column_end":24}},{"value":"/ check::<f64>();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50028,"byte_end":50047,"line_start":64,"line_end":64,"column_start":5,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50052,"byte_end":50059,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50486,"byte_end":50494,"line_start":85,"line_end":85,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"pub fn neg_zero() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[{"value":"/ Returns `-0.0`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50087,"byte_end":50106,"line_start":68,"line_end":68,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50111,"byte_end":50114,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50119,"byte_end":50133,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50138,"byte_end":50141,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50146,"byte_end":50153,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50158,"byte_end":50195,"line_start":73,"line_end":73,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50200,"byte_end":50224,"line_start":74,"line_end":74,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50229,"byte_end":50232,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(n: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50237,"byte_end":50271,"line_start":76,"line_end":76,"column_start":5,"column_end":39}},{"value":"/     let z = T::neg_zero();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50276,"byte_end":50306,"line_start":77,"line_end":77,"column_start":5,"column_end":35}},{"value":"/     assert!(z.is_zero());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50311,"byte_end":50340,"line_start":78,"line_end":78,"column_start":5,"column_end":34}},{"value":"/     assert!(T::one() / z == n);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50345,"byte_end":50380,"line_start":79,"line_end":79,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50385,"byte_end":50390,"line_start":80,"line_end":80,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50395,"byte_end":50398,"line_start":81,"line_end":81,"column_start":5,"column_end":8}},{"value":"/ check(f32::NEG_INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50403,"byte_end":50432,"line_start":82,"line_end":82,"column_start":5,"column_end":34}},{"value":"/ check(f64::NEG_INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50437,"byte_end":50466,"line_start":83,"line_end":83,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50471,"byte_end":50478,"line_start":84,"line_end":84,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50873,"byte_end":50882,"line_start":102,"line_end":102,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"pub fn min_value() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest finite value that this type can represent.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50511,"byte_end":50578,"line_start":87,"line_end":87,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50583,"byte_end":50586,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50591,"byte_end":50605,"line_start":89,"line_end":89,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50610,"byte_end":50613,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50618,"byte_end":50625,"line_start":91,"line_end":91,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50630,"byte_end":50667,"line_start":92,"line_end":92,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50672,"byte_end":50696,"line_start":93,"line_end":93,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50701,"byte_end":50704,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50709,"byte_end":50743,"line_start":95,"line_end":95,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_value() == x);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50748,"byte_end":50785,"line_start":96,"line_end":96,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50790,"byte_end":50795,"line_start":97,"line_end":97,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50800,"byte_end":50803,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50808,"byte_end":50828,"line_start":99,"line_end":99,"column_start":5,"column_end":25}},{"value":"/ check(f64::MIN);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50833,"byte_end":50853,"line_start":100,"line_end":100,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50858,"byte_end":50865,"line_start":101,"line_end":101,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51302,"byte_end":51320,"line_start":119,"line_end":119,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"pub fn min_positive_value() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the smallest positive, normalized value that this type can represent.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50899,"byte_end":50980,"line_start":104,"line_end":104,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50985,"byte_end":50988,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":50993,"byte_end":51007,"line_start":106,"line_end":106,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51012,"byte_end":51015,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51020,"byte_end":51027,"line_start":108,"line_end":108,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51032,"byte_end":51069,"line_start":109,"line_end":109,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51074,"byte_end":51098,"line_start":110,"line_end":110,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51103,"byte_end":51106,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51111,"byte_end":51145,"line_start":112,"line_end":112,"column_start":5,"column_end":39}},{"value":"/     assert!(T::min_positive_value() == x);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51150,"byte_end":51196,"line_start":113,"line_end":113,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51201,"byte_end":51206,"line_start":114,"line_end":114,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51211,"byte_end":51214,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ check(f32::MIN_POSITIVE);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51219,"byte_end":51248,"line_start":116,"line_end":116,"column_start":5,"column_end":34}},{"value":"/ check(f64::MIN_POSITIVE);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51253,"byte_end":51282,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51287,"byte_end":51294,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51682,"byte_end":51689,"line_start":136,"line_end":136,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"pub fn epsilon() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[{"value":"/ Returns epsilon, a small positive value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51337,"byte_end":51381,"line_start":121,"line_end":121,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51386,"byte_end":51389,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51394,"byte_end":51408,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51413,"byte_end":51416,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51421,"byte_end":51428,"line_start":125,"line_end":125,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51433,"byte_end":51470,"line_start":126,"line_end":126,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51475,"byte_end":51499,"line_start":127,"line_end":127,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51504,"byte_end":51507,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51512,"byte_end":51546,"line_start":129,"line_end":129,"column_start":5,"column_end":39}},{"value":"/     assert!(T::epsilon() == x);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51551,"byte_end":51586,"line_start":130,"line_end":130,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51591,"byte_end":51596,"line_start":131,"line_end":131,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51601,"byte_end":51604,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ check(f32::EPSILON);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51609,"byte_end":51633,"line_start":133,"line_end":133,"column_start":5,"column_end":29}},{"value":"/ check(f64::EPSILON);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51638,"byte_end":51662,"line_start":134,"line_end":134,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51667,"byte_end":51674,"line_start":135,"line_end":135,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52067,"byte_end":52076,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"pub fn max_value() -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[{"value":"/ Returns the largest finite value that this type can represent.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51706,"byte_end":51772,"line_start":138,"line_end":138,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51777,"byte_end":51780,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51785,"byte_end":51799,"line_start":140,"line_end":140,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51804,"byte_end":51807,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51812,"byte_end":51819,"line_start":142,"line_end":142,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51824,"byte_end":51861,"line_start":143,"line_end":143,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51866,"byte_end":51890,"line_start":144,"line_end":144,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51895,"byte_end":51898,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51903,"byte_end":51937,"line_start":146,"line_end":146,"column_start":5,"column_end":39}},{"value":"/     assert!(T::max_value() == x);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51942,"byte_end":51979,"line_start":147,"line_end":147,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51984,"byte_end":51989,"line_start":148,"line_end":148,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":51994,"byte_end":51997,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52002,"byte_end":52022,"line_start":150,"line_end":150,"column_start":5,"column_end":25}},{"value":"/ check(f64::MAX);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52027,"byte_end":52047,"line_start":151,"line_end":151,"column_start":5,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52052,"byte_end":52059,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52526,"byte_end":52532,"line_start":173,"line_end":173,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"pub fn is_nan(Self) -> bool","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is NaN.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52093,"byte_end":52133,"line_start":155,"line_end":155,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52138,"byte_end":52141,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52146,"byte_end":52160,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52165,"byte_end":52168,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52173,"byte_end":52180,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52185,"byte_end":52222,"line_start":160,"line_end":160,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52227,"byte_end":52251,"line_start":161,"line_end":161,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52256,"byte_end":52259,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52264,"byte_end":52307,"line_start":163,"line_end":163,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_nan() == p);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52312,"byte_end":52345,"line_start":164,"line_end":164,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52350,"byte_end":52355,"line_start":165,"line_end":165,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52360,"byte_end":52363,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ check(f32::NAN, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52368,"byte_end":52394,"line_start":167,"line_end":167,"column_start":5,"column_end":31}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52399,"byte_end":52431,"line_start":168,"line_end":168,"column_start":5,"column_end":37}},{"value":"/ check(f64::NAN, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52436,"byte_end":52462,"line_start":169,"line_end":169,"column_start":5,"column_end":31}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52467,"byte_end":52492,"line_start":170,"line_end":170,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52497,"byte_end":52504,"line_start":171,"line_end":171,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52509,"byte_end":52518,"line_start":172,"line_end":172,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53109,"byte_end":53120,"line_start":197,"line_end":197,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"pub fn is_infinite(Self) -> bool","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is infinite.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52581,"byte_end":52626,"line_start":177,"line_end":177,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52631,"byte_end":52634,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52639,"byte_end":52653,"line_start":179,"line_end":179,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52658,"byte_end":52661,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52666,"byte_end":52673,"line_start":181,"line_end":181,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52678,"byte_end":52715,"line_start":182,"line_end":182,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52720,"byte_end":52744,"line_start":183,"line_end":183,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52749,"byte_end":52752,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52757,"byte_end":52800,"line_start":185,"line_end":185,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_infinite() == p);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52805,"byte_end":52843,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52848,"byte_end":52853,"line_start":187,"line_end":187,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52858,"byte_end":52861,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52866,"byte_end":52897,"line_start":189,"line_end":189,"column_start":5,"column_end":36}},{"value":"/ check(f32::NEG_INFINITY, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52902,"byte_end":52937,"line_start":190,"line_end":190,"column_start":5,"column_end":40}},{"value":"/ check(f32::NAN, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52942,"byte_end":52969,"line_start":191,"line_end":191,"column_start":5,"column_end":32}},{"value":"/ check(f64::INFINITY, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":52974,"byte_end":53005,"line_start":192,"line_end":192,"column_start":5,"column_end":36}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53010,"byte_end":53045,"line_start":193,"line_end":193,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53050,"byte_end":53075,"line_start":194,"line_end":194,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53080,"byte_end":53087,"line_start":195,"line_end":195,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53092,"byte_end":53101,"line_start":196,"line_end":196,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53721,"byte_end":53730,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"pub fn is_finite(Self) -> bool","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither infinite or NaN.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53213,"byte_end":53273,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53278,"byte_end":53281,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53286,"byte_end":53300,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53305,"byte_end":53308,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53313,"byte_end":53320,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53325,"byte_end":53362,"line_start":206,"line_end":206,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53367,"byte_end":53391,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53396,"byte_end":53399,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53404,"byte_end":53447,"line_start":209,"line_end":209,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_finite() == p);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53452,"byte_end":53488,"line_start":210,"line_end":210,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53493,"byte_end":53498,"line_start":211,"line_end":211,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53503,"byte_end":53506,"line_start":212,"line_end":212,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53511,"byte_end":53543,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53548,"byte_end":53574,"line_start":214,"line_end":214,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53579,"byte_end":53615,"line_start":215,"line_end":215,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53620,"byte_end":53655,"line_start":216,"line_end":216,"column_start":5,"column_end":40}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53660,"byte_end":53687,"line_start":217,"line_end":217,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53692,"byte_end":53699,"line_start":218,"line_end":218,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53704,"byte_end":53713,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54328,"byte_end":54337,"line_start":243,"line_end":243,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"pub fn is_normal(Self) -> bool","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"/ Returns `true` if the number is neither zero, infinite, subnormal or NaN.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53805,"byte_end":53882,"line_start":224,"line_end":224,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53887,"byte_end":53890,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53895,"byte_end":53909,"line_start":226,"line_end":226,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53914,"byte_end":53917,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53922,"byte_end":53929,"line_start":228,"line_end":228,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53934,"byte_end":53971,"line_start":229,"line_end":229,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":53976,"byte_end":54000,"line_start":230,"line_end":230,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54005,"byte_end":54008,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54013,"byte_end":54056,"line_start":232,"line_end":232,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_normal() == p);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54061,"byte_end":54097,"line_start":233,"line_end":233,"column_start":5,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54102,"byte_end":54107,"line_start":234,"line_end":234,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54112,"byte_end":54115,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54120,"byte_end":54152,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54157,"byte_end":54183,"line_start":237,"line_end":237,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54188,"byte_end":54224,"line_start":238,"line_end":238,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54229,"byte_end":54264,"line_start":239,"line_end":239,"column_start":5,"column_end":40}},{"value":"/ check(0.0f64, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54269,"byte_end":54294,"line_start":240,"line_end":240,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54299,"byte_end":54306,"line_start":241,"line_end":241,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54311,"byte_end":54320,"line_start":242,"line_end":242,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55176,"byte_end":55184,"line_start":269,"line_end":269,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"pub fn classify(Self) -> FpCategory","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[{"value":"/ Returns the floating point category of the number. If only one property","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54411,"byte_end":54486,"line_start":247,"line_end":247,"column_start":5,"column_end":80}},{"value":"/ is going to be tested, it is generally faster to use the specific","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54491,"byte_end":54560,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/ predicate instead.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54565,"byte_end":54587,"line_start":249,"line_end":249,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54592,"byte_end":54595,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54600,"byte_end":54614,"line_start":251,"line_end":251,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54619,"byte_end":54622,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54627,"byte_end":54634,"line_start":253,"line_end":253,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54639,"byte_end":54676,"line_start":254,"line_end":254,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54681,"byte_end":54705,"line_start":255,"line_end":255,"column_start":5,"column_end":29}},{"value":"/ use std::num::FpCategory;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54710,"byte_end":54739,"line_start":256,"line_end":256,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54744,"byte_end":54747,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, c: FpCategory) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54752,"byte_end":54801,"line_start":258,"line_end":258,"column_start":5,"column_end":54}},{"value":"/     assert!(x.classify() == c);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54806,"byte_end":54841,"line_start":259,"line_end":259,"column_start":5,"column_end":40}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54846,"byte_end":54851,"line_start":260,"line_end":260,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54856,"byte_end":54859,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, FpCategory::Infinite);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54864,"byte_end":54911,"line_start":262,"line_end":262,"column_start":5,"column_end":52}},{"value":"/ check(f32::MAX, FpCategory::Normal);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54916,"byte_end":54956,"line_start":263,"line_end":263,"column_start":5,"column_end":45}},{"value":"/ check(f64::NAN, FpCategory::Nan);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":54961,"byte_end":54998,"line_start":264,"line_end":264,"column_start":5,"column_end":42}},{"value":"/ check(f64::MIN_POSITIVE, FpCategory::Normal);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55003,"byte_end":55052,"line_start":265,"line_end":265,"column_start":5,"column_end":54}},{"value":"/ check(f64::MIN_POSITIVE / 2.0, FpCategory::Subnormal);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55057,"byte_end":55115,"line_start":266,"line_end":266,"column_start":5,"column_end":63}},{"value":"/ check(0.0f64, FpCategory::Zero);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55120,"byte_end":55156,"line_start":267,"line_end":267,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55161,"byte_end":55168,"line_start":268,"line_end":268,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55817,"byte_end":55822,"line_start":294,"line_end":294,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"pub fn floor(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the largest integer less than or equal to a number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55211,"byte_end":55274,"line_start":271,"line_end":271,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55279,"byte_end":55282,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55287,"byte_end":55301,"line_start":273,"line_end":273,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55306,"byte_end":55309,"line_start":274,"line_end":274,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55314,"byte_end":55321,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55326,"byte_end":55363,"line_start":276,"line_end":276,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55368,"byte_end":55392,"line_start":277,"line_end":277,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55397,"byte_end":55400,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55405,"byte_end":55445,"line_start":279,"line_end":279,"column_start":5,"column_end":45}},{"value":"/     assert!(x.floor() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55450,"byte_end":55482,"line_start":280,"line_end":280,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55487,"byte_end":55492,"line_start":281,"line_end":281,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55497,"byte_end":55500,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55505,"byte_end":55545,"line_start":283,"line_end":283,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55550,"byte_end":55573,"line_start":284,"line_end":284,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55578,"byte_end":55601,"line_start":285,"line_end":285,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55606,"byte_end":55629,"line_start":286,"line_end":286,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55634,"byte_end":55658,"line_start":287,"line_end":287,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55663,"byte_end":55688,"line_start":288,"line_end":288,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55693,"byte_end":55718,"line_start":289,"line_end":289,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -2.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55723,"byte_end":55748,"line_start":290,"line_end":290,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55753,"byte_end":55783,"line_start":291,"line_end":291,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55788,"byte_end":55795,"line_start":292,"line_end":292,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":55800,"byte_end":55809,"line_start":293,"line_end":293,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56668,"byte_end":56672,"line_start":328,"line_end":328,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"pub fn ceil(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"/ Returns the smallest integer greater than or equal to a number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56059,"byte_end":56126,"line_start":305,"line_end":305,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56131,"byte_end":56134,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56139,"byte_end":56153,"line_start":307,"line_end":307,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56158,"byte_end":56161,"line_start":308,"line_end":308,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56166,"byte_end":56173,"line_start":309,"line_end":309,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56178,"byte_end":56215,"line_start":310,"line_end":310,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56220,"byte_end":56244,"line_start":311,"line_end":311,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56249,"byte_end":56252,"line_start":312,"line_end":312,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56257,"byte_end":56297,"line_start":313,"line_end":313,"column_start":5,"column_end":45}},{"value":"/     assert!(x.ceil() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56302,"byte_end":56333,"line_start":314,"line_end":314,"column_start":5,"column_end":36}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56338,"byte_end":56343,"line_start":315,"line_end":315,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56348,"byte_end":56351,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56356,"byte_end":56396,"line_start":317,"line_end":317,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56401,"byte_end":56424,"line_start":318,"line_end":318,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56429,"byte_end":56452,"line_start":319,"line_end":319,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 2.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56457,"byte_end":56480,"line_start":320,"line_end":320,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56485,"byte_end":56509,"line_start":321,"line_end":321,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56514,"byte_end":56539,"line_start":322,"line_end":322,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56544,"byte_end":56569,"line_start":323,"line_end":323,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56574,"byte_end":56599,"line_start":324,"line_end":324,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56604,"byte_end":56634,"line_start":325,"line_end":325,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56639,"byte_end":56646,"line_start":326,"line_end":326,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56651,"byte_end":56660,"line_start":327,"line_end":327,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57504,"byte_end":57509,"line_start":361,"line_end":361,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"pub fn round(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"/ Returns the nearest integer to a number. Round half-way cases away from `0.0`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56909,"byte_end":56991,"line_start":339,"line_end":339,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":56996,"byte_end":56999,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57004,"byte_end":57018,"line_start":341,"line_end":341,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57023,"byte_end":57026,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57031,"byte_end":57038,"line_start":343,"line_end":343,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57043,"byte_end":57080,"line_start":344,"line_end":344,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57085,"byte_end":57109,"line_start":345,"line_end":345,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57114,"byte_end":57117,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57122,"byte_end":57162,"line_start":347,"line_end":347,"column_start":5,"column_end":45}},{"value":"/     assert!(x.round() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57167,"byte_end":57199,"line_start":348,"line_end":348,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57204,"byte_end":57209,"line_start":349,"line_end":349,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57214,"byte_end":57217,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57222,"byte_end":57262,"line_start":351,"line_end":351,"column_start":5,"column_end":45}},{"value":"/ check(0.4f32, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57267,"byte_end":57290,"line_start":352,"line_end":352,"column_start":5,"column_end":28}},{"value":"/ check(0.5f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57295,"byte_end":57318,"line_start":353,"line_end":353,"column_start":5,"column_end":28}},{"value":"/ check(0.6f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57323,"byte_end":57346,"line_start":354,"line_end":354,"column_start":5,"column_end":28}},{"value":"/ check(-0.4f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57351,"byte_end":57375,"line_start":355,"line_end":355,"column_start":5,"column_end":29}},{"value":"/ check(-0.5f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57380,"byte_end":57405,"line_start":356,"line_end":356,"column_start":5,"column_end":30}},{"value":"/ check(-0.6f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57410,"byte_end":57435,"line_start":357,"line_end":357,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57440,"byte_end":57470,"line_start":358,"line_end":358,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57475,"byte_end":57482,"line_start":359,"line_end":359,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":57487,"byte_end":57496,"line_start":360,"line_end":360,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58600,"byte_end":58605,"line_start":405,"line_end":405,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"pub fn trunc(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"/ Return the integer part of a number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58017,"byte_end":58057,"line_start":382,"line_end":382,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58062,"byte_end":58065,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58070,"byte_end":58084,"line_start":384,"line_end":384,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58089,"byte_end":58092,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58097,"byte_end":58104,"line_start":386,"line_end":386,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58109,"byte_end":58146,"line_start":387,"line_end":387,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58151,"byte_end":58175,"line_start":388,"line_end":388,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58180,"byte_end":58183,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58188,"byte_end":58228,"line_start":390,"line_end":390,"column_start":5,"column_end":45}},{"value":"/     assert!(x.trunc() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58233,"byte_end":58265,"line_start":391,"line_end":391,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58270,"byte_end":58275,"line_start":392,"line_end":392,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58280,"byte_end":58283,"line_start":393,"line_end":393,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58288,"byte_end":58328,"line_start":394,"line_end":394,"column_start":5,"column_end":45}},{"value":"/ check(0.9f32, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58333,"byte_end":58356,"line_start":395,"line_end":395,"column_start":5,"column_end":28}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58361,"byte_end":58384,"line_start":396,"line_end":396,"column_start":5,"column_end":28}},{"value":"/ check(1.1f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58389,"byte_end":58412,"line_start":397,"line_end":397,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58417,"byte_end":58441,"line_start":398,"line_end":398,"column_start":5,"column_end":29}},{"value":"/ check(-0.9f64, -0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58446,"byte_end":58471,"line_start":399,"line_end":399,"column_start":5,"column_end":30}},{"value":"/ check(-1.0f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58476,"byte_end":58501,"line_start":400,"line_end":400,"column_start":5,"column_end":30}},{"value":"/ check(-1.1f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58506,"byte_end":58531,"line_start":401,"line_end":401,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, f64::MIN);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58536,"byte_end":58566,"line_start":402,"line_end":402,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58571,"byte_end":58578,"line_start":403,"line_end":403,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58583,"byte_end":58592,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":210},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59326,"byte_end":59331,"line_start":437,"line_end":437,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"pub fn fract(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"/ Returns the fractional part of a number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58752,"byte_end":58796,"line_start":414,"line_end":414,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58801,"byte_end":58804,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58809,"byte_end":58823,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58828,"byte_end":58831,"line_start":417,"line_end":417,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58836,"byte_end":58843,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58848,"byte_end":58885,"line_start":419,"line_end":419,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58890,"byte_end":58914,"line_start":420,"line_end":420,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58919,"byte_end":58922,"line_start":421,"line_end":421,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58927,"byte_end":58967,"line_start":422,"line_end":422,"column_start":5,"column_end":45}},{"value":"/     assert!(x.fract() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":58972,"byte_end":59004,"line_start":423,"line_end":423,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59009,"byte_end":59014,"line_start":424,"line_end":424,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59019,"byte_end":59022,"line_start":425,"line_end":425,"column_start":5,"column_end":8}},{"value":"/ check(f32::MAX, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59027,"byte_end":59052,"line_start":426,"line_end":426,"column_start":5,"column_end":30}},{"value":"/ check(0.75f32, 0.75);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59057,"byte_end":59082,"line_start":427,"line_end":427,"column_start":5,"column_end":30}},{"value":"/ check(1.0f32, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59087,"byte_end":59110,"line_start":428,"line_end":428,"column_start":5,"column_end":28}},{"value":"/ check(1.25f32, 0.25);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59115,"byte_end":59140,"line_start":429,"line_end":429,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59145,"byte_end":59169,"line_start":430,"line_end":430,"column_start":5,"column_end":29}},{"value":"/ check(-0.75f64, -0.75);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59174,"byte_end":59201,"line_start":431,"line_end":431,"column_start":5,"column_end":32}},{"value":"/ check(-1.0f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59206,"byte_end":59230,"line_start":432,"line_end":432,"column_start":5,"column_end":29}},{"value":"/ check(-1.25f64, -0.25);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59235,"byte_end":59262,"line_start":433,"line_end":433,"column_start":5,"column_end":32}},{"value":"/ check(f64::MIN, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59267,"byte_end":59292,"line_start":434,"line_end":434,"column_start":5,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59297,"byte_end":59304,"line_start":435,"line_end":435,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59309,"byte_end":59318,"line_start":436,"line_end":436,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":211},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60036,"byte_end":60039,"line_start":466,"line_end":466,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"pub fn abs(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Computes the absolute value of `self`. Returns `FloatCore::nan()` if the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59470,"byte_end":59546,"line_start":445,"line_end":445,"column_start":5,"column_end":81}},{"value":"/ number is `FloatCore::nan()`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59551,"byte_end":59584,"line_start":446,"line_end":446,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59589,"byte_end":59592,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59597,"byte_end":59611,"line_start":448,"line_end":448,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59616,"byte_end":59619,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59624,"byte_end":59631,"line_start":450,"line_end":450,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59636,"byte_end":59673,"line_start":451,"line_end":451,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59678,"byte_end":59702,"line_start":452,"line_end":452,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59707,"byte_end":59710,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59715,"byte_end":59755,"line_start":454,"line_end":454,"column_start":5,"column_end":45}},{"value":"/     assert!(x.abs() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59760,"byte_end":59790,"line_start":455,"line_end":455,"column_start":5,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59795,"byte_end":59800,"line_start":456,"line_end":456,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59805,"byte_end":59808,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, f32::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59813,"byte_end":59853,"line_start":458,"line_end":458,"column_start":5,"column_end":45}},{"value":"/ check(1.0f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59858,"byte_end":59881,"line_start":459,"line_end":459,"column_start":5,"column_end":28}},{"value":"/ check(0.0f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59886,"byte_end":59909,"line_start":460,"line_end":460,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59914,"byte_end":59938,"line_start":461,"line_end":461,"column_start":5,"column_end":29}},{"value":"/ check(-1.0f64, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59943,"byte_end":59967,"line_start":462,"line_end":462,"column_start":5,"column_end":29}},{"value":"/ check(f64::MIN, f64::MAX);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":59972,"byte_end":60002,"line_start":463,"line_end":463,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60007,"byte_end":60014,"line_start":464,"line_end":464,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60019,"byte_end":60028,"line_start":465,"line_end":465,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":212},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60963,"byte_end":60969,"line_start":500,"line_end":500,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"pub fn signum(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"/ Returns a number that represents the sign of `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60232,"byte_end":60288,"line_start":476,"line_end":476,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60293,"byte_end":60296,"line_start":477,"line_end":477,"column_start":5,"column_end":8}},{"value":"/ - `1.0` if the number is positive, `+0.0` or `FloatCore::infinity()`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60301,"byte_end":60373,"line_start":478,"line_end":478,"column_start":5,"column_end":77}},{"value":"/ - `-1.0` if the number is negative, `-0.0` or `FloatCore::neg_infinity()`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60378,"byte_end":60455,"line_start":479,"line_end":479,"column_start":5,"column_end":82}},{"value":"/ - `FloatCore::nan()` if the number is `FloatCore::nan()`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60460,"byte_end":60520,"line_start":480,"line_end":480,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60525,"byte_end":60528,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60533,"byte_end":60547,"line_start":482,"line_end":482,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60552,"byte_end":60555,"line_start":483,"line_end":483,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60560,"byte_end":60567,"line_start":484,"line_end":484,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60572,"byte_end":60609,"line_start":485,"line_end":485,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60614,"byte_end":60638,"line_start":486,"line_end":486,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60643,"byte_end":60646,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60651,"byte_end":60691,"line_start":488,"line_end":488,"column_start":5,"column_end":45}},{"value":"/     assert!(x.signum() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60696,"byte_end":60729,"line_start":489,"line_end":489,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60734,"byte_end":60739,"line_start":490,"line_end":490,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60744,"byte_end":60747,"line_start":491,"line_end":491,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60752,"byte_end":60782,"line_start":492,"line_end":492,"column_start":5,"column_end":35}},{"value":"/ check(3.0f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60787,"byte_end":60810,"line_start":493,"line_end":493,"column_start":5,"column_end":28}},{"value":"/ check(0.0f32, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60815,"byte_end":60838,"line_start":494,"line_end":494,"column_start":5,"column_end":28}},{"value":"/ check(-0.0f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60843,"byte_end":60868,"line_start":495,"line_end":495,"column_start":5,"column_end":30}},{"value":"/ check(-3.0f64, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60873,"byte_end":60898,"line_start":496,"line_end":496,"column_start":5,"column_end":30}},{"value":"/ check(f64::MIN, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60903,"byte_end":60929,"line_start":497,"line_end":497,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60934,"byte_end":60941,"line_start":498,"line_end":498,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":60946,"byte_end":60955,"line_start":499,"line_end":499,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":213},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61831,"byte_end":61847,"line_start":533,"line_end":533,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"pub fn is_sign_positive(Self) -> bool","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is positive, including `+0.0` and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61168,"byte_end":61230,"line_start":510,"line_end":510,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::infinity()`, and since Rust 1.20 also","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61235,"byte_end":61288,"line_start":511,"line_end":511,"column_start":5,"column_end":58}},{"value":"/ `FloatCore::nan()`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61293,"byte_end":61316,"line_start":512,"line_end":512,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61321,"byte_end":61324,"line_start":513,"line_end":513,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61329,"byte_end":61343,"line_start":514,"line_end":514,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61348,"byte_end":61351,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61356,"byte_end":61363,"line_start":516,"line_end":516,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61368,"byte_end":61405,"line_start":517,"line_end":517,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61410,"byte_end":61434,"line_start":518,"line_end":518,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61439,"byte_end":61442,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61447,"byte_end":61490,"line_start":520,"line_end":520,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_positive() == p);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61495,"byte_end":61538,"line_start":521,"line_end":521,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61543,"byte_end":61548,"line_start":522,"line_end":522,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61553,"byte_end":61556,"line_start":523,"line_end":523,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61561,"byte_end":61592,"line_start":524,"line_end":524,"column_start":5,"column_end":36}},{"value":"/ check(f32::MAX, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61597,"byte_end":61623,"line_start":525,"line_end":525,"column_start":5,"column_end":31}},{"value":"/ check(0.0f32, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61628,"byte_end":61652,"line_start":526,"line_end":526,"column_start":5,"column_end":29}},{"value":"/ check(-0.0f64, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61657,"byte_end":61683,"line_start":527,"line_end":527,"column_start":5,"column_end":31}},{"value":"/ check(f64::NEG_INFINITY, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61688,"byte_end":61724,"line_start":528,"line_end":528,"column_start":5,"column_end":41}},{"value":"/ check(f64::MIN_POSITIVE, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61729,"byte_end":61764,"line_start":529,"line_end":529,"column_start":5,"column_end":40}},{"value":"/ check(-f64::NAN, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61769,"byte_end":61797,"line_start":530,"line_end":530,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61802,"byte_end":61809,"line_start":531,"line_end":531,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61814,"byte_end":61823,"line_start":532,"line_end":532,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":214},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62577,"byte_end":62593,"line_start":560,"line_end":560,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"pub fn is_sign_negative(Self) -> bool","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is negative, including `-0.0` and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61908,"byte_end":61970,"line_start":537,"line_end":537,"column_start":5,"column_end":67}},{"value":"/ `FloatCore::neg_infinity()`, and since Rust 1.20 also","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":61975,"byte_end":62032,"line_start":538,"line_end":538,"column_start":5,"column_end":62}},{"value":"/ `-FloatCore::nan()`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62037,"byte_end":62061,"line_start":539,"line_end":539,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62066,"byte_end":62069,"line_start":540,"line_end":540,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62074,"byte_end":62088,"line_start":541,"line_end":541,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62093,"byte_end":62096,"line_start":542,"line_end":542,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62101,"byte_end":62108,"line_start":543,"line_end":543,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62113,"byte_end":62150,"line_start":544,"line_end":544,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62155,"byte_end":62179,"line_start":545,"line_end":545,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62184,"byte_end":62187,"line_start":546,"line_end":546,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, p: bool) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62192,"byte_end":62235,"line_start":547,"line_end":547,"column_start":5,"column_end":48}},{"value":"/     assert!(x.is_sign_negative() == p);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62240,"byte_end":62283,"line_start":548,"line_end":548,"column_start":5,"column_end":48}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62288,"byte_end":62293,"line_start":549,"line_end":549,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62298,"byte_end":62301,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62306,"byte_end":62338,"line_start":551,"line_end":551,"column_start":5,"column_end":37}},{"value":"/ check(f32::MAX, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62343,"byte_end":62370,"line_start":552,"line_end":552,"column_start":5,"column_end":32}},{"value":"/ check(0.0f32, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62375,"byte_end":62400,"line_start":553,"line_end":553,"column_start":5,"column_end":30}},{"value":"/ check(-0.0f64, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62405,"byte_end":62430,"line_start":554,"line_end":554,"column_start":5,"column_end":30}},{"value":"/ check(f64::NEG_INFINITY, true);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62435,"byte_end":62470,"line_start":555,"line_end":555,"column_start":5,"column_end":40}},{"value":"/ check(f64::MIN_POSITIVE, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62475,"byte_end":62511,"line_start":556,"line_end":556,"column_start":5,"column_end":41}},{"value":"/ check(f64::NAN, false);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62516,"byte_end":62543,"line_start":557,"line_end":557,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62548,"byte_end":62555,"line_start":558,"line_end":558,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62560,"byte_end":62569,"line_start":559,"line_end":559,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":215},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63226,"byte_end":63229,"line_start":585,"line_end":585,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"pub fn min(Self, Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the minimum of the two numbers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62688,"byte_end":62731,"line_start":565,"line_end":565,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62736,"byte_end":62739,"line_start":566,"line_end":566,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62744,"byte_end":62816,"line_start":567,"line_end":567,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62821,"byte_end":62824,"line_start":568,"line_end":568,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62829,"byte_end":62843,"line_start":569,"line_end":569,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62848,"byte_end":62851,"line_start":570,"line_end":570,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62856,"byte_end":62863,"line_start":571,"line_end":571,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62868,"byte_end":62905,"line_start":572,"line_end":572,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62910,"byte_end":62934,"line_start":573,"line_end":573,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62939,"byte_end":62942,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, min: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":62947,"byte_end":62995,"line_start":575,"line_end":575,"column_start":5,"column_end":53}},{"value":"/     assert!(x.min(y) == min);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63000,"byte_end":63033,"line_start":576,"line_end":576,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63038,"byte_end":63043,"line_start":577,"line_end":577,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63048,"byte_end":63051,"line_start":578,"line_end":578,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63056,"byte_end":63084,"line_start":579,"line_end":579,"column_start":5,"column_end":33}},{"value":"/ check(f32::NAN, 2.0, 2.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63089,"byte_end":63119,"line_start":580,"line_end":580,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, -2.0, -2.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63124,"byte_end":63154,"line_start":581,"line_end":581,"column_start":5,"column_end":35}},{"value":"/ check(1.0f64, f64::NAN, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63159,"byte_end":63192,"line_start":582,"line_end":582,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63197,"byte_end":63204,"line_start":583,"line_end":583,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63209,"byte_end":63218,"line_start":584,"line_end":584,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":216},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64026,"byte_end":64029,"line_start":619,"line_end":619,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"pub fn max(Self, Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"/ Returns the maximum of the two numbers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63484,"byte_end":63527,"line_start":599,"line_end":599,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63532,"byte_end":63535,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ If one of the arguments is NaN, then the other argument is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63540,"byte_end":63612,"line_start":601,"line_end":601,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63617,"byte_end":63620,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63625,"byte_end":63639,"line_start":603,"line_end":603,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63644,"byte_end":63647,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63652,"byte_end":63659,"line_start":605,"line_end":605,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63664,"byte_end":63701,"line_start":606,"line_end":606,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63706,"byte_end":63730,"line_start":607,"line_end":607,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63735,"byte_end":63738,"line_start":608,"line_end":608,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T, min: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63743,"byte_end":63791,"line_start":609,"line_end":609,"column_start":5,"column_end":53}},{"value":"/     assert!(x.max(y) == min);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63796,"byte_end":63829,"line_start":610,"line_end":610,"column_start":5,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63834,"byte_end":63839,"line_start":611,"line_end":611,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63844,"byte_end":63847,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ check(1.0f32, 2.0, 2.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63852,"byte_end":63880,"line_start":613,"line_end":613,"column_start":5,"column_end":33}},{"value":"/ check(1.0f32, f32::NAN, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63885,"byte_end":63918,"line_start":614,"line_end":614,"column_start":5,"column_end":38}},{"value":"/ check(-1.0f64, 2.0, 2.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63923,"byte_end":63952,"line_start":615,"line_end":615,"column_start":5,"column_end":34}},{"value":"/ check(-1.0f64, f64::NAN, -1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63957,"byte_end":63992,"line_start":616,"line_end":616,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":63997,"byte_end":64004,"line_start":617,"line_end":617,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64009,"byte_end":64018,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":217},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64784,"byte_end":64789,"line_start":652,"line_end":652,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"pub fn recip(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"/ Returns the reciprocal (multiplicative inverse) of the number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64284,"byte_end":64350,"line_start":633,"line_end":633,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64355,"byte_end":64358,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64363,"byte_end":64377,"line_start":635,"line_end":635,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64382,"byte_end":64385,"line_start":636,"line_end":636,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64390,"byte_end":64397,"line_start":637,"line_end":637,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64402,"byte_end":64439,"line_start":638,"line_end":638,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64444,"byte_end":64468,"line_start":639,"line_end":639,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64473,"byte_end":64476,"line_start":640,"line_end":640,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, y: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64481,"byte_end":64521,"line_start":641,"line_end":641,"column_start":5,"column_end":45}},{"value":"/     assert!(x.recip() == y);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64526,"byte_end":64558,"line_start":642,"line_end":642,"column_start":5,"column_end":37}},{"value":"/     assert!(y.recip() == x);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64563,"byte_end":64595,"line_start":643,"line_end":643,"column_start":5,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64600,"byte_end":64605,"line_start":644,"line_end":644,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64610,"byte_end":64613,"line_start":645,"line_end":645,"column_start":5,"column_end":8}},{"value":"/ check(f32::INFINITY, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64618,"byte_end":64648,"line_start":646,"line_end":646,"column_start":5,"column_end":35}},{"value":"/ check(2.0f32, 0.5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64653,"byte_end":64676,"line_start":647,"line_end":647,"column_start":5,"column_end":28}},{"value":"/ check(-0.25f64, -4.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64681,"byte_end":64707,"line_start":648,"line_end":648,"column_start":5,"column_end":31}},{"value":"/ check(-0.0f64, f64::NEG_INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64712,"byte_end":64750,"line_start":649,"line_end":649,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64755,"byte_end":64762,"line_start":650,"line_end":650,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64767,"byte_end":64776,"line_start":651,"line_end":651,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":218},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65383,"byte_end":65387,"line_start":676,"line_end":676,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"pub fn powi(Self, i32) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"/ Raise a number to an integer power.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64844,"byte_end":64883,"line_start":656,"line_end":656,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64888,"byte_end":64891,"line_start":657,"line_end":657,"column_start":5,"column_end":8}},{"value":"/ Using this function is generally faster than using `powf`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64896,"byte_end":64957,"line_start":658,"line_end":658,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64962,"byte_end":64965,"line_start":659,"line_end":659,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64970,"byte_end":64984,"line_start":660,"line_end":660,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64989,"byte_end":64992,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":64997,"byte_end":65004,"line_start":662,"line_end":662,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65009,"byte_end":65046,"line_start":663,"line_end":663,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65051,"byte_end":65054,"line_start":664,"line_end":664,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, exp: i32, powi: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65059,"byte_end":65112,"line_start":665,"line_end":665,"column_start":5,"column_end":58}},{"value":"/     assert!(x.powi(exp) == powi);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65117,"byte_end":65154,"line_start":666,"line_end":666,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65159,"byte_end":65164,"line_start":667,"line_end":667,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65169,"byte_end":65172,"line_start":668,"line_end":668,"column_start":5,"column_end":8}},{"value":"/ check(9.0f32, 2, 81.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65177,"byte_end":65204,"line_start":669,"line_end":669,"column_start":5,"column_end":32}},{"value":"/ check(1.0f32, -2, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65209,"byte_end":65236,"line_start":670,"line_end":670,"column_start":5,"column_end":32}},{"value":"/ check(10.0f64, 20, 1e20);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65241,"byte_end":65270,"line_start":671,"line_end":671,"column_start":5,"column_end":34}},{"value":"/ check(4.0f64, -2, 0.0625);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65275,"byte_end":65305,"line_start":672,"line_end":672,"column_start":5,"column_end":35}},{"value":"/ check(-1.0f64, std::i32::MIN, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65310,"byte_end":65349,"line_start":673,"line_end":673,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65354,"byte_end":65361,"line_start":674,"line_end":674,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65366,"byte_end":65375,"line_start":675,"line_end":675,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":219},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66304,"byte_end":66314,"line_start":704,"line_end":704,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"pub fn to_degrees(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[{"value":"/ Converts to degrees, assuming the number is in radians.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65829,"byte_end":65888,"line_start":687,"line_end":687,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65893,"byte_end":65896,"line_start":688,"line_end":688,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65901,"byte_end":65915,"line_start":689,"line_end":689,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65920,"byte_end":65923,"line_start":690,"line_end":690,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65928,"byte_end":65935,"line_start":691,"line_end":691,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65940,"byte_end":65977,"line_start":692,"line_end":692,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":65982,"byte_end":66006,"line_start":693,"line_end":693,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66011,"byte_end":66014,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(rad: T, deg: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66019,"byte_end":66063,"line_start":695,"line_end":695,"column_start":5,"column_end":49}},{"value":"/     assert!(rad.to_degrees() == deg);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66068,"byte_end":66109,"line_start":696,"line_end":696,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66114,"byte_end":66119,"line_start":697,"line_end":697,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66124,"byte_end":66127,"line_start":698,"line_end":698,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66132,"byte_end":66155,"line_start":699,"line_end":699,"column_start":5,"column_end":28}},{"value":"/ check(f32::consts::PI, 180.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66160,"byte_end":66194,"line_start":700,"line_end":700,"column_start":5,"column_end":39}},{"value":"/ check(f64::consts::FRAC_PI_4, 45.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66199,"byte_end":66239,"line_start":701,"line_end":701,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66244,"byte_end":66284,"line_start":702,"line_end":702,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66289,"byte_end":66296,"line_start":703,"line_end":703,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66810,"byte_end":66820,"line_start":723,"line_end":723,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"pub fn to_radians(Self) -> Self","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[{"value":"/ Converts to radians, assuming the number is in degrees.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66335,"byte_end":66394,"line_start":706,"line_end":706,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66399,"byte_end":66402,"line_start":707,"line_end":707,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66407,"byte_end":66421,"line_start":708,"line_end":708,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66426,"byte_end":66429,"line_start":709,"line_end":709,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66434,"byte_end":66441,"line_start":710,"line_end":710,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66446,"byte_end":66483,"line_start":711,"line_end":711,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66488,"byte_end":66512,"line_start":712,"line_end":712,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66517,"byte_end":66520,"line_start":713,"line_end":713,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(deg: T, rad: T) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66525,"byte_end":66569,"line_start":714,"line_end":714,"column_start":5,"column_end":49}},{"value":"/     assert!(deg.to_radians() == rad);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66574,"byte_end":66615,"line_start":715,"line_end":715,"column_start":5,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66620,"byte_end":66625,"line_start":716,"line_end":716,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66630,"byte_end":66633,"line_start":717,"line_end":717,"column_start":5,"column_end":8}},{"value":"/ check(0.0f32, 0.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66638,"byte_end":66661,"line_start":718,"line_end":718,"column_start":5,"column_end":28}},{"value":"/ check(180.0, f32::consts::PI);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66666,"byte_end":66700,"line_start":719,"line_end":719,"column_start":5,"column_end":39}},{"value":"/ check(45.0, f64::consts::FRAC_PI_4);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66705,"byte_end":66745,"line_start":720,"line_end":720,"column_start":5,"column_end":45}},{"value":"/ check(f64::INFINITY, f64::INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66750,"byte_end":66790,"line_start":721,"line_end":721,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66795,"byte_end":66802,"line_start":722,"line_end":722,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":221},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67579,"byte_end":67593,"line_start":746,"line_end":746,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"pub fn integer_decode(Self) -> (u64, i16, i8)","parent":{"krate":0,"index":192},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[{"value":"/ Returns the mantissa, base 2 exponent, and sign as integers, respectively.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66841,"byte_end":66919,"line_start":725,"line_end":725,"column_start":5,"column_end":83}},{"value":"/ The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":66924,"byte_end":67001,"line_start":726,"line_end":726,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67006,"byte_end":67009,"line_start":727,"line_end":727,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67014,"byte_end":67028,"line_start":728,"line_end":728,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67033,"byte_end":67036,"line_start":729,"line_end":729,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67041,"byte_end":67048,"line_start":730,"line_end":730,"column_start":5,"column_end":12}},{"value":"/ use num_traits::float::FloatCore;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67053,"byte_end":67090,"line_start":731,"line_end":731,"column_start":5,"column_end":42}},{"value":"/ use std::{f32, f64};","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67095,"byte_end":67119,"line_start":732,"line_end":732,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67124,"byte_end":67127,"line_start":733,"line_end":733,"column_start":5,"column_end":8}},{"value":"/ fn check<T: FloatCore>(x: T, m: u64, e: i16, s:i8) {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67132,"byte_end":67188,"line_start":734,"line_end":734,"column_start":5,"column_end":61}},{"value":"/     let (mantissa, exponent, sign) = x.integer_decode();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67193,"byte_end":67253,"line_start":735,"line_end":735,"column_start":5,"column_end":65}},{"value":"/     assert_eq!(mantissa, m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67258,"byte_end":67290,"line_start":736,"line_end":736,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(exponent, e);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67295,"byte_end":67327,"line_start":737,"line_end":737,"column_start":5,"column_end":37}},{"value":"/     assert_eq!(sign, s);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67332,"byte_end":67360,"line_start":738,"line_end":738,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67365,"byte_end":67370,"line_start":739,"line_end":739,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67375,"byte_end":67378,"line_start":740,"line_end":740,"column_start":5,"column_end":8}},{"value":"/ check(2.0f32, 1 << 23, -22, 1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67383,"byte_end":67418,"line_start":741,"line_end":741,"column_start":5,"column_end":40}},{"value":"/ check(-2.0f32, 1 << 23, -22, -1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67423,"byte_end":67460,"line_start":742,"line_end":742,"column_start":5,"column_end":42}},{"value":"/ check(f32::INFINITY, 1 << 23, 105, 1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67465,"byte_end":67507,"line_start":743,"line_end":743,"column_start":5,"column_end":47}},{"value":"/ check(f64::NEG_INFINITY, 1 << 52, 972, -1);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67512,"byte_end":67559,"line_start":744,"line_end":744,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":67564,"byte_end":67571,"line_start":745,"line_end":745,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1832},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":107733,"byte_end":107734,"line_start":2271,"line_end":2271,"column_start":5,"column_end":6},"name":"E","qualname":"::float::FloatConst::E","value":"pub fn E() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return Euler’s number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":107774,"byte_end":107783,"line_start":2273,"line_end":2273,"column_start":5,"column_end":14},"name":"FRAC_1_PI","qualname":"::float::FloatConst::FRAC_1_PI","value":"pub fn FRAC_1_PI() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `1.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":107830,"byte_end":107843,"line_start":2275,"line_end":2275,"column_start":5,"column_end":18},"name":"FRAC_1_SQRT_2","qualname":"::float::FloatConst::FRAC_1_SQRT_2","value":"pub fn FRAC_1_SQRT_2() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `1.0 / sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":107883,"byte_end":107892,"line_start":2277,"line_end":2277,"column_start":5,"column_end":14},"name":"FRAC_2_PI","qualname":"::float::FloatConst::FRAC_2_PI","value":"pub fn FRAC_2_PI() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `2.0 / π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1836},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":107938,"byte_end":107952,"line_start":2279,"line_end":2279,"column_start":5,"column_end":19},"name":"FRAC_2_SQRT_PI","qualname":"::float::FloatConst::FRAC_2_SQRT_PI","value":"pub fn FRAC_2_SQRT_PI() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `2.0 / sqrt(π)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":107992,"byte_end":108001,"line_start":2281,"line_end":2281,"column_start":5,"column_end":14},"name":"FRAC_PI_2","qualname":"::float::FloatConst::FRAC_PI_2","value":"pub fn FRAC_PI_2() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `π / 2.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108041,"byte_end":108050,"line_start":2283,"line_end":2283,"column_start":5,"column_end":14},"name":"FRAC_PI_3","qualname":"::float::FloatConst::FRAC_PI_3","value":"pub fn FRAC_PI_3() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `π / 3.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1839},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108090,"byte_end":108099,"line_start":2285,"line_end":2285,"column_start":5,"column_end":14},"name":"FRAC_PI_4","qualname":"::float::FloatConst::FRAC_PI_4","value":"pub fn FRAC_PI_4() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `π / 4.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1840},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108139,"byte_end":108148,"line_start":2287,"line_end":2287,"column_start":5,"column_end":14},"name":"FRAC_PI_6","qualname":"::float::FloatConst::FRAC_PI_6","value":"pub fn FRAC_PI_6() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `π / 6.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108188,"byte_end":108197,"line_start":2289,"line_end":2289,"column_start":5,"column_end":14},"name":"FRAC_PI_8","qualname":"::float::FloatConst::FRAC_PI_8","value":"pub fn FRAC_PI_8() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `π / 8.0`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1842},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108237,"byte_end":108242,"line_start":2291,"line_end":2291,"column_start":5,"column_end":10},"name":"LN_10","qualname":"::float::FloatConst::LN_10","value":"pub fn LN_10() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `ln(10.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108281,"byte_end":108285,"line_start":2293,"line_end":2293,"column_start":5,"column_end":9},"name":"LN_2","qualname":"::float::FloatConst::LN_2","value":"pub fn LN_2() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `ln(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1844},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108325,"byte_end":108332,"line_start":2295,"line_end":2295,"column_start":5,"column_end":12},"name":"LOG10_E","qualname":"::float::FloatConst::LOG10_E","value":"pub fn LOG10_E() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `log10(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1845},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108371,"byte_end":108377,"line_start":2297,"line_end":2297,"column_start":5,"column_end":11},"name":"LOG2_E","qualname":"::float::FloatConst::LOG2_E","value":"pub fn LOG2_E() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `log2(e)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1846},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108434,"byte_end":108436,"line_start":2299,"line_end":2299,"column_start":5,"column_end":7},"name":"PI","qualname":"::float::FloatConst::PI","value":"pub fn PI() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return Archimedes’ constant `π`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1847},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":108477,"byte_end":108483,"line_start":2301,"line_end":2301,"column_start":5,"column_end":11},"name":"SQRT_2","qualname":"::float::FloatConst::SQRT_2","value":"pub fn SQRT_2() -> Self","parent":{"krate":0,"index":1831},"children":[],"decl_id":null,"docs":"Return `sqrt(2.0)`.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":240},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":4026},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":1885},{"krate":0,"index":1888},{"krate":0,"index":1891},{"krate":0,"index":1894},{"krate":0,"index":1897},{"krate":0,"index":1900},{"krate":0,"index":1903},{"krate":0,"index":1906},{"krate":0,"index":1909},{"krate":0,"index":1912},{"krate":0,"index":1915},{"krate":0,"index":1918},{"krate":0,"index":1921},{"krate":0,"index":1924},{"krate":0,"index":250},{"krate":0,"index":255},{"krate":0,"index":1927},{"krate":0,"index":1930},{"krate":0,"index":1933},{"krate":0,"index":1936},{"krate":0,"index":1939},{"krate":0,"index":1942},{"krate":0,"index":1945},{"krate":0,"index":1948},{"krate":0,"index":1951},{"krate":0,"index":1954},{"krate":0,"index":1957},{"krate":0,"index":1960},{"krate":0,"index":1963},{"krate":0,"index":1966},{"krate":0,"index":260},{"krate":0,"index":264},{"krate":0,"index":266}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":245},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110390,"byte_end":110394,"line_start":12,"line_end":12,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":248}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines an additive identity element for `Self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110215,"byte_end":110267,"line_start":4,"line_end":4,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110268,"byte_end":110271,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110272,"byte_end":110282,"line_start":6,"line_end":6,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110283,"byte_end":110286,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110287,"byte_end":110301,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/ a + 0 = a       ∀ a ∈ Self","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110302,"byte_end":110336,"line_start":9,"line_end":9,"column_start":1,"column_end":31}},{"value":"/ 0 + a = a       ∀ a ∈ Self","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110337,"byte_end":110371,"line_start":10,"line_end":10,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110372,"byte_end":110379,"line_start":11,"line_end":11,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":246},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110764,"byte_end":110768,"line_start":20,"line_end":20,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"pub fn zero() -> Self","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.\n # Purity","sig":null,"attributes":[{"value":"/ Returns the additive identity element of `Self`, `0`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110435,"byte_end":110492,"line_start":13,"line_end":13,"column_start":5,"column_end":62}},{"value":"/ # Purity","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110497,"byte_end":110509,"line_start":14,"line_end":14,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110514,"byte_end":110517,"line_start":15,"line_end":15,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110522,"byte_end":110596,"line_start":16,"line_end":16,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110601,"byte_end":110667,"line_start":17,"line_end":17,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110672,"byte_end":110690,"line_start":18,"line_end":18,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":247},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110857,"byte_end":110865,"line_start":23,"line_end":23,"column_start":8,"column_end":16},"name":"set_zero","qualname":"::identities::Zero::set_zero","value":"pub fn set_zero(&mut Self)","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Sets `self` to the additive identity element of `Self`, `0`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the additive identity element of `Self`, `0`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110785,"byte_end":110849,"line_start":22,"line_end":22,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110991,"byte_end":110998,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"pub fn is_zero(&Self) -> bool","parent":{"krate":0,"index":245},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the additive identity.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110920,"byte_end":110983,"line_start":27,"line_end":27,"column_start":5,"column_end":68}}]},{"kind":"Trait","id":{"krate":0,"index":255},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112085,"byte_end":112088,"line_start":90,"line_end":90,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.","sig":null,"attributes":[{"value":"/ Defines a multiplicative identity element for `Self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111905,"byte_end":111962,"line_start":82,"line_end":82,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111963,"byte_end":111966,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ # Laws","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111967,"byte_end":111977,"line_start":84,"line_end":84,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111978,"byte_end":111981,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ ```{.text}","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111982,"byte_end":111996,"line_start":86,"line_end":86,"column_start":1,"column_end":15}},{"value":"/ a * 1 = a       ∀ a ∈ Self","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111997,"byte_end":112031,"line_start":87,"line_end":87,"column_start":1,"column_end":31}},{"value":"/ 1 * a = a       ∀ a ∈ Self","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112032,"byte_end":112066,"line_start":88,"line_end":88,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112067,"byte_end":112074,"line_start":89,"line_end":89,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112472,"byte_end":112475,"line_start":99,"line_end":99,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"pub fn one() -> Self","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity element of `Self`, `1`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112129,"byte_end":112192,"line_start":91,"line_end":91,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112197,"byte_end":112200,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ # Purity","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112205,"byte_end":112217,"line_start":93,"line_end":93,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112222,"byte_end":112225,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ This function should return the same result at all times regardless of","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112230,"byte_end":112304,"line_start":95,"line_end":95,"column_start":5,"column_end":79}},{"value":"/ external mutable state, for example values stored in TLS or in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112309,"byte_end":112375,"line_start":96,"line_end":96,"column_start":5,"column_end":71}},{"value":"/ `static mut`s.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112380,"byte_end":112398,"line_start":97,"line_end":97,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":257},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112570,"byte_end":112577,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"set_one","qualname":"::identities::One::set_one","value":"pub fn set_one(&mut Self)","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Sets `self` to the multiplicative identity element of `Self`, `1`.\n","sig":null,"attributes":[{"value":"/ Sets `self` to the multiplicative identity element of `Self`, `1`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112492,"byte_end":112562,"line_start":101,"line_end":101,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112922,"byte_end":112928,"line_start":112,"line_end":112,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"pub fn is_one(&Self) -> bool where Self: PartialEq","parent":{"krate":0,"index":255},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` is equal to the multiplicative identity.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112630,"byte_end":112699,"line_start":106,"line_end":106,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112704,"byte_end":112707,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ For performance reasons, it's best to implement this manually.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112712,"byte_end":112778,"line_start":108,"line_end":108,"column_start":5,"column_end":71}},{"value":"/ After a semver bump, this method will be required, and the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112783,"byte_end":112845,"line_start":109,"line_end":109,"column_start":5,"column_end":67}},{"value":"/ `where Self: PartialEq` bound will be removed.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112850,"byte_end":112900,"line_start":110,"line_end":110,"column_start":5,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112905,"byte_end":112914,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":264},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":113951,"byte_end":113955,"line_start":171,"line_end":171,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::zero","value":"pub fn zero<T: Zero>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"/ Returns the additive identity, `0`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":113886,"byte_end":113925,"line_start":169,"line_end":169,"column_start":1,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":113926,"byte_end":113943,"line_start":170,"line_end":170,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":266},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":114065,"byte_end":114068,"line_start":177,"line_end":177,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::one","value":"pub fn one<T: One>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"/ Returns the multiplicative identity, `1`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":113994,"byte_end":114039,"line_start":175,"line_end":175,"column_start":1,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":114040,"byte_end":114057,"line_start":176,"line_end":176,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":268},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":270},{"krate":0,"index":271},{"krate":0,"index":272},{"krate":0,"index":273},{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277},{"krate":0,"index":278},{"krate":0,"index":279},{"krate":0,"index":280},{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":1969},{"krate":0,"index":1986},{"krate":0,"index":2003},{"krate":0,"index":2020},{"krate":0,"index":2037},{"krate":0,"index":2054},{"krate":0,"index":2071},{"krate":0,"index":2088},{"krate":0,"index":2105},{"krate":0,"index":2122},{"krate":0,"index":2139},{"krate":0,"index":2156}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":282},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116640,"byte_end":116647,"line_start":34,"line_end":34,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284},{"krate":0,"index":285},{"krate":0,"index":286},{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291},{"krate":0,"index":292},{"krate":0,"index":293},{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"decl_id":null,"docs":" Generic trait for primitive integers.","sig":null,"attributes":[{"value":"/ Generic trait for primitive integers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":114984,"byte_end":115025,"line_start":8,"line_end":8,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115026,"byte_end":115029,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ The `PrimInt` trait is an abstraction over the builtin primitive integer types (e.g., `u8`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115030,"byte_end":115125,"line_start":10,"line_end":10,"column_start":1,"column_end":96}},{"value":"/ `u32`, `isize`, `i128`, ...). It inherits the basic numeric traits and extends them with","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115126,"byte_end":115218,"line_start":11,"line_end":11,"column_start":1,"column_end":93}},{"value":"/ bitwise operators and non-wrapping arithmetic.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115219,"byte_end":115269,"line_start":12,"line_end":12,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115270,"byte_end":115273,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ The trait explicitly inherits `Copy`, `Eq`, `Ord`, and `Sized`. The intention is that all","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115274,"byte_end":115367,"line_start":14,"line_end":14,"column_start":1,"column_end":94}},{"value":"/ types implementing this trait behave like primitive types that are passed by value by default","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115368,"byte_end":115465,"line_start":15,"line_end":15,"column_start":1,"column_end":98}},{"value":"/ and behave like builtin integers. Furthermore, the types are expected to expose the integer","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115466,"byte_end":115561,"line_start":16,"line_end":16,"column_start":1,"column_end":96}},{"value":"/ value in binary representation and support bitwise operators. The standard bitwise operations","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115562,"byte_end":115659,"line_start":17,"line_end":17,"column_start":1,"column_end":98}},{"value":"/ (e.g., bitwise-and, bitwise-or, right-shift, left-shift) are inherited and the trait extends","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115660,"byte_end":115756,"line_start":18,"line_end":18,"column_start":1,"column_end":97}},{"value":"/ these with introspective queries (e.g., `PrimInt::count_ones()`, `PrimInt::leading_zeros()`),","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115757,"byte_end":115854,"line_start":19,"line_end":19,"column_start":1,"column_end":98}},{"value":"/ bitwise combinators (e.g., `PrimInt::rotate_left()`), and endianness converters (e.g.,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115855,"byte_end":115945,"line_start":20,"line_end":20,"column_start":1,"column_end":91}},{"value":"/ `PrimInt::to_be()`).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115946,"byte_end":115970,"line_start":21,"line_end":21,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115971,"byte_end":115974,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ All `PrimInt` types are expected to be fixed-width binary integers. The width can be queried","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":115975,"byte_end":116071,"line_start":23,"line_end":23,"column_start":1,"column_end":97}},{"value":"/ via `T::zero().count_zeros()`. The trait currently lacks a way to query the width at","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116072,"byte_end":116160,"line_start":24,"line_end":24,"column_start":1,"column_end":89}},{"value":"/ compile-time.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116161,"byte_end":116178,"line_start":25,"line_end":25,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116179,"byte_end":116182,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ While a default implementation for all builtin primitive integers is provided, the trait is in","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116183,"byte_end":116281,"line_start":27,"line_end":27,"column_start":1,"column_end":99}},{"value":"/ no way restricted to these. Other integer types that fulfil the requirements are free to","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116282,"byte_end":116374,"line_start":28,"line_end":28,"column_start":1,"column_end":93}},{"value":"/ implement the trait was well.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116375,"byte_end":116408,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116409,"byte_end":116412,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ This trait and many of the method names originate in the unstable `core::num::Int` trait from","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116413,"byte_end":116510,"line_start":31,"line_end":31,"column_start":1,"column_end":98}},{"value":"/ the rust standard library. The original trait was never stabilized and thus removed from the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116511,"byte_end":116607,"line_start":32,"line_end":32,"column_start":1,"column_end":97}},{"value":"/ standard library.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116608,"byte_end":116629,"line_start":33,"line_end":33,"column_start":1,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":283},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117322,"byte_end":117332,"line_start":66,"line_end":66,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"pub fn count_ones(Self) -> u32","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of ones in the binary representation of `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117067,"byte_end":117137,"line_start":55,"line_end":55,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117142,"byte_end":117145,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117150,"byte_end":117164,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117169,"byte_end":117172,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117177,"byte_end":117184,"line_start":59,"line_end":59,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117189,"byte_end":117217,"line_start":60,"line_end":60,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117222,"byte_end":117225,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117230,"byte_end":117255,"line_start":62,"line_end":62,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117260,"byte_end":117263,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_ones(), 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117268,"byte_end":117302,"line_start":64,"line_end":64,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117307,"byte_end":117314,"line_start":65,"line_end":65,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117609,"byte_end":117620,"line_start":79,"line_end":79,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"pub fn count_zeros(Self) -> u32","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of zeros in the binary representation of `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117352,"byte_end":117423,"line_start":68,"line_end":68,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117428,"byte_end":117431,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117436,"byte_end":117450,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117455,"byte_end":117458,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117463,"byte_end":117470,"line_start":72,"line_end":72,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117475,"byte_end":117503,"line_start":73,"line_end":73,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117508,"byte_end":117511,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let n = 0b01001100u8;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117516,"byte_end":117541,"line_start":75,"line_end":75,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117546,"byte_end":117549,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.count_zeros(), 5);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117554,"byte_end":117589,"line_start":77,"line_end":77,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117594,"byte_end":117601,"line_start":78,"line_end":78,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":285},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117916,"byte_end":117929,"line_start":93,"line_end":93,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"pub fn leading_zeros(Self) -> u32","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of leading zeros in the binary representation","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117640,"byte_end":117708,"line_start":81,"line_end":81,"column_start":5,"column_end":73}},{"value":"/ of `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117713,"byte_end":117727,"line_start":82,"line_end":82,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117732,"byte_end":117735,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117740,"byte_end":117754,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117759,"byte_end":117762,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117767,"byte_end":117774,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117779,"byte_end":117807,"line_start":87,"line_end":87,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117812,"byte_end":117815,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117820,"byte_end":117845,"line_start":89,"line_end":89,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117850,"byte_end":117853,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.leading_zeros(), 10);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117858,"byte_end":117896,"line_start":91,"line_end":91,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117901,"byte_end":117908,"line_start":92,"line_end":92,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118226,"byte_end":118240,"line_start":107,"line_end":107,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"pub fn trailing_zeros(Self) -> u32","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[{"value":"/ Returns the number of trailing zeros in the binary representation","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117949,"byte_end":118018,"line_start":95,"line_end":95,"column_start":5,"column_end":74}},{"value":"/ of `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118023,"byte_end":118037,"line_start":96,"line_end":96,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118042,"byte_end":118045,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118050,"byte_end":118064,"line_start":98,"line_end":98,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118069,"byte_end":118072,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118077,"byte_end":118084,"line_start":100,"line_end":100,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118089,"byte_end":118117,"line_start":101,"line_end":101,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118122,"byte_end":118125,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ let n = 0b0101000u16;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118130,"byte_end":118155,"line_start":103,"line_end":103,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118160,"byte_end":118163,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.trailing_zeros(), 3);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118168,"byte_end":118206,"line_start":105,"line_end":105,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118211,"byte_end":118218,"line_start":106,"line_end":106,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118635,"byte_end":118646,"line_start":122,"line_end":122,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"pub fn rotate_left(Self, u32) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount amount, `n`, wrapping","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118260,"byte_end":118335,"line_start":109,"line_end":109,"column_start":5,"column_end":80}},{"value":"/ the truncated bits to the end of the resulting integer.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118340,"byte_end":118399,"line_start":110,"line_end":110,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118404,"byte_end":118407,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118412,"byte_end":118426,"line_start":112,"line_end":112,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118431,"byte_end":118434,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118439,"byte_end":118446,"line_start":114,"line_end":114,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118451,"byte_end":118479,"line_start":115,"line_end":115,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118484,"byte_end":118487,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118492,"byte_end":118526,"line_start":117,"line_end":117,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF012u64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118531,"byte_end":118565,"line_start":118,"line_end":118,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118570,"byte_end":118573,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_left(12), m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118578,"byte_end":118615,"line_start":120,"line_end":120,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118620,"byte_end":118627,"line_start":121,"line_end":121,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119058,"byte_end":119070,"line_start":137,"line_end":137,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"pub fn rotate_right(Self, u32) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount amount, `n`, wrapping","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118675,"byte_end":118751,"line_start":124,"line_end":124,"column_start":5,"column_end":81}},{"value":"/ the truncated bits to the beginning of the resulting integer.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118756,"byte_end":118821,"line_start":125,"line_end":125,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118826,"byte_end":118829,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118834,"byte_end":118848,"line_start":127,"line_end":127,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118853,"byte_end":118856,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118861,"byte_end":118868,"line_start":129,"line_end":129,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118873,"byte_end":118901,"line_start":130,"line_end":130,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118906,"byte_end":118909,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118914,"byte_end":118948,"line_start":132,"line_end":132,"column_start":5,"column_end":39}},{"value":"/ let m = 0xDEF0123456789ABCu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118953,"byte_end":118987,"line_start":133,"line_end":133,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":118992,"byte_end":118995,"line_start":134,"line_end":134,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.rotate_right(12), m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119000,"byte_end":119038,"line_start":135,"line_end":135,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119043,"byte_end":119050,"line_start":136,"line_end":136,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":289},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119513,"byte_end":119523,"line_start":154,"line_end":154,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"pub fn signed_shl(Self, u32) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount amount, `n`, filling","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119099,"byte_end":119173,"line_start":139,"line_end":139,"column_start":5,"column_end":79}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119178,"byte_end":119218,"line_start":140,"line_end":140,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119223,"byte_end":119226,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shl`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119231,"byte_end":119278,"line_start":142,"line_end":142,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119283,"byte_end":119286,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119291,"byte_end":119305,"line_start":144,"line_end":144,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119310,"byte_end":119313,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119318,"byte_end":119325,"line_start":146,"line_end":146,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119330,"byte_end":119358,"line_start":147,"line_end":147,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119363,"byte_end":119366,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119371,"byte_end":119405,"line_start":149,"line_end":149,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000u64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119410,"byte_end":119444,"line_start":150,"line_end":150,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119449,"byte_end":119452,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shl(12), m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119457,"byte_end":119493,"line_start":152,"line_end":152,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119498,"byte_end":119505,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":290},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119999,"byte_end":120009,"line_start":171,"line_end":171,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"pub fn signed_shr(Self, u32) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount amount, `n`, copying","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119552,"byte_end":119627,"line_start":156,"line_end":156,"column_start":5,"column_end":80}},{"value":"/ the \"sign bit\" in the most significant bits even for unsigned types.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119632,"byte_end":119704,"line_start":157,"line_end":157,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119709,"byte_end":119712,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to signed `Shr`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119717,"byte_end":119764,"line_start":159,"line_end":159,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119769,"byte_end":119772,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119777,"byte_end":119791,"line_start":161,"line_end":161,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119796,"byte_end":119799,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119804,"byte_end":119811,"line_start":163,"line_end":163,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119816,"byte_end":119844,"line_start":164,"line_end":164,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119849,"byte_end":119852,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let n = 0xFEDCBA9876543210u64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119857,"byte_end":119891,"line_start":166,"line_end":166,"column_start":5,"column_end":39}},{"value":"/ let m = 0xFFFFEDCBA9876543u64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119896,"byte_end":119930,"line_start":167,"line_end":167,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119935,"byte_end":119938,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.signed_shr(12), m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119943,"byte_end":119979,"line_start":169,"line_end":169,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":119984,"byte_end":119991,"line_start":170,"line_end":170,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":291},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120456,"byte_end":120468,"line_start":188,"line_end":188,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"pub fn unsigned_shl(Self, u32) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the left by a specified amount amount, `n`, filling","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120038,"byte_end":120112,"line_start":173,"line_end":173,"column_start":5,"column_end":79}},{"value":"/ zeros in the least significant bits.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120117,"byte_end":120157,"line_start":174,"line_end":174,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120162,"byte_end":120165,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shl`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120170,"byte_end":120219,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120224,"byte_end":120227,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120232,"byte_end":120246,"line_start":178,"line_end":178,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120251,"byte_end":120254,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120259,"byte_end":120266,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120271,"byte_end":120299,"line_start":181,"line_end":181,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120304,"byte_end":120307,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFi64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120312,"byte_end":120346,"line_start":183,"line_end":183,"column_start":5,"column_end":39}},{"value":"/ let m = 0x3456789ABCDEF000i64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120351,"byte_end":120385,"line_start":184,"line_end":184,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120390,"byte_end":120393,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shl(12), m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120398,"byte_end":120436,"line_start":186,"line_end":186,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120441,"byte_end":120448,"line_start":187,"line_end":187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120908,"byte_end":120920,"line_start":205,"line_end":205,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"pub fn unsigned_shr(Self, u32) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[{"value":"/ Shifts the bits to the right by a specified amount amount, `n`, filling","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120497,"byte_end":120572,"line_start":190,"line_end":190,"column_start":5,"column_end":80}},{"value":"/ zeros in the most significant bits.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120577,"byte_end":120616,"line_start":191,"line_end":191,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120621,"byte_end":120624,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ This is bitwise equivalent to unsigned `Shr`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120629,"byte_end":120678,"line_start":193,"line_end":193,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120683,"byte_end":120686,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120691,"byte_end":120705,"line_start":195,"line_end":195,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120710,"byte_end":120713,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120718,"byte_end":120725,"line_start":197,"line_end":197,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120730,"byte_end":120758,"line_start":198,"line_end":198,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120763,"byte_end":120766,"line_start":199,"line_end":199,"column_start":5,"column_end":8}},{"value":"/ let n = -8i8; // 0b11111000","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120771,"byte_end":120802,"line_start":200,"line_end":200,"column_start":5,"column_end":36}},{"value":"/ let m = 62i8; // 0b00111110","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120807,"byte_end":120838,"line_start":201,"line_end":201,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120843,"byte_end":120846,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.unsigned_shr(2), m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120851,"byte_end":120888,"line_start":203,"line_end":203,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120893,"byte_end":120900,"line_start":204,"line_end":204,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":293},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121225,"byte_end":121235,"line_start":219,"line_end":219,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"pub fn swap_bytes(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[{"value":"/ Reverses the byte order of the integer.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120949,"byte_end":120992,"line_start":207,"line_end":207,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":120997,"byte_end":121000,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121005,"byte_end":121019,"line_start":209,"line_end":209,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121024,"byte_end":121027,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121032,"byte_end":121039,"line_start":211,"line_end":211,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121044,"byte_end":121072,"line_start":212,"line_end":212,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121077,"byte_end":121080,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121085,"byte_end":121119,"line_start":214,"line_end":214,"column_start":5,"column_end":39}},{"value":"/ let m = 0xEFCDAB8967452301u64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121124,"byte_end":121158,"line_start":215,"line_end":215,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121163,"byte_end":121166,"line_start":216,"line_end":216,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(n.swap_bytes(), m);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121171,"byte_end":121205,"line_start":217,"line_end":217,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121210,"byte_end":121217,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121731,"byte_end":121738,"line_start":238,"line_end":238,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"pub fn from_be(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from big endian to the target's endianness.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121256,"byte_end":121322,"line_start":221,"line_end":221,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121327,"byte_end":121330,"line_start":222,"line_end":222,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121335,"byte_end":121409,"line_start":223,"line_end":223,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121414,"byte_end":121417,"line_start":224,"line_end":224,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121422,"byte_end":121436,"line_start":225,"line_end":225,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121441,"byte_end":121444,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121449,"byte_end":121456,"line_start":227,"line_end":227,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121461,"byte_end":121489,"line_start":228,"line_end":228,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121494,"byte_end":121497,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121502,"byte_end":121536,"line_start":230,"line_end":230,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121541,"byte_end":121544,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121549,"byte_end":121585,"line_start":232,"line_end":232,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(u64::from_be(n), n)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121590,"byte_end":121628,"line_start":233,"line_end":233,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121633,"byte_end":121645,"line_start":234,"line_end":234,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_be(n), n.swap_bytes())","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121650,"byte_end":121701,"line_start":235,"line_end":235,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121706,"byte_end":121711,"line_start":236,"line_end":236,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121716,"byte_end":121723,"line_start":237,"line_end":237,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":295},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122243,"byte_end":122250,"line_start":257,"line_end":257,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"pub fn from_le(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[{"value":"/ Convert an integer from little endian to the target's endianness.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121762,"byte_end":121831,"line_start":240,"line_end":240,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121836,"byte_end":121839,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121844,"byte_end":121918,"line_start":242,"line_end":242,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121923,"byte_end":121926,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121931,"byte_end":121945,"line_start":244,"line_end":244,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121950,"byte_end":121953,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121958,"byte_end":121965,"line_start":246,"line_end":246,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":121970,"byte_end":121998,"line_start":247,"line_end":247,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122003,"byte_end":122006,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122011,"byte_end":122045,"line_start":249,"line_end":249,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122050,"byte_end":122053,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122058,"byte_end":122097,"line_start":251,"line_end":251,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(u64::from_le(n), n)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122102,"byte_end":122140,"line_start":252,"line_end":252,"column_start":5,"column_end":43}},{"value":"/ } else {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122145,"byte_end":122157,"line_start":253,"line_end":253,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(u64::from_le(n), n.swap_bytes())","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122162,"byte_end":122213,"line_start":254,"line_end":254,"column_start":5,"column_end":56}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122218,"byte_end":122223,"line_start":255,"line_end":255,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122228,"byte_end":122235,"line_start":256,"line_end":256,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122733,"byte_end":122738,"line_start":276,"line_end":276,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"pub fn to_be(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to big endian from the target's endianness.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122274,"byte_end":122336,"line_start":259,"line_end":259,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122341,"byte_end":122344,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ On big endian this is a no-op. On little endian the bytes are swapped.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122349,"byte_end":122423,"line_start":261,"line_end":261,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122428,"byte_end":122431,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122436,"byte_end":122450,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122455,"byte_end":122458,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122463,"byte_end":122470,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122475,"byte_end":122503,"line_start":266,"line_end":266,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122508,"byte_end":122511,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122516,"byte_end":122550,"line_start":268,"line_end":268,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122555,"byte_end":122558,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"big\") {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122563,"byte_end":122599,"line_start":270,"line_end":270,"column_start":5,"column_end":41}},{"value":"/     assert_eq!(n.to_be(), n)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122604,"byte_end":122636,"line_start":271,"line_end":271,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122641,"byte_end":122653,"line_start":272,"line_end":272,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_be(), n.swap_bytes())","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122658,"byte_end":122703,"line_start":273,"line_end":273,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122708,"byte_end":122713,"line_start":274,"line_end":274,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122718,"byte_end":122725,"line_start":275,"line_end":275,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123224,"byte_end":123229,"line_start":295,"line_end":295,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"pub fn to_le(Self) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[{"value":"/ Convert `self` to little endian from the target's endianness.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122759,"byte_end":122824,"line_start":278,"line_end":278,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122829,"byte_end":122832,"line_start":279,"line_end":279,"column_start":5,"column_end":8}},{"value":"/ On little endian this is a no-op. On big endian the bytes are swapped.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122837,"byte_end":122911,"line_start":280,"line_end":280,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122916,"byte_end":122919,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122924,"byte_end":122938,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122943,"byte_end":122946,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122951,"byte_end":122958,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122963,"byte_end":122991,"line_start":285,"line_end":285,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":122996,"byte_end":122999,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ let n = 0x0123456789ABCDEFu64;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123004,"byte_end":123038,"line_start":287,"line_end":287,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123043,"byte_end":123046,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ if cfg!(target_endian = \"little\") {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123051,"byte_end":123090,"line_start":289,"line_end":289,"column_start":5,"column_end":44}},{"value":"/     assert_eq!(n.to_le(), n)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123095,"byte_end":123127,"line_start":290,"line_end":290,"column_start":5,"column_end":37}},{"value":"/ } else {","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123132,"byte_end":123144,"line_start":291,"line_end":291,"column_start":5,"column_end":17}},{"value":"/     assert_eq!(n.to_le(), n.swap_bytes())","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123149,"byte_end":123194,"line_start":292,"line_end":292,"column_start":5,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123199,"byte_end":123204,"line_start":293,"line_end":293,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123209,"byte_end":123216,"line_start":294,"line_end":294,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123467,"byte_end":123470,"line_start":306,"line_end":306,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"pub fn pow(Self, u32) -> Self","parent":{"krate":0,"index":282},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises self to the power of `exp`, using exponentiation by squaring.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123250,"byte_end":123322,"line_start":297,"line_end":297,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123327,"byte_end":123330,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123335,"byte_end":123349,"line_start":299,"line_end":299,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123354,"byte_end":123357,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123362,"byte_end":123369,"line_start":301,"line_end":301,"column_start":5,"column_end":12}},{"value":"/ use num_traits::PrimInt;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123374,"byte_end":123402,"line_start":302,"line_end":302,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123407,"byte_end":123410,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(2i32.pow(4), 16);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123415,"byte_end":123447,"line_start":304,"line_end":304,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":123452,"byte_end":123459,"line_start":305,"line_end":305,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":300},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":301},{"krate":0,"index":329},{"krate":0,"index":347},{"krate":0,"index":359},{"krate":0,"index":364}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":301},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":303},{"krate":0,"index":304},{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":2173},{"krate":0,"index":2175},{"krate":0,"index":2177},{"krate":0,"index":2179},{"krate":0,"index":2181},{"krate":0,"index":2183},{"krate":0,"index":2185},{"krate":0,"index":2187},{"krate":0,"index":2189},{"krate":0,"index":2191},{"krate":0,"index":2193},{"krate":0,"index":2195},{"krate":0,"index":313},{"krate":0,"index":2197},{"krate":0,"index":2199},{"krate":0,"index":2201},{"krate":0,"index":2203},{"krate":0,"index":2205},{"krate":0,"index":2207},{"krate":0,"index":2209},{"krate":0,"index":2211},{"krate":0,"index":2213},{"krate":0,"index":2215},{"krate":0,"index":2217},{"krate":0,"index":2219},{"krate":0,"index":315},{"krate":0,"index":2221},{"krate":0,"index":2223},{"krate":0,"index":2225},{"krate":0,"index":2227},{"krate":0,"index":2229},{"krate":0,"index":2231},{"krate":0,"index":2233},{"krate":0,"index":2235},{"krate":0,"index":2237},{"krate":0,"index":2239},{"krate":0,"index":2241},{"krate":0,"index":2243},{"krate":0,"index":317},{"krate":0,"index":2245},{"krate":0,"index":2247},{"krate":0,"index":2249},{"krate":0,"index":2251},{"krate":0,"index":2253},{"krate":0,"index":2255},{"krate":0,"index":2257},{"krate":0,"index":2259},{"krate":0,"index":2261},{"krate":0,"index":2263},{"krate":0,"index":2265},{"krate":0,"index":2267},{"krate":0,"index":319},{"krate":0,"index":2269},{"krate":0,"index":2271},{"krate":0,"index":2273},{"krate":0,"index":2275},{"krate":0,"index":2277},{"krate":0,"index":2279},{"krate":0,"index":2281},{"krate":0,"index":2283},{"krate":0,"index":2285},{"krate":0,"index":2287},{"krate":0,"index":2289},{"krate":0,"index":2291},{"krate":0,"index":322},{"krate":0,"index":2293},{"krate":0,"index":2295},{"krate":0,"index":2297},{"krate":0,"index":2299},{"krate":0,"index":2301},{"krate":0,"index":2303},{"krate":0,"index":2305},{"krate":0,"index":2307},{"krate":0,"index":2309},{"krate":0,"index":2311},{"krate":0,"index":2313},{"krate":0,"index":2315},{"krate":0,"index":324},{"krate":0,"index":2317},{"krate":0,"index":2319},{"krate":0,"index":2321},{"krate":0,"index":2323},{"krate":0,"index":2325},{"krate":0,"index":2327},{"krate":0,"index":2329},{"krate":0,"index":2331},{"krate":0,"index":2333},{"krate":0,"index":2335},{"krate":0,"index":2337},{"krate":0,"index":2339},{"krate":0,"index":327},{"krate":0,"index":2341},{"krate":0,"index":2343},{"krate":0,"index":2345},{"krate":0,"index":2347},{"krate":0,"index":2349},{"krate":0,"index":2351},{"krate":0,"index":2353},{"krate":0,"index":2355},{"krate":0,"index":2357},{"krate":0,"index":2359},{"krate":0,"index":2361},{"krate":0,"index":2363}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":310},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126250,"byte_end":126260,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":311}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that returns `None` instead of wrapping around on","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126154,"byte_end":126225,"line_start":3,"line_end":3,"column_start":1,"column_end":72}},{"value":"/ overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126226,"byte_end":126239,"line_start":4,"line_end":4,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":311},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126402,"byte_end":126413,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"pub fn checked_add(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[{"value":"/ Adds two numbers, checking for overflow. If overflow happens, `None` is","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126301,"byte_end":126376,"line_start":6,"line_end":6,"column_start":5,"column_end":80}},{"value":"/ returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126381,"byte_end":126394,"line_start":7,"line_end":7,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":313},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":127391,"byte_end":127401,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":314}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that returns `None` instead of wrapping around on underflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":127295,"byte_end":127380,"line_start":38,"line_end":38,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":314},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":127550,"byte_end":127561,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"pub fn checked_sub(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":313},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[{"value":"/ Subtracts two numbers, checking for underflow. If underflow happens,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":127442,"byte_end":127514,"line_start":40,"line_end":40,"column_start":5,"column_end":77}},{"value":"/ `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":127519,"byte_end":127542,"line_start":41,"line_end":41,"column_start":5,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":315},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128294,"byte_end":128304,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":316}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that returns `None` instead of wrapping around on underflow or","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128179,"byte_end":128269,"line_start":61,"line_end":61,"column_start":1,"column_end":91}},{"value":"/ overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128270,"byte_end":128283,"line_start":62,"line_end":62,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128478,"byte_end":128489,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"pub fn checked_mul(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":315},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Multiplies two numbers, checking for underflow or overflow. If underflow","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128345,"byte_end":128421,"line_start":64,"line_end":64,"column_start":5,"column_end":81}},{"value":"/ or overflow happens, `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128426,"byte_end":128470,"line_start":65,"line_end":65,"column_start":5,"column_end":49}}]},{"kind":"Trait","id":{"krate":0,"index":317},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129262,"byte_end":129272,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":318}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs division that returns `None` instead of panicking on division by zero and instead of","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129107,"byte_end":129204,"line_start":85,"line_end":85,"column_start":1,"column_end":98}},{"value":"/ wrapping around on underflow and overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129205,"byte_end":129251,"line_start":86,"line_end":86,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129452,"byte_end":129463,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"pub fn checked_div(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":317},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[{"value":"/ Divides two numbers, checking for underflow, overflow and division by","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129313,"byte_end":129386,"line_start":88,"line_end":88,"column_start":5,"column_end":78}},{"value":"/ zero. If any of that happens, `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129391,"byte_end":129444,"line_start":89,"line_end":89,"column_start":5,"column_end":58}}]},{"kind":"Trait","id":{"krate":0,"index":319},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130249,"byte_end":130259,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":320}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[{"value":"/ Performs an integral remainder that returns `None` instead of panicking on division by zero and","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130081,"byte_end":130180,"line_start":109,"line_end":109,"column_start":1,"column_end":100}},{"value":"/ instead of wrapping around on underflow and overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130181,"byte_end":130238,"line_start":110,"line_end":110,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":320},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":131053,"byte_end":131064,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"pub fn checked_rem(&Self, &Self) -> Option<Self>","parent":{"krate":0,"index":319},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[{"value":"/ Finds the remainder of dividing two numbers, checking for underflow, overflow and division","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130300,"byte_end":130394,"line_start":112,"line_end":112,"column_start":5,"column_end":99}},{"value":"/ by zero. If any of that happens, `None` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130399,"byte_end":130455,"line_start":113,"line_end":113,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130460,"byte_end":130463,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130468,"byte_end":130482,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130487,"byte_end":130490,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130495,"byte_end":130502,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedRem;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130507,"byte_end":130538,"line_start":118,"line_end":118,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130543,"byte_end":130565,"line_start":119,"line_end":119,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130570,"byte_end":130573,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &7), Some(3));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130578,"byte_end":130636,"line_start":121,"line_end":121,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &-7), Some(3));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130641,"byte_end":130700,"line_start":122,"line_end":122,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &7), Some(-3));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130705,"byte_end":130765,"line_start":123,"line_end":123,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&-10, &-7), Some(-3));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130770,"byte_end":130831,"line_start":124,"line_end":124,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130836,"byte_end":130839,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&10, &0), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130844,"byte_end":130899,"line_start":126,"line_end":126,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130904,"byte_end":130907,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &1), Some(0));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130912,"byte_end":130971,"line_start":128,"line_end":128,"column_start":5,"column_end":64}},{"value":"/ assert_eq!(CheckedRem::checked_rem(&MIN, &-1), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130976,"byte_end":131033,"line_start":129,"line_end":129,"column_start":5,"column_end":62}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":131038,"byte_end":131045,"line_start":130,"line_end":130,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":322},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132028,"byte_end":132038,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":323}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[{"value":"/ Performs negation that returns `None` if the result can't be represented.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":131940,"byte_end":132017,"line_start":161,"line_end":161,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":323},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132688,"byte_end":132699,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"pub fn checked_neg(&Self) -> Option<Self>","parent":{"krate":0,"index":322},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[{"value":"/ Negates a number, returning `None` for results that can't be represented, like signed `MIN`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132052,"byte_end":132147,"line_start":163,"line_end":163,"column_start":5,"column_end":100}},{"value":"/ values that can't be positive, or non-zero unsigned values that can't be negative.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132152,"byte_end":132238,"line_start":164,"line_end":164,"column_start":5,"column_end":91}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132243,"byte_end":132246,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132251,"byte_end":132265,"line_start":166,"line_end":166,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132270,"byte_end":132273,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132278,"byte_end":132285,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedNeg;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132290,"byte_end":132321,"line_start":169,"line_end":169,"column_start":5,"column_end":36}},{"value":"/ use std::i32::MIN;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132326,"byte_end":132348,"line_start":170,"line_end":170,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132353,"byte_end":132356,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_i32), Some(-1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132361,"byte_end":132419,"line_start":172,"line_end":172,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&-1_i32), Some(1));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132424,"byte_end":132482,"line_start":173,"line_end":173,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&MIN), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132487,"byte_end":132539,"line_start":174,"line_end":174,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132544,"byte_end":132547,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&0_u32), Some(0));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132552,"byte_end":132609,"line_start":176,"line_end":176,"column_start":5,"column_end":62}},{"value":"/ assert_eq!(CheckedNeg::checked_neg(&1_u32), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132614,"byte_end":132668,"line_start":177,"line_end":177,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132673,"byte_end":132680,"line_start":178,"line_end":178,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":324},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133477,"byte_end":133487,"line_start":200,"line_end":200,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":325}],"decl_id":null,"docs":" Performs a left shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that returns `None` on shifts larger than","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133379,"byte_end":133446,"line_start":198,"line_end":198,"column_start":1,"column_end":68}},{"value":"/ the type width.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133447,"byte_end":133466,"line_start":199,"line_end":199,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":134046,"byte_end":134057,"line_start":214,"line_end":214,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"pub fn checked_shl(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":324},"children":[],"decl_id":null,"docs":" Checked shift left. Computes `self << rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift left. Computes `self << rhs`, returning `None`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133527,"byte_end":133591,"line_start":201,"line_end":201,"column_start":5,"column_end":69}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133596,"byte_end":133665,"line_start":202,"line_end":202,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133670,"byte_end":133673,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133678,"byte_end":133685,"line_start":204,"line_end":204,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShl;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133690,"byte_end":133721,"line_start":205,"line_end":205,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133726,"byte_end":133729,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133734,"byte_end":133758,"line_start":207,"line_end":207,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133763,"byte_end":133766,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 0),  Some(0x0001));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133771,"byte_end":133833,"line_start":209,"line_end":209,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 1),  Some(0x0002));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133838,"byte_end":133900,"line_start":210,"line_end":210,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 15), Some(0x8000));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133905,"byte_end":133967,"line_start":211,"line_end":211,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShl::checked_shl(&x, 16), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133972,"byte_end":134026,"line_start":212,"line_end":212,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":134031,"byte_end":134038,"line_start":213,"line_end":213,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":327},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135119,"byte_end":135129,"line_start":246,"line_end":246,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":328}],"decl_id":null,"docs":" Performs a right shift that returns `None` on shifts larger than\n the type width.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that returns `None` on shifts larger than","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135020,"byte_end":135088,"line_start":244,"line_end":244,"column_start":1,"column_end":69}},{"value":"/ the type width.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135089,"byte_end":135108,"line_start":245,"line_end":245,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135689,"byte_end":135700,"line_start":260,"line_end":260,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"pub fn checked_shr(&Self, u32) -> Option<Self>","parent":{"krate":0,"index":327},"children":[],"decl_id":null,"docs":" Checked shift right. Computes `self >> rhs`, returning `None`\n if `rhs` is larger than or equal to the number of bits in `self`.","sig":null,"attributes":[{"value":"/ Checked shift right. Computes `self >> rhs`, returning `None`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135169,"byte_end":135234,"line_start":247,"line_end":247,"column_start":5,"column_end":70}},{"value":"/ if `rhs` is larger than or equal to the number of bits in `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135239,"byte_end":135308,"line_start":248,"line_end":248,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135313,"byte_end":135316,"line_start":249,"line_end":249,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135321,"byte_end":135328,"line_start":250,"line_end":250,"column_start":5,"column_end":12}},{"value":"/ use num_traits::CheckedShr;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135333,"byte_end":135364,"line_start":251,"line_end":251,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135369,"byte_end":135372,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135377,"byte_end":135401,"line_start":253,"line_end":253,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135406,"byte_end":135409,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 0),  Some(0x8000));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135414,"byte_end":135476,"line_start":255,"line_end":255,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 1),  Some(0x4000));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135481,"byte_end":135543,"line_start":256,"line_end":256,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 15), Some(0x0001));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135548,"byte_end":135610,"line_start":257,"line_end":257,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(CheckedShr::checked_shr(&x, 16), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135615,"byte_end":135669,"line_start":258,"line_end":258,"column_start":5,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135674,"byte_end":135681,"line_start":259,"line_end":259,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":329},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":333},{"krate":0,"index":336},{"krate":0,"index":339},{"krate":0,"index":343}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":330},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136489,"byte_end":136492,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":331},{"krate":0,"index":332}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[{"value":"/ Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136390,"byte_end":136478,"line_start":1,"line_end":1,"column_start":1,"column_end":89}}]},{"kind":"Type","id":{"krate":0,"index":331},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136552,"byte_end":136558,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136499,"byte_end":136542,"line_start":3,"line_end":3,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136837,"byte_end":136840,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"pub fn inv(Self) -> Self::Output","parent":{"krate":0,"index":330},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[{"value":"/ Returns the multiplicative inverse of `self`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136565,"byte_end":136614,"line_start":6,"line_end":6,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136619,"byte_end":136622,"line_start":7,"line_end":7,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136627,"byte_end":136641,"line_start":8,"line_end":8,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136646,"byte_end":136649,"line_start":9,"line_end":9,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136654,"byte_end":136661,"line_start":10,"line_end":10,"column_start":5,"column_end":12}},{"value":"/ use std::f64::INFINITY;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136666,"byte_end":136693,"line_start":11,"line_end":11,"column_start":5,"column_end":32}},{"value":"/ use num_traits::Inv;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136698,"byte_end":136722,"line_start":12,"line_end":12,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136727,"byte_end":136730,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(7.0.inv() * 7.0, 1.0);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136735,"byte_end":136772,"line_start":14,"line_end":14,"column_start":5,"column_end":42}},{"value":"/ assert_eq!((-0.0).inv(), -INFINITY);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136777,"byte_end":136817,"line_start":15,"line_end":15,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/inv.rs","byte_start":136822,"byte_end":136829,"line_start":16,"line_end":16,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":347},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","parent":null,"children":[{"krate":0,"index":348},{"krate":0,"index":353},{"krate":0,"index":2365},{"krate":0,"index":2368},{"krate":0,"index":2371},{"krate":0,"index":2374},{"krate":0,"index":2377},{"krate":0,"index":2380},{"krate":0,"index":2383},{"krate":0,"index":2386},{"krate":0,"index":2389},{"krate":0,"index":2392},{"krate":0,"index":2395},{"krate":0,"index":2398},{"krate":0,"index":2401},{"krate":0,"index":2403},{"krate":0,"index":2405},{"krate":0,"index":2407},{"krate":0,"index":2409},{"krate":0,"index":2411},{"krate":0,"index":2413},{"krate":0,"index":2415},{"krate":0,"index":2417},{"krate":0,"index":2419},{"krate":0,"index":2421},{"krate":0,"index":2423}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":348},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137965,"byte_end":137971,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":352}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[{"value":"/ Fused multiply-add. Computes `(self * a) + b` with only one rounding","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137322,"byte_end":137394,"line_start":1,"line_end":1,"column_start":1,"column_end":73}},{"value":"/ error, yielding a more accurate result than an unfused multiply-add.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137395,"byte_end":137467,"line_start":2,"line_end":2,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137468,"byte_end":137471,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Using `mul_add` can be more performant than an unfused multiply-add if","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137472,"byte_end":137546,"line_start":4,"line_end":4,"column_start":1,"column_end":75}},{"value":"/ the target architecture has a dedicated `fma` CPU instruction.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137547,"byte_end":137613,"line_start":5,"line_end":5,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137614,"byte_end":137617,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Note that `A` and `B` are `Self` by default, but this is not mandatory.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137618,"byte_end":137693,"line_start":7,"line_end":7,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137694,"byte_end":137697,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137698,"byte_end":137711,"line_start":9,"line_end":9,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137712,"byte_end":137715,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137716,"byte_end":137723,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use std::f32;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137724,"byte_end":137741,"line_start":12,"line_end":12,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137742,"byte_end":137745,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ let m = 10.0_f32;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137746,"byte_end":137767,"line_start":14,"line_end":14,"column_start":1,"column_end":22}},{"value":"/ let x = 4.0_f32;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137768,"byte_end":137788,"line_start":15,"line_end":15,"column_start":1,"column_end":21}},{"value":"/ let b = 60.0_f32;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137789,"byte_end":137810,"line_start":16,"line_end":16,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137811,"byte_end":137814,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // 100.0","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137815,"byte_end":137827,"line_start":18,"line_end":18,"column_start":1,"column_end":13}},{"value":"/ let abs_difference = (m.mul_add(x, b) - (m*x + b)).abs();","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137828,"byte_end":137889,"line_start":19,"line_end":19,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137890,"byte_end":137893,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ assert!(abs_difference <= 100.0 * f32::EPSILON);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137894,"byte_end":137946,"line_start":21,"line_end":21,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137947,"byte_end":137954,"line_start":22,"line_end":22,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":351},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":138069,"byte_end":138075,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[{"value":"/ The resulting type after applying the fused multiply-add.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":137998,"byte_end":138059,"line_start":24,"line_end":24,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":352},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":138136,"byte_end":138143,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"pub fn mul_add(Self, A, B) -> Self::Output","parent":{"krate":0,"index":348},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":138082,"byte_end":138128,"line_start":27,"line_end":27,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":353},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":138241,"byte_end":138253,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":356}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[{"value":"/ The fused multiply-add assignment operation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":138182,"byte_end":138230,"line_start":31,"line_end":31,"column_start":1,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":356},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":138334,"byte_end":138348,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"pub fn mul_add_assign(&mut Self, A, B)","parent":{"krate":0,"index":353},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[{"value":"/ Performs the fused multiply-add operation.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mul_add.rs","byte_start":138280,"byte_end":138326,"line_start":33,"line_end":33,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":359},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":2425},{"krate":0,"index":2428},{"krate":0,"index":2431},{"krate":0,"index":2434},{"krate":0,"index":2437},{"krate":0,"index":2440},{"krate":0,"index":2443},{"krate":0,"index":2446},{"krate":0,"index":2449},{"krate":0,"index":2452},{"krate":0,"index":2455},{"krate":0,"index":2458}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141284,"byte_end":141294,"line_start":2,"line_end":2,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"decl_id":null,"docs":" Saturating math operations\n","sig":null,"attributes":[{"value":"/ Saturating math operations","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141243,"byte_end":141273,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141420,"byte_end":141434,"line_start":5,"line_end":5,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"pub fn saturating_add(Self, Self) -> Self","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating addition operator.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141301,"byte_end":141334,"line_start":3,"line_end":3,"column_start":5,"column_end":38}},{"value":"/ Returns a+b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141339,"byte_end":141412,"line_start":4,"line_end":4,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141586,"byte_end":141600,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"pub fn saturating_sub(Self, Self) -> Self","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[{"value":"/ Saturating subtraction operator.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141464,"byte_end":141500,"line_start":7,"line_end":7,"column_start":5,"column_end":41}},{"value":"/ Returns a-b, saturating at the numeric bounds instead of overflowing.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/saturating.rs","byte_start":141505,"byte_end":141578,"line_start":8,"line_end":8,"column_start":5,"column_end":78}}]},{"kind":"Mod","id":{"krate":0,"index":364},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":4066},{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":2461},{"krate":0,"index":2463},{"krate":0,"index":2465},{"krate":0,"index":2467},{"krate":0,"index":2469},{"krate":0,"index":2471},{"krate":0,"index":2473},{"krate":0,"index":2475},{"krate":0,"index":2477},{"krate":0,"index":2479},{"krate":0,"index":2481},{"krate":0,"index":2483},{"krate":0,"index":375},{"krate":0,"index":2485},{"krate":0,"index":2487},{"krate":0,"index":2489},{"krate":0,"index":2491},{"krate":0,"index":2493},{"krate":0,"index":2495},{"krate":0,"index":2497},{"krate":0,"index":2499},{"krate":0,"index":2501},{"krate":0,"index":2503},{"krate":0,"index":2505},{"krate":0,"index":2507},{"krate":0,"index":377},{"krate":0,"index":2509},{"krate":0,"index":2511},{"krate":0,"index":2513},{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":2527},{"krate":0,"index":2529},{"krate":0,"index":2531},{"krate":0,"index":380},{"krate":0,"index":2533},{"krate":0,"index":2535},{"krate":0,"index":2537},{"krate":0,"index":2539},{"krate":0,"index":2541},{"krate":0,"index":2543},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2549},{"krate":0,"index":2551},{"krate":0,"index":2553},{"krate":0,"index":2555},{"krate":0,"index":382},{"krate":0,"index":2557},{"krate":0,"index":2559},{"krate":0,"index":2561},{"krate":0,"index":2563},{"krate":0,"index":2565},{"krate":0,"index":2567},{"krate":0,"index":2569},{"krate":0,"index":2571},{"krate":0,"index":2573},{"krate":0,"index":2575},{"krate":0,"index":2577},{"krate":0,"index":2579},{"krate":0,"index":384},{"krate":0,"index":387},{"krate":0,"index":390},{"krate":0,"index":393},{"krate":0,"index":396}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":373},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":142808,"byte_end":142819,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":374}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs addition that wraps around on overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":142745,"byte_end":142797,"line_start":23,"line_end":23,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":142978,"byte_end":142990,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"pub fn wrapping_add(&Self, &Self) -> Self","parent":{"krate":0,"index":373},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":142860,"byte_end":142952,"line_start":25,"line_end":25,"column_start":5,"column_end":97}},{"value":"/ the type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":142957,"byte_end":142970,"line_start":26,"line_end":26,"column_start":5,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":375},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":143702,"byte_end":143713,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":376}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs subtraction that wraps around on overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":143636,"byte_end":143691,"line_start":46,"line_end":46,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":143875,"byte_end":143887,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"pub fn wrapping_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":375},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":143754,"byte_end":143846,"line_start":48,"line_end":48,"column_start":5,"column_end":97}},{"value":"/ of the type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":143851,"byte_end":143867,"line_start":49,"line_end":49,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":377},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":144602,"byte_end":144613,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":378}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[{"value":"/ Performs multiplication that wraps around on overflow.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":144533,"byte_end":144591,"line_start":69,"line_end":69,"column_start":1,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":144778,"byte_end":144790,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"pub fn wrapping_mul(&Self, &Self) -> Self","parent":{"krate":0,"index":377},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[{"value":"/ Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":144654,"byte_end":144749,"line_start":71,"line_end":71,"column_start":5,"column_end":100}},{"value":"/ of the type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":144754,"byte_end":144770,"line_start":72,"line_end":72,"column_start":5,"column_end":21}}]},{"kind":"Trait","id":{"krate":0,"index":380},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":145759,"byte_end":145770,"line_start":104,"line_end":104,"column_start":11,"column_end":22},"name":"WrappingShl","qualname":"::ops::wrapping::WrappingShl","value":"WrappingShl: Sized + Shl<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":381}],"decl_id":null,"docs":" Performs a left shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a left shift that does not panic.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":145702,"byte_end":145748,"line_start":103,"line_end":103,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":381},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146377,"byte_end":146389,"line_start":119,"line_end":119,"column_start":8,"column_end":20},"name":"wrapping_shl","qualname":"::ops::wrapping::WrappingShl::wrapping_shl","value":"pub fn wrapping_shl(&Self, u32) -> Self","parent":{"krate":0,"index":380},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-left; yields `self << mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-left; yields `self << mask(rhs)`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":145812,"byte_end":145874,"line_start":105,"line_end":105,"column_start":5,"column_end":67}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":145879,"byte_end":145943,"line_start":106,"line_end":106,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":145948,"byte_end":146003,"line_start":107,"line_end":107,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146008,"byte_end":146011,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146016,"byte_end":146023,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShl;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146028,"byte_end":146060,"line_start":110,"line_end":110,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146065,"byte_end":146068,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x0001;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146073,"byte_end":146097,"line_start":112,"line_end":112,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146102,"byte_end":146105,"line_start":113,"line_end":113,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 0),  0x0001);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146110,"byte_end":146168,"line_start":114,"line_end":114,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 1),  0x0002);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146173,"byte_end":146231,"line_start":115,"line_end":115,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 15), 0x8000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146236,"byte_end":146294,"line_start":116,"line_end":116,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShl::wrapping_shl(&x, 16), 0x0001);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146299,"byte_end":146357,"line_start":117,"line_end":117,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":146362,"byte_end":146369,"line_start":118,"line_end":118,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":382},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147165,"byte_end":147176,"line_start":139,"line_end":139,"column_start":11,"column_end":22},"name":"WrappingShr","qualname":"::ops::wrapping::WrappingShr","value":"WrappingShr: Sized + Shr<usize, Output = Self>","parent":null,"children":[{"krate":0,"index":383}],"decl_id":null,"docs":" Performs a right shift that does not panic.\n","sig":null,"attributes":[{"value":"/ Performs a right shift that does not panic.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147107,"byte_end":147154,"line_start":138,"line_end":138,"column_start":1,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":383},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147784,"byte_end":147796,"line_start":154,"line_end":154,"column_start":8,"column_end":20},"name":"wrapping_shr","qualname":"::ops::wrapping::WrappingShr::wrapping_shr","value":"pub fn wrapping_shr(&Self, u32) -> Self","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Panic-free bitwise shift-right; yields `self >> mask(rhs)`,\n where `mask` removes any high order bits of `rhs` that would\n cause the shift to exceed the bitwidth of the type.","sig":null,"attributes":[{"value":"/ Panic-free bitwise shift-right; yields `self >> mask(rhs)`,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147218,"byte_end":147281,"line_start":140,"line_end":140,"column_start":5,"column_end":68}},{"value":"/ where `mask` removes any high order bits of `rhs` that would","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147286,"byte_end":147350,"line_start":141,"line_end":141,"column_start":5,"column_end":69}},{"value":"/ cause the shift to exceed the bitwidth of the type.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147355,"byte_end":147410,"line_start":142,"line_end":142,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147415,"byte_end":147418,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147423,"byte_end":147430,"line_start":144,"line_end":144,"column_start":5,"column_end":12}},{"value":"/ use num_traits::WrappingShr;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147435,"byte_end":147467,"line_start":145,"line_end":145,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147472,"byte_end":147475,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let x: u16 = 0x8000;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147480,"byte_end":147504,"line_start":147,"line_end":147,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147509,"byte_end":147512,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 0),  0x8000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147517,"byte_end":147575,"line_start":149,"line_end":149,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 1),  0x4000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147580,"byte_end":147638,"line_start":150,"line_end":150,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 15), 0x0001);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147643,"byte_end":147701,"line_start":151,"line_end":151,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(WrappingShr::wrapping_shr(&x, 16), 0x8000);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147706,"byte_end":147764,"line_start":152,"line_end":152,"column_start":5,"column_end":63}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147769,"byte_end":147776,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":399},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","parent":null,"children":[{"krate":0,"index":400},{"krate":0,"index":4078},{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":2581},{"krate":0,"index":2584},{"krate":0,"index":2588},{"krate":0,"index":2592},{"krate":0,"index":2597},{"krate":0,"index":2600},{"krate":0,"index":2604},{"krate":0,"index":2608},{"krate":0,"index":2613},{"krate":0,"index":2616},{"krate":0,"index":2620},{"krate":0,"index":2624},{"krate":0,"index":2629},{"krate":0,"index":2632},{"krate":0,"index":2636},{"krate":0,"index":2640},{"krate":0,"index":2645},{"krate":0,"index":2648},{"krate":0,"index":2652},{"krate":0,"index":2656},{"krate":0,"index":2661},{"krate":0,"index":2664},{"krate":0,"index":2668},{"krate":0,"index":2672},{"krate":0,"index":2677},{"krate":0,"index":2680},{"krate":0,"index":2684},{"krate":0,"index":2688},{"krate":0,"index":2693},{"krate":0,"index":2696},{"krate":0,"index":2700},{"krate":0,"index":2704},{"krate":0,"index":2709},{"krate":0,"index":2712},{"krate":0,"index":2716},{"krate":0,"index":2720},{"krate":0,"index":2725},{"krate":0,"index":2728},{"krate":0,"index":2732},{"krate":0,"index":2736},{"krate":0,"index":2741},{"krate":0,"index":2744},{"krate":0,"index":2748},{"krate":0,"index":2752},{"krate":0,"index":2757},{"krate":0,"index":2760},{"krate":0,"index":2764},{"krate":0,"index":2768},{"krate":0,"index":2773},{"krate":0,"index":2776},{"krate":0,"index":2780},{"krate":0,"index":2784},{"krate":0,"index":2789},{"krate":0,"index":2792},{"krate":0,"index":2796},{"krate":0,"index":2800},{"krate":0,"index":2805},{"krate":0,"index":2808},{"krate":0,"index":2812},{"krate":0,"index":2816},{"krate":0,"index":2821},{"krate":0,"index":2824},{"krate":0,"index":2828},{"krate":0,"index":2832},{"krate":0,"index":2837},{"krate":0,"index":2840},{"krate":0,"index":2844},{"krate":0,"index":2848},{"krate":0,"index":2853},{"krate":0,"index":2856},{"krate":0,"index":2860},{"krate":0,"index":2864},{"krate":0,"index":2869},{"krate":0,"index":2872},{"krate":0,"index":2876},{"krate":0,"index":2880},{"krate":0,"index":2885},{"krate":0,"index":2888},{"krate":0,"index":2892},{"krate":0,"index":2896},{"krate":0,"index":2901},{"krate":0,"index":2904},{"krate":0,"index":2908},{"krate":0,"index":2912},{"krate":0,"index":2917},{"krate":0,"index":2920},{"krate":0,"index":2924},{"krate":0,"index":2928},{"krate":0,"index":2933},{"krate":0,"index":2936},{"krate":0,"index":2940},{"krate":0,"index":2944},{"krate":0,"index":2949},{"krate":0,"index":2952},{"krate":0,"index":2956},{"krate":0,"index":2960},{"krate":0,"index":2965},{"krate":0,"index":2968},{"krate":0,"index":2972},{"krate":0,"index":2976},{"krate":0,"index":2981},{"krate":0,"index":2984},{"krate":0,"index":2988},{"krate":0,"index":2992},{"krate":0,"index":2997},{"krate":0,"index":3000},{"krate":0,"index":3004},{"krate":0,"index":3008},{"krate":0,"index":3013},{"krate":0,"index":3016},{"krate":0,"index":3020},{"krate":0,"index":3024},{"krate":0,"index":3029},{"krate":0,"index":3032},{"krate":0,"index":3036},{"krate":0,"index":3040},{"krate":0,"index":3045},{"krate":0,"index":3048},{"krate":0,"index":3052},{"krate":0,"index":3056},{"krate":0,"index":3061},{"krate":0,"index":3064},{"krate":0,"index":3068},{"krate":0,"index":3072},{"krate":0,"index":3077},{"krate":0,"index":3080},{"krate":0,"index":3084},{"krate":0,"index":3088},{"krate":0,"index":3093},{"krate":0,"index":3096},{"krate":0,"index":3100},{"krate":0,"index":3104},{"krate":0,"index":3109},{"krate":0,"index":3112},{"krate":0,"index":3116},{"krate":0,"index":3120},{"krate":0,"index":3125},{"krate":0,"index":3128},{"krate":0,"index":3132},{"krate":0,"index":3136},{"krate":0,"index":3141},{"krate":0,"index":3144},{"krate":0,"index":3148},{"krate":0,"index":3152},{"krate":0,"index":3157},{"krate":0,"index":3160},{"krate":0,"index":3164},{"krate":0,"index":3168},{"krate":0,"index":3173},{"krate":0,"index":3176},{"krate":0,"index":3180},{"krate":0,"index":3184},{"krate":0,"index":3189},{"krate":0,"index":3192},{"krate":0,"index":3196},{"krate":0,"index":3200},{"krate":0,"index":3205},{"krate":0,"index":3208},{"krate":0,"index":3212},{"krate":0,"index":3216},{"krate":0,"index":3221},{"krate":0,"index":3224},{"krate":0,"index":3228},{"krate":0,"index":3232},{"krate":0,"index":3237},{"krate":0,"index":3240},{"krate":0,"index":3244},{"krate":0,"index":3248},{"krate":0,"index":3253},{"krate":0,"index":3256},{"krate":0,"index":3260},{"krate":0,"index":3264},{"krate":0,"index":3269},{"krate":0,"index":3272},{"krate":0,"index":3276},{"krate":0,"index":3280},{"krate":0,"index":3285},{"krate":0,"index":3288},{"krate":0,"index":3292},{"krate":0,"index":3296},{"krate":0,"index":3301},{"krate":0,"index":3304},{"krate":0,"index":3308},{"krate":0,"index":3312},{"krate":0,"index":3317},{"krate":0,"index":3320},{"krate":0,"index":3324},{"krate":0,"index":3328},{"krate":0,"index":3333},{"krate":0,"index":3336},{"krate":0,"index":3340},{"krate":0,"index":3344},{"krate":0,"index":3349},{"krate":0,"index":3352},{"krate":0,"index":3356},{"krate":0,"index":3360},{"krate":0,"index":3365},{"krate":0,"index":3368},{"krate":0,"index":3372},{"krate":0,"index":3376},{"krate":0,"index":3381},{"krate":0,"index":3384},{"krate":0,"index":3388},{"krate":0,"index":3392},{"krate":0,"index":3397},{"krate":0,"index":3400},{"krate":0,"index":3404},{"krate":0,"index":3408},{"krate":0,"index":3413},{"krate":0,"index":3416},{"krate":0,"index":3420},{"krate":0,"index":3424},{"krate":0,"index":3429},{"krate":0,"index":3432},{"krate":0,"index":3436},{"krate":0,"index":3440},{"krate":0,"index":3445},{"krate":0,"index":3448},{"krate":0,"index":3452},{"krate":0,"index":3456},{"krate":0,"index":3461},{"krate":0,"index":3464},{"krate":0,"index":3468},{"krate":0,"index":3472},{"krate":0,"index":3477},{"krate":0,"index":3480},{"krate":0,"index":3484},{"krate":0,"index":3488},{"krate":0,"index":3493},{"krate":0,"index":3496},{"krate":0,"index":3500},{"krate":0,"index":3504},{"krate":0,"index":3509},{"krate":0,"index":3512},{"krate":0,"index":3516},{"krate":0,"index":3520},{"krate":0,"index":3525},{"krate":0,"index":3528},{"krate":0,"index":3532},{"krate":0,"index":3536},{"krate":0,"index":3541},{"krate":0,"index":3544},{"krate":0,"index":3548},{"krate":0,"index":3552},{"krate":0,"index":3557},{"krate":0,"index":3560},{"krate":0,"index":3564},{"krate":0,"index":3568},{"krate":0,"index":3573},{"krate":0,"index":3576},{"krate":0,"index":3580},{"krate":0,"index":3584},{"krate":0,"index":3589},{"krate":0,"index":3592},{"krate":0,"index":3596},{"krate":0,"index":3600},{"krate":0,"index":3605},{"krate":0,"index":3608},{"krate":0,"index":3612},{"krate":0,"index":3616},{"krate":0,"index":3621},{"krate":0,"index":3624},{"krate":0,"index":3628},{"krate":0,"index":3632},{"krate":0,"index":3637},{"krate":0,"index":3640},{"krate":0,"index":3644},{"krate":0,"index":3648},{"krate":0,"index":3653},{"krate":0,"index":3656},{"krate":0,"index":3660},{"krate":0,"index":3664},{"krate":0,"index":3669},{"krate":0,"index":3672},{"krate":0,"index":3676},{"krate":0,"index":3680},{"krate":0,"index":3685},{"krate":0,"index":3688},{"krate":0,"index":3692},{"krate":0,"index":3696},{"krate":0,"index":3701},{"krate":0,"index":3704},{"krate":0,"index":3708},{"krate":0,"index":3712},{"krate":0,"index":3717},{"krate":0,"index":3720},{"krate":0,"index":3724},{"krate":0,"index":3728},{"krate":0,"index":410},{"krate":0,"index":412}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":405},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151443,"byte_end":151446,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":407},{"krate":0,"index":408}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[{"value":"/ Binary operator for raising a value to a power.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151381,"byte_end":151432,"line_start":5,"line_end":5,"column_start":1,"column_end":52}}]},{"kind":"Type","id":{"krate":0,"index":407},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151511,"byte_end":151517,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[{"value":"/ The result after applying the operator.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151458,"byte_end":151501,"line_start":7,"line_end":7,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151706,"byte_end":151709,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"pub fn pow(Self, RHS) -> Self::Output","parent":{"krate":0,"index":405},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[{"value":"/ Returns `self` to the power `rhs`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151524,"byte_end":151562,"line_start":10,"line_end":10,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151567,"byte_end":151570,"line_start":11,"line_end":11,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151575,"byte_end":151589,"line_start":12,"line_end":12,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151594,"byte_end":151597,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151602,"byte_end":151609,"line_start":14,"line_end":14,"column_start":5,"column_end":12}},{"value":"/ use num_traits::Pow;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151614,"byte_end":151638,"line_start":15,"line_end":15,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Pow::pow(10u32, 2u32), 100);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151643,"byte_end":151686,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":151691,"byte_end":151698,"line_start":17,"line_end":17,"column_start":5,"column_end":12}}]},{"kind":"Function","id":{"krate":0,"index":410},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156536,"byte_end":156539,"line_start":189,"line_end":189,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"pub fn pow<T: Clone + One + Mul<T, Output = T>>(T, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, using exponentiation by squaring.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156152,"byte_end":156225,"line_start":175,"line_end":175,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156226,"byte_end":156229,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`pow(0, 0)`) returns `1`. Mathematically this is undefined.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156230,"byte_end":156311,"line_start":177,"line_end":177,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156312,"byte_end":156315,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156316,"byte_end":156329,"line_start":179,"line_end":179,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156330,"byte_end":156333,"line_start":180,"line_end":180,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156334,"byte_end":156345,"line_start":181,"line_end":181,"column_start":1,"column_end":12}},{"value":"/ use num_traits::pow;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156346,"byte_end":156370,"line_start":182,"line_end":182,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156371,"byte_end":156374,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(pow(2i8, 4), 16);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156375,"byte_end":156407,"line_start":184,"line_end":184,"column_start":1,"column_end":33}},{"value":"/ assert_eq!(pow(6u8, 3), 216);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156408,"byte_end":156441,"line_start":185,"line_end":185,"column_start":1,"column_end":34}},{"value":"/ assert_eq!(pow(0u8, 0), 1); // Be aware if this case affects you","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156442,"byte_end":156510,"line_start":186,"line_end":186,"column_start":1,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156511,"byte_end":156518,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156519,"byte_end":156528,"line_start":188,"line_end":188,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":412},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157545,"byte_end":157556,"line_start":230,"line_end":230,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"pub fn checked_pow<T: Clone + One + CheckedMul>(T, usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"/ Raises a value to the power of exp, returning `None` if an overflow occurred.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":156993,"byte_end":157074,"line_start":213,"line_end":213,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157075,"byte_end":157078,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Note that `0⁰` (`checked_pow(0, 0)`) returns `Some(1)`. Mathematically this is undefined.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157079,"byte_end":157174,"line_start":215,"line_end":215,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157175,"byte_end":157178,"line_start":216,"line_end":216,"column_start":1,"column_end":4}},{"value":"/ Otherwise same as the `pow` function.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157179,"byte_end":157220,"line_start":217,"line_end":217,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157221,"byte_end":157224,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157225,"byte_end":157238,"line_start":219,"line_end":219,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157239,"byte_end":157242,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157243,"byte_end":157254,"line_start":221,"line_end":221,"column_start":1,"column_end":12}},{"value":"/ use num_traits::checked_pow;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157255,"byte_end":157287,"line_start":222,"line_end":222,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157288,"byte_end":157291,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(checked_pow(2i8, 4), Some(16));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157292,"byte_end":157338,"line_start":224,"line_end":224,"column_start":1,"column_end":47}},{"value":"/ assert_eq!(checked_pow(7i8, 8), None);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157339,"byte_end":157381,"line_start":225,"line_end":225,"column_start":1,"column_end":43}},{"value":"/ assert_eq!(checked_pow(7u32, 8), Some(5_764_801));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157382,"byte_end":157436,"line_start":226,"line_end":226,"column_start":1,"column_end":55}},{"value":"/ assert_eq!(checked_pow(0u32, 0), Some(1)); // Be aware if this case affect you","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157437,"byte_end":157519,"line_start":227,"line_end":227,"column_start":1,"column_end":83}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157520,"byte_end":157527,"line_start":228,"line_end":228,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/pow.rs","byte_start":157528,"byte_end":157537,"line_start":229,"line_end":229,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":415},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","parent":null,"children":[{"krate":0,"index":416},{"krate":0,"index":4086},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":3733},{"krate":0,"index":3739},{"krate":0,"index":3745},{"krate":0,"index":3751},{"krate":0,"index":3757},{"krate":0,"index":3763},{"krate":0,"index":427},{"krate":0,"index":3769},{"krate":0,"index":3775},{"krate":0,"index":435},{"krate":0,"index":437},{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":3781},{"krate":0,"index":3782},{"krate":0,"index":3783},{"krate":0,"index":3784},{"krate":0,"index":3785},{"krate":0,"index":3786},{"krate":0,"index":443}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":420},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180573,"byte_end":180579,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[{"value":"/ Useful functions for signed numbers (i.e. numbers that can be negative).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180486,"byte_end":180562,"line_start":7,"line_end":7,"column_start":1,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":421},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180832,"byte_end":180835,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"pub fn abs(&Self) -> Self","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180620,"byte_end":180652,"line_start":9,"line_end":9,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180657,"byte_end":180660,"line_start":10,"line_end":10,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180665,"byte_end":180736,"line_start":11,"line_end":11,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180741,"byte_end":180744,"line_start":12,"line_end":12,"column_start":5,"column_end":8}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180749,"byte_end":180824,"line_start":13,"line_end":13,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":422},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181060,"byte_end":181067,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"pub fn abs_sub(&Self, &Self) -> Self","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180857,"byte_end":180900,"line_start":16,"line_end":16,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180905,"byte_end":180908,"line_start":17,"line_end":17,"column_start":5,"column_end":8}},{"value":"/ Returns `zero` if the number is less than or equal to `other`, otherwise the difference","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180913,"byte_end":181004,"line_start":18,"line_end":18,"column_start":5,"column_end":96}},{"value":"/ between `self` and `other` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181009,"byte_end":181052,"line_start":19,"line_end":19,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":423},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181525,"byte_end":181531,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"pub fn signum(&Self) -> Self","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181103,"byte_end":181138,"line_start":22,"line_end":22,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181143,"byte_end":181146,"line_start":23,"line_end":23,"column_start":5,"column_end":8}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181151,"byte_end":181175,"line_start":24,"line_end":24,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181180,"byte_end":181183,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181188,"byte_end":181247,"line_start":26,"line_end":26,"column_start":5,"column_end":64}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181252,"byte_end":181316,"line_start":27,"line_end":27,"column_start":5,"column_end":69}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181321,"byte_end":181355,"line_start":28,"line_end":28,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181360,"byte_end":181363,"line_start":29,"line_end":29,"column_start":5,"column_end":8}},{"value":"/ For signed integers:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181368,"byte_end":181392,"line_start":30,"line_end":30,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181397,"byte_end":181400,"line_start":31,"line_end":31,"column_start":5,"column_end":8}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181405,"byte_end":181436,"line_start":32,"line_end":32,"column_start":5,"column_end":36}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181441,"byte_end":181476,"line_start":33,"line_end":33,"column_start":5,"column_end":40}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181481,"byte_end":181517,"line_start":34,"line_end":34,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181648,"byte_end":181659,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"pub fn is_positive(&Self) -> bool","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is positive and false if the number is zero or negative.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181553,"byte_end":181640,"line_start":37,"line_end":37,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":425},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181776,"byte_end":181787,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"pub fn is_negative(&Self) -> bool","parent":{"krate":0,"index":420},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[{"value":"/ Returns true if the number is negative and false if the number is zero or positive.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":181681,"byte_end":181768,"line_start":40,"line_end":40,"column_start":5,"column_end":92}}]},{"kind":"Function","id":{"krate":0,"index":435},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":184981,"byte_end":184984,"line_start":165,"line_end":165,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"pub fn abs<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"/ Computes the absolute value.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":184768,"byte_end":184800,"line_start":159,"line_end":159,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":184801,"byte_end":184804,"line_start":160,"line_end":160,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`, `NaN` will be returned if the number is `NaN`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":184805,"byte_end":184875,"line_start":161,"line_end":161,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":184876,"byte_end":184879,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ For signed integers, `::MIN` will be returned if the number is `::MIN`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":184880,"byte_end":184955,"line_start":163,"line_end":163,"column_start":1,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":184956,"byte_end":184973,"line_start":164,"line_end":164,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":437},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185221,"byte_end":185228,"line_start":174,"line_end":174,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"pub fn abs_sub<T: Signed>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"/ The positive difference of two numbers.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185032,"byte_end":185075,"line_start":169,"line_end":169,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185076,"byte_end":185079,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ Returns zero if `x` is less than or equal to `y`, otherwise the difference","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185080,"byte_end":185158,"line_start":171,"line_end":171,"column_start":1,"column_end":79}},{"value":"/ between `x` and `y` is returned.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185159,"byte_end":185195,"line_start":172,"line_end":172,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185196,"byte_end":185213,"line_start":173,"line_end":173,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":439},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185672,"byte_end":185678,"line_start":192,"line_end":192,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::signum","value":"pub fn signum<T: Signed>(T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"/ Returns the sign of the number.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185280,"byte_end":185315,"line_start":178,"line_end":178,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185316,"byte_end":185319,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/ For `f32` and `f64`:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185320,"byte_end":185344,"line_start":180,"line_end":180,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185345,"byte_end":185348,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ * `1.0` if the number is positive, `+0.0` or `INFINITY`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185349,"byte_end":185408,"line_start":182,"line_end":182,"column_start":1,"column_end":60}},{"value":"/ * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185409,"byte_end":185473,"line_start":183,"line_end":183,"column_start":1,"column_end":65}},{"value":"/ * `NaN` if the number is `NaN`","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185474,"byte_end":185508,"line_start":184,"line_end":184,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185509,"byte_end":185512,"line_start":185,"line_end":185,"column_start":1,"column_end":4}},{"value":"/ For signed integers:","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185513,"byte_end":185537,"line_start":186,"line_end":186,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185538,"byte_end":185541,"line_start":187,"line_end":187,"column_start":1,"column_end":4}},{"value":"/ * `0` if the number is zero","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185542,"byte_end":185573,"line_start":188,"line_end":188,"column_start":1,"column_end":32}},{"value":"/ * `1` if the number is positive","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185574,"byte_end":185609,"line_start":189,"line_end":189,"column_start":1,"column_end":36}},{"value":"/ * `-1` if the number is negative","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185610,"byte_end":185646,"line_start":190,"line_end":190,"column_start":1,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185647,"byte_end":185664,"line_start":191,"line_end":191,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":441},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185787,"byte_end":185795,"line_start":197,"line_end":197,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[{"value":"/ A trait for values which cannot be negative","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185729,"byte_end":185776,"line_start":196,"line_end":196,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":445},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2098,"byte_end":2101,"line_start":65,"line_end":65,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":446},{"krate":0,"index":447}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[{"value":"/ The base trait for numeric types, covering `0` and `1` values,","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1955,"byte_end":2021,"line_start":63,"line_end":63,"column_start":1,"column_end":67}},{"value":"/ comparisons, basic numeric operations, and string conversion.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2022,"byte_end":2087,"line_start":64,"line_end":64,"column_start":1,"column_end":66}}]},{"kind":"Type","id":{"krate":0,"index":446},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2146,"byte_end":2161,"line_start":66,"line_end":66,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":447},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2519,"byte_end":2533,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"pub fn from_str_radix(&str, u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":445},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[{"value":"/ Convert from a string and radix <= 36.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2168,"byte_end":2210,"line_start":68,"line_end":68,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2215,"byte_end":2218,"line_start":69,"line_end":69,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2223,"byte_end":2237,"line_start":70,"line_end":70,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2242,"byte_end":2245,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2250,"byte_end":2261,"line_start":72,"line_end":72,"column_start":5,"column_end":16}},{"value":"/ use num_traits::Num;","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2266,"byte_end":2290,"line_start":73,"line_end":73,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2295,"byte_end":2298,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"27\", 10);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2303,"byte_end":2359,"line_start":75,"line_end":75,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(result, Ok(27));","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2364,"byte_end":2395,"line_start":76,"line_end":76,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2400,"byte_end":2403,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let result = <i32 as Num>::from_str_radix(\"foo\", 10);","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2408,"byte_end":2465,"line_start":78,"line_end":78,"column_start":5,"column_end":62}},{"value":"/ assert!(result.is_err());","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2470,"byte_end":2499,"line_start":79,"line_end":79,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2504,"byte_end":2511,"line_start":80,"line_end":80,"column_start":5,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":448},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2755,"byte_end":2761,"line_start":87,"line_end":87,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[{"value":"/ The trait for types implementing basic numeric operations","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2600,"byte_end":2661,"line_start":84,"line_end":84,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2662,"byte_end":2665,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2666,"byte_end":2744,"line_start":86,"line_end":86,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":455},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3395,"byte_end":3401,"line_start":109,"line_end":109,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement numeric operations taking","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3188,"byte_end":3264,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"/ the second operand by reference.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3265,"byte_end":3301,"line_start":106,"line_end":106,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3302,"byte_end":3305,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3306,"byte_end":3384,"line_start":108,"line_end":108,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":460},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3720,"byte_end":3726,"line_start":116,"line_end":116,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[{"value":"/ The trait for references which implement numeric operations, taking the","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3499,"byte_end":3574,"line_start":112,"line_end":112,"column_start":1,"column_end":76}},{"value":"/ second operand either by value or by reference.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3575,"byte_end":3626,"line_start":113,"line_end":113,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3627,"byte_end":3630,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3631,"byte_end":3709,"line_start":115,"line_end":115,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":467},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4059,"byte_end":4071,"line_start":122,"line_end":122,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[{"value":"/ The trait for types implementing numeric assignment operators (like `+=`).","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3887,"byte_end":3965,"line_start":119,"line_end":119,"column_start":1,"column_end":79}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3966,"byte_end":3969,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3970,"byte_end":4048,"line_start":121,"line_end":121,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":472},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4481,"byte_end":4490,"line_start":135,"line_end":135,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[{"value":"/ The trait for `Num` types which also implement assignment operators.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4315,"byte_end":4387,"line_start":132,"line_end":132,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4388,"byte_end":4391,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4392,"byte_end":4470,"line_start":134,"line_end":134,"column_start":1,"column_end":79}}]},{"kind":"Trait","id":{"krate":0,"index":475},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4786,"byte_end":4798,"line_start":142,"line_end":142,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[{"value":"/ The trait for `NumAssign` types which also implement assignment operations","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4570,"byte_end":4648,"line_start":138,"line_end":138,"column_start":1,"column_end":79}},{"value":"/ taking the second operand by reference.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4649,"byte_end":4692,"line_start":139,"line_end":139,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4693,"byte_end":4696,"line_start":140,"line_end":140,"column_start":1,"column_end":4}},{"value":"/ This is automatically implemented for types which implement the operators.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4697,"byte_end":4775,"line_start":141,"line_end":141,"column_start":1,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3824},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":5920,"byte_end":5925,"line_start":178,"line_end":178,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":3823},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":3826},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":5931,"byte_end":5938,"line_start":179,"line_end":179,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":3823},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":3823},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":5899,"byte_end":5913,"line_start":177,"line_end":177,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"pub enum FloatErrorKind { Empty, Invalid, }","parent":null,"children":[{"krate":0,"index":3824},{"krate":0,"index":3826}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":3830},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":6096,"byte_end":6111,"line_start":184,"line_end":184,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":3831}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":3831},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":6122,"byte_end":6126,"line_start":185,"line_end":185,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":3830},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":488},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14398,"byte_end":14403,"line_start":373,"line_end":373,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"pub fn clamp<T: PartialOrd>(T, T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"/ A value bounded by a minimum and a maximum","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14131,"byte_end":14177,"line_start":365,"line_end":365,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14178,"byte_end":14181,"line_start":366,"line_end":366,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14182,"byte_end":14235,"line_start":367,"line_end":367,"column_start":1,"column_end":54}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14236,"byte_end":14292,"line_start":368,"line_end":368,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14293,"byte_end":14327,"line_start":369,"line_end":369,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14328,"byte_end":14331,"line_start":370,"line_end":370,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min <= max)`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14332,"byte_end":14380,"line_start":371,"line_end":371,"column_start":1,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14381,"byte_end":14390,"line_start":372,"line_end":372,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":490},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14968,"byte_end":14977,"line_start":392,"line_end":392,"column_start":8,"column_end":17},"name":"clamp_min","qualname":"::clamp_min","value":"pub fn clamp_min<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum value","sig":null,"attributes":[{"value":"/ A value bounded by a minimum value","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14633,"byte_end":14671,"line_start":384,"line_end":384,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14672,"byte_end":14675,"line_start":385,"line_end":385,"column_start":1,"column_end":4}},{"value":"/  If input is less than min then this returns min.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14676,"byte_end":14729,"line_start":386,"line_end":386,"column_start":1,"column_end":54}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14730,"byte_end":14764,"line_start":387,"line_end":387,"column_start":1,"column_end":35}},{"value":"/  `clamp_min(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::min(std::f32::NAN, 1.0)`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14765,"byte_end":14864,"line_start":388,"line_end":388,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14865,"byte_end":14868,"line_start":389,"line_end":389,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(min == min)`. (This occurs if `min` is `NAN`.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14869,"byte_end":14950,"line_start":390,"line_end":390,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":14951,"byte_end":14960,"line_start":391,"line_end":391,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":492},"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15479,"byte_end":15488,"line_start":409,"line_end":409,"column_start":8,"column_end":17},"name":"clamp_max","qualname":"::clamp_max","value":"pub fn clamp_max<T: PartialOrd>(T, T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a maximum value","sig":null,"attributes":[{"value":"/ A value bounded by a maximum value","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15141,"byte_end":15179,"line_start":401,"line_end":401,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15180,"byte_end":15183,"line_start":402,"line_end":402,"column_start":1,"column_end":4}},{"value":"/  If input is greater than max then this returns max.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15184,"byte_end":15240,"line_start":403,"line_end":403,"column_start":1,"column_end":57}},{"value":"/  Otherwise this returns input.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15241,"byte_end":15275,"line_start":404,"line_end":404,"column_start":1,"column_end":35}},{"value":"/  `clamp_max(std::f32::NAN, 1.0)` preserves `NAN` different from `f32::max(std::f32::NAN, 1.0)`.","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15276,"byte_end":15375,"line_start":405,"line_end":405,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15376,"byte_end":15379,"line_start":406,"line_end":406,"column_start":1,"column_end":4}},{"value":"/ **Panics** in debug mode if `!(max == max)`. (This occurs if `max` is `NAN`.)","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15380,"byte_end":15461,"line_start":407,"line_end":407,"column_start":1,"column_end":82}},{"value":"inline","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":15462,"byte_end":15471,"line_start":408,"line_end":408,"column_start":1,"column_end":10}}]}],"impls":[{"id":12,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":21749,"byte_end":21757,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":43111,"byte_end":43119,"line_start":583,"line_end":583,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304},{"krate":0,"index":1305},{"krate":0,"index":1306},{"krate":0,"index":1307},{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313},{"krate":0,"index":1314}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":43887,"byte_end":43895,"line_start":616,"line_end":616,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1315},{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":45898,"byte_end":45906,"line_start":693,"line_end":693,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":284,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111653,"byte_end":111661,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254}],"docs":"","sig":null,"attributes":[]},{"id":299,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":113638,"byte_end":113646,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":506,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":148610,"byte_end":148618,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":507,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":148810,"byte_end":148818,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":389}],"docs":"","sig":null,"attributes":[]},{"id":508,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":149010,"byte_end":149018,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":392}],"docs":"","sig":null,"attributes":[]},{"id":509,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":149210,"byte_end":149218,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":395}],"docs":"","sig":null,"attributes":[]},{"id":510,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":149416,"byte_end":149424,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":661,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":182669,"byte_end":182677,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":433}],"docs":"","sig":null,"attributes":[]},{"id":670,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":186057,"byte_end":186065,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":671,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2998,"byte_end":2999,"line_start":96,"line_end":96,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":672,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3456,"byte_end":3457,"line_start":110,"line_end":110,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":673,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3820,"byte_end":3821,"line_start":117,"line_end":117,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":674,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4212,"byte_end":4213,"line_start":127,"line_end":127,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":675,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4536,"byte_end":4537,"line_start":136,"line_end":136,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":676,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4871,"byte_end":4872,"line_start":143,"line_end":143,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":689,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":5471,"byte_end":5479,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":690,"kind":"Direct","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":6169,"byte_end":6184,"line_start":188,"line_end":188,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1830,"byte_end":1836,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":65}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1846,"byte_end":1850,"line_start":54,"line_end":54,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":96}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1860,"byte_end":1865,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":180}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1875,"byte_end":1885,"line_start":56,"line_end":56,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":240}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1895,"byte_end":1898,"line_start":57,"line_end":57,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":268}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1908,"byte_end":1911,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":300}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mod.rs","byte_start":126023,"byte_end":126030,"line_start":1,"line_end":1,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":301}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mod.rs","byte_start":126040,"byte_end":126043,"line_start":2,"line_end":2,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":329}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mod.rs","byte_start":126053,"byte_end":126060,"line_start":3,"line_end":3,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":347}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mod.rs","byte_start":126070,"byte_end":126080,"line_start":4,"line_end":4,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":359}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/mod.rs","byte_start":126090,"byte_end":126098,"line_start":5,"line_end":5,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":364}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1921,"byte_end":1924,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":399}},{"kind":"Mod","span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":1948,"byte_end":1952,"line_start":61,"line_end":61,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":415}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/bounds.rs","byte_start":21749,"byte_end":21757,"line_start":49,"line_end":49,"column_start":30,"column_end":38},"kind":{"Impl":{"id":12}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":85}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":36291,"byte_end":36296,"line_start":379,"line_end":379,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":143}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":43111,"byte_end":43119,"line_start":583,"line_end":583,"column_start":38,"column_end":46},"kind":{"Impl":{"id":29}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":118}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":43887,"byte_end":43895,"line_start":616,"line_end":616,"column_start":42,"column_end":50},"kind":{"Impl":{"id":30}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":143}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44730,"byte_end":44735,"line_start":655,"line_end":655,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":168}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":44738,"byte_end":44749,"line_start":655,"line_end":655,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":118},"to":{"krate":0,"index":168}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":45898,"byte_end":45906,"line_start":693,"line_end":693,"column_start":30,"column_end":38},"kind":{"Impl":{"id":45}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":168}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/cast.rs","byte_start":47140,"byte_end":47144,"line_start":734,"line_end":734,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2091},"to":{"krate":0,"index":176}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":48979,"byte_end":48982,"line_start":16,"line_end":16,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":48985,"byte_end":48992,"line_start":16,"line_end":16,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":168},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":48995,"byte_end":48998,"line_start":16,"line_end":16,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2173},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49016,"byte_end":49026,"line_start":16,"line_end":16,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":1841},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/float.rs","byte_start":49029,"byte_end":49033,"line_start":16,"line_end":16,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":2091},"to":{"krate":0,"index":192}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110396,"byte_end":110401,"line_start":12,"line_end":12,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":245}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":110404,"byte_end":110407,"line_start":12,"line_end":12,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2146},"to":{"krate":0,"index":245}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":111653,"byte_end":111661,"line_start":65,"line_end":65,"column_start":24,"column_end":32},"kind":{"Impl":{"id":284}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":245}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112090,"byte_end":112095,"line_start":90,"line_end":90,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":112098,"byte_end":112101,"line_start":90,"line_end":90,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":2156},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/identities.rs","byte_start":113638,"byte_end":113646,"line_start":154,"line_end":154,"column_start":22,"column_end":30},"kind":{"Impl":{"id":299}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":255}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116653,"byte_end":116658,"line_start":35,"line_end":35,"column_start":5,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116665,"byte_end":116669,"line_start":36,"line_end":36,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":2091},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116676,"byte_end":116679,"line_start":37,"line_end":37,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116686,"byte_end":116693,"line_start":38,"line_end":38,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":168},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116700,"byte_end":116707,"line_start":39,"line_end":39,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":85},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116714,"byte_end":116724,"line_start":40,"line_end":40,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":1841},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116731,"byte_end":116734,"line_start":41,"line_end":41,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1830},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116741,"byte_end":116743,"line_start":42,"line_end":42,"column_start":7,"column_end":9},"kind":"SuperTrait","from":{"krate":1,"index":1803},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116750,"byte_end":116753,"line_start":43,"line_end":43,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2198},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116775,"byte_end":116781,"line_start":44,"line_end":44,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2202},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116803,"byte_end":116808,"line_start":45,"line_end":45,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":2207},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116830,"byte_end":116836,"line_start":46,"line_end":46,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":2212},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116858,"byte_end":116861,"line_start":47,"line_end":47,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2217},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116890,"byte_end":116893,"line_start":48,"line_end":48,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2223},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116922,"byte_end":116932,"line_start":49,"line_end":49,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":310},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116954,"byte_end":116964,"line_start":50,"line_end":50,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":313},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":116986,"byte_end":116996,"line_start":51,"line_end":51,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":315},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117018,"byte_end":117028,"line_start":52,"line_end":52,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":317},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/int.rs","byte_start":117050,"byte_end":117060,"line_start":53,"line_end":53,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":360},"to":{"krate":0,"index":282}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126262,"byte_end":126267,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":126270,"byte_end":126273,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2146},"to":{"krate":0,"index":310}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":127403,"byte_end":127408,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":313}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":127411,"byte_end":127414,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2151},"to":{"krate":0,"index":313}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128306,"byte_end":128311,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":315}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":128314,"byte_end":128317,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2156},"to":{"krate":0,"index":315}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129274,"byte_end":129279,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":317}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":129282,"byte_end":129285,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2161},"to":{"krate":0,"index":317}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130261,"byte_end":130266,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":319}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":130269,"byte_end":130272,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2167},"to":{"krate":0,"index":319}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":132040,"byte_end":132045,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":322}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133489,"byte_end":133494,"line_start":200,"line_end":200,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":324}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":133497,"byte_end":133500,"line_start":200,"line_end":200,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2217},"to":{"krate":0,"index":324}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135131,"byte_end":135136,"line_start":246,"line_end":246,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":327}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/checked.rs","byte_start":135139,"byte_end":135142,"line_start":246,"line_end":246,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":2223},"to":{"krate":0,"index":327}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":142821,"byte_end":142826,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":373}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":142829,"byte_end":142832,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2146},"to":{"krate":0,"index":373}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":143715,"byte_end":143720,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":143723,"byte_end":143726,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2151},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":144615,"byte_end":144620,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":377}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":144623,"byte_end":144626,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2156},"to":{"krate":0,"index":377}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":145772,"byte_end":145777,"line_start":104,"line_end":104,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":380}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":145780,"byte_end":145783,"line_start":104,"line_end":104,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2217},"to":{"krate":0,"index":380}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147178,"byte_end":147183,"line_start":139,"line_end":139,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":382}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":147186,"byte_end":147189,"line_start":139,"line_end":139,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":2223},"to":{"krate":0,"index":382}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":148610,"byte_end":148618,"line_start":174,"line_end":174,"column_start":38,"column_end":46},"kind":{"Impl":{"id":506}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":373}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":148810,"byte_end":148818,"line_start":182,"line_end":182,"column_start":38,"column_end":46},"kind":{"Impl":{"id":507}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":375}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":149010,"byte_end":149018,"line_start":190,"line_end":190,"column_start":38,"column_end":46},"kind":{"Impl":{"id":508}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":377}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":149210,"byte_end":149218,"line_start":198,"line_end":198,"column_start":38,"column_end":46},"kind":{"Impl":{"id":509}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":380}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/ops/wrapping.rs","byte_start":149416,"byte_end":149424,"line_start":206,"line_end":206,"column_start":38,"column_end":46},"kind":{"Impl":{"id":510}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":382}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180581,"byte_end":180586,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":2086},"to":{"krate":0,"index":420}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180589,"byte_end":180592,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":420}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":180595,"byte_end":180598,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":2173},"to":{"krate":0,"index":420}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":182669,"byte_end":182677,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"Impl":{"id":661}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":420}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":185797,"byte_end":185800,"line_start":197,"line_end":197,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/sign.rs","byte_start":186057,"byte_end":186065,"line_start":209,"line_end":209,"column_start":32,"column_end":40},"kind":{"Impl":{"id":670}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":441}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2103,"byte_end":2112,"line_start":65,"line_end":65,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1798},"to":{"krate":0,"index":445}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2115,"byte_end":2119,"line_start":65,"line_end":65,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":245},"to":{"krate":0,"index":445}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2122,"byte_end":2125,"line_start":65,"line_end":65,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":255},"to":{"krate":0,"index":445}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2128,"byte_end":2134,"line_start":65,"line_end":65,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":448},"to":{"krate":0,"index":445}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2794,"byte_end":2797,"line_start":88,"line_end":88,"column_start":5,"column_end":8},"kind":"SuperTrait","from":{"krate":1,"index":2146},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2826,"byte_end":2829,"line_start":89,"line_end":89,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2151},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2858,"byte_end":2861,"line_start":90,"line_end":90,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2156},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2890,"byte_end":2893,"line_start":91,"line_end":91,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2161},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2922,"byte_end":2925,"line_start":92,"line_end":92,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":2167},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":2998,"byte_end":2999,"line_start":96,"line_end":96,"column_start":46,"column_end":47},"kind":{"Impl":{"id":671}},"from":{"krate":0,"index":452},"to":{"krate":0,"index":448}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3403,"byte_end":3406,"line_start":109,"line_end":109,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":455}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3417,"byte_end":3423,"line_start":109,"line_end":109,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":448},"to":{"krate":0,"index":455}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3456,"byte_end":3457,"line_start":110,"line_end":110,"column_start":20,"column_end":21},"kind":{"Impl":{"id":672}},"from":{"krate":0,"index":458},"to":{"krate":0,"index":455}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3734,"byte_end":3740,"line_start":116,"line_end":116,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":448},"to":{"krate":0,"index":460}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3763,"byte_end":3769,"line_start":116,"line_end":116,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":448},"to":{"krate":0,"index":460}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":3820,"byte_end":3821,"line_start":117,"line_end":117,"column_start":32,"column_end":33},"kind":{"Impl":{"id":673}},"from":{"krate":0,"index":464},"to":{"krate":0,"index":460}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4089,"byte_end":4098,"line_start":123,"line_end":123,"column_start":5,"column_end":14},"kind":"SuperTrait","from":{"krate":1,"index":2177},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4106,"byte_end":4115,"line_start":123,"line_end":123,"column_start":22,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":2181},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4123,"byte_end":4132,"line_start":123,"line_end":123,"column_start":39,"column_end":48},"kind":"SuperTrait","from":{"krate":1,"index":2185},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4140,"byte_end":4149,"line_start":123,"line_end":123,"column_start":56,"column_end":65},"kind":"SuperTrait","from":{"krate":1,"index":2189},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4157,"byte_end":4166,"line_start":123,"line_end":123,"column_start":73,"column_end":82},"kind":"SuperTrait","from":{"krate":1,"index":2193},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4212,"byte_end":4213,"line_start":127,"line_end":127,"column_start":36,"column_end":37},"kind":{"Impl":{"id":674}},"from":{"krate":0,"index":470},"to":{"krate":0,"index":467}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4492,"byte_end":4495,"line_start":135,"line_end":135,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":445},"to":{"krate":0,"index":472}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4498,"byte_end":4510,"line_start":135,"line_end":135,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":467},"to":{"krate":0,"index":472}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4536,"byte_end":4537,"line_start":136,"line_end":136,"column_start":23,"column_end":24},"kind":{"Impl":{"id":675}},"from":{"krate":0,"index":474},"to":{"krate":0,"index":472}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4800,"byte_end":4809,"line_start":142,"line_end":142,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":472},"to":{"krate":0,"index":475}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4820,"byte_end":4832,"line_start":142,"line_end":142,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":467},"to":{"krate":0,"index":475}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":4871,"byte_end":4872,"line_start":143,"line_end":143,"column_start":26,"column_end":27},"kind":{"Impl":{"id":676}},"from":{"krate":0,"index":478},"to":{"krate":0,"index":475}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":5471,"byte_end":5479,"line_start":162,"line_end":162,"column_start":22,"column_end":30},"kind":{"Impl":{"id":689}},"from":{"krate":1,"index":16547},"to":{"krate":0,"index":445}},{"span":{"file_name":"/Users/wbn/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.11/src/lib.rs","byte_start":6169,"byte_end":6184,"line_start":188,"line_end":188,"column_start":23,"column_end":38},"kind":{"Impl":{"id":690}},"from":{"krate":0,"index":3830},"to":{"krate":1,"index":6958}}]}